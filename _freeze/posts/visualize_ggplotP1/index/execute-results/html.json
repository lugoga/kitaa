{
  "hash": "49e5d7cfcc32030c01ae820d7c651c5d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"The key process for plotting using ggplot2\"\ndescription: \"ggplot2 is a powerful and versatile data visualization framework in R that allows users to create elegant and informative plots through a structured, layered approach.\"\nauthor: \n  - name: Masumbuko Semba\n    url: https://semba.netlify.app\n    orcid: 0000-0002-5002-9747\n    affiliation: Nelson Mandela African Institution of Science and Technology\n    affiliation-url: https://semba.netlify.app/  \ncitation: \n    url: https://lugoga.github.io/kitaa/posts/visualize_ggplotP1/\nbibliography: ../blog.bib\ncsl:  ../elsevier.csl\ndate: \"today\"\ntoc: true\ntoc-depth: 4\ncategories: [Data Science, Data Visualization, ggplot]\nimage: ggplot.png\ncode-fold: false\nexecute: \n  warning: false\n  message: false\n  comment: \"\"\nfilters: \n  - webr\n---\n\n\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-8KY4TDP558\"></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', 'G-8KY4TDP558');\n</script>\n\n\n\n## Introduction\n\nggplot2 is a popular graphics framework in R known for its elegant and aesthetically pleasing visualizations [@ggplot]. It is well-structured and offers a comprehensive approach to creating various types of plots [@ggpubr]. This post aims to uncover the underlying structure of ggplot2, providing a foundation for creating any type of ggplot. However, it is important to note that creating plots in ggplot2 differs significantly from base graphics, which may require a steep learning curve for those familiar with traditional graphics methods [@tidyverse]. \n\nTo fully grasp ggplot2, it's essential to set aside preconceived notions about base graphics and embrace the unique approach of ggplot2. By following this tutorial, you are just 5 steps away from mastering the art of creating ggplots. The distinctive feature of the ggplot2 framework is the way you make plots through adding *layers*. The process of making any ggplot is as follows.\n\n\nWe begin by loading a tidyverse ecosystem in our session. This is required because it contains several function that we are going to use\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(tidyverse)\n```\n:::\n\n\n## Data\n\nWe then use the chinook dataset, which has 112 rows and 3 columns, named loc, tl, and w. The loc column is character type and represents  location names. The tl and w columns are numeric (double type), representing continuous variables total length and weight, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchinook = read_csv(\"../data/chinook_lw.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchinook |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 112\nColumns: 3\n$ tl  <dbl> 120.1, 115.0, 111.2, 110.2, 110.0, 109.7, 105.0, 100.1, 98.0, 92.1…\n$ w   <dbl> 17.9, 17.2, 16.8, 15.8, 14.3, 13.8, 12.8, 11.7, 12.8, 14.8, 9.7, 7…\n$ loc <chr> \"Argentina\", \"Argentina\", \"Argentina\", \"Argentina\", \"Argentina\", \"…\n```\n\n\n:::\n:::\n\n\n\n## The Setup\n\nFirst, you need to tell ggplot what dataset to use. This is done using the `ggplot(df)` function, where `df` is a dataframe that contains all features needed to make the plot. This is the most basic step. Unlike base graphics, ggplot doesn't take vectors as arguments.\n\nOptionally you can add whatever aesthetics you want to apply to your ggplot (inside `aes()` argument) - such as X and Y axis by specifying the respective variables from the dataset. The variable based on which the color, size, shape and stroke should change can also be specified here itself. The aesthetics specified here will be inherited by all the geom layers you will add subsequently.\n\nIf you intend to add more layers later on, may be a bar chart on top of a line graph, you can specify the respective aesthetics when you add those layers.\n\nBelow, I show few examples of how to setup ggplot using in the `chinook`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(data = chinook, aes(x = tl, y = w))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nHowever, no plot will be printed until you add the geom layers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(data = chinook, aes(x = tl, y = w))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThe `aes` argument stands for aesthetics. ggplot2 considers the X and Y axis of the plot to be aesthetics as well, along with color, size, shape, fill etc. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(data = chinook, aes(x = tl, y = w, color = loc))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nIf you want to have the color, size etc fixed (i.e.not vary based on a variable from the dataframe), you need to specify it outside the `aes()`, like this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(data = chinook, aes(x = tl, y = w))+\n  geom_point(color = \"steelblue\", size = 4, shape = 16)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n### The Layers\n\nThe layers in ggplot2 are also called *geoms*. Once the base setup is done, you can append the geoms one on top of the other.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(data = chinook, aes(x = tl, y = w))+\n  geom_point()+\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nWe have added two layers (geoms) to this plot - the `geom_point()` and `geom_smooth()`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot()+\n  geom_point(data = chinook, aes(x = tl, y = w))+\n  geom_smooth(data = chinook, aes(x = tl, y = w))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nSince the X axis Y axis and the color were defined in `ggplot()` setup itself, these two layers inherited those aesthetics. Alternatively, you can specify those aesthetics inside the geom layer also as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot()+\n  geom_point(data = chinook, aes(x = tl, y = w, color = loc))+\n  geom_smooth(data = chinook, aes(x = tl, y = w, fill = loc, color = loc))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nNotice the X and Y axis and how the color of the points vary based on the value of `loc` variable. The legend was automatically added. I would like to propose a change though. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(data = chinook, aes(x = tl, y = w, color = loc, fill = loc))+\n  geom_point()+\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThe points in the plot are colored based on the values of the `loc` variable, and a legend has been automatically added. However, instead of having multiple smoothing lines for each level of `'loc`, you would like to have just one smoothing line that integrates all the levels.\n\n\n### The Labels\n\nLabels play a crucial role in creating clear and informative plots in ggplot2. They include titles, axis labels, legend labels, and annotations, and can be customized in a variety of ways within ggplot2.\n\nOnce you have created the main elements of the plot in ggplot2, you may want to add a title for the overall plot and customize the titles for the x and y axes. This can be accomplished using the labs layer, which is designed for specifying the labels in your ggplot2 visualization.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(data = chinook, aes(x = tl, y = w, color = loc))+\n  geom_point()+\n  geom_smooth()+\n  labs(\n    title = \"The Chinook fish\", \n    subtitle = \"The length and weight relationship\",\n    y = \"Weight (kg)\",\n    x = \"Length (cm)\"\n      )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n\nIf you are showing a ggplot inside a function, you need to explicitly save it and then print using the `print(gg)`, like we just did above.\n\n:::\n\n### The Theme\n\nThemes in ggplot2 are responsible for controlling the overall look of the plot, which includes elements like text, lines, and background colors. These themes can be tailored to suit the visual requirements of your plot. Below are some important elements and ways to customize themes in ggplot2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(data = chinook, aes(x = tl, y = w, color = loc))+\n  geom_point()+\n  geom_smooth()+\n  labs(\n    title = \"The Chinook fish\", \n    subtitle = \"The length and weight relationship\",\n    y = \"Weight (kg)\",\n    x = \"Length (cm)\"\n      ) +\n  theme(\n    legend.position = c(.25,.65),\n    plot.title=element_text(size=30, face=\"bold\"),   \n     plot.subtitle = element_text(size=18, face=\"plain\"),   \n    axis.text.x=element_text(size=12),       \n    axis.text.y=element_text(size=12),    \n    axis.title.x=element_text(size=15), \n    axis.title.y=element_text(size=15),\n    legend.title = element_text(size = 13, face = \"bold\"),\n    legend.text = element_text(size = 10, face = \"italic\"),\n    legend.background = element_rect(fill = \"grey90\", color = \"black\", linewidth = .1)\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### Scale\n\nIn ggplot2, scales control the mapping between data and aesthetics. They are used to customize the appearance of plots, such as axis labels, colors, sizes, and shapes. Here are some key aspects of scales in ggplot2:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(data = chinook, aes(x = tl, y = w, color = loc, fill = loc))+\n  geom_point()+\n  geom_smooth()+\n  labs(\n    title = \"The Chinook fish\", \n    subtitle = \"The length and weight relationship\",\n    y = \"Weight (kg)\",\n    x = \"Length (cm)\"\n      ) +\n  theme(\n    legend.position = c(.25,.65),\n    plot.title=element_text(size=30, face=\"bold\"),   \n     plot.subtitle = element_text(size=18, face=\"plain\"),   \n    axis.text.x=element_text(size=12),       \n    axis.text.y=element_text(size=12),    \n    axis.title.x=element_text(size=15), \n    axis.title.y=element_text(size=15),\n    legend.title = element_text(size = 13, face = \"bold\"),\n    legend.text = element_text(size = 10, face = \"italic\"),\n    legend.background = element_rect(fill = \"grey90\", color = \"black\", linewidth = .1)\n    )+\n  scale_x_continuous(breaks = seq(20,125,10))+\n  scale_y_continuous(breaks = seq(2,30,4))+\n  scale_color_manual(values = c(\"firebrick\", \"steelblue\", \"orange\"))+\n  scale_fill_manual(values = c(\"firebrick\", \"steelblue\", \"orange\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n### The Facets\n\nIn the previous chart, you had the scatterplot for all different values of `cut` plotted in the same chart. What if you want one chart for one `cut`?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(data = chinook, aes(x = tl, y = w, color = loc, fill = loc))+\n  geom_point()+\n  geom_smooth()+\n  labs(\n    title = \"The Chinook fish\", \n    subtitle = \"The length and weight relationship\",\n    y = \"Weight (kg)\",\n    x = \"Length (cm)\"\n      ) +\n  theme(\n    legend.position = \"none\",\n    plot.title=element_text(size=30, face=\"bold\"),   \n     plot.subtitle = element_text(size=18, face=\"plain\"),   \n    axis.text.x=element_text(size=12),       \n    axis.text.y=element_text(size=12),    \n    axis.title.x=element_text(size=15), \n    axis.title.y=element_text(size=15),\n    legend.title = element_text(size = 13, face = \"bold\"),\n    legend.text = element_text(size = 10, face = \"italic\"),\n    legend.background = element_rect(fill = \"grey90\", color = \"black\", linewidth = .1)\n    )+\n  scale_x_continuous(breaks = seq(20,125,10))+\n  scale_y_continuous(breaks = seq(2,30,4))+\n  scale_color_manual(values = c(\"firebrick\", \"steelblue\", \"orange\"))+\n  scale_fill_manual(values = c(\"firebrick\", \"steelblue\", \"orange\"))+\n  facet_wrap(~loc, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\nIn `facet_wrap`, the scales of the X and Y axis are fixed to accomodate all points by default. This would make comparison of attributes meaningful because they would be in the same scale. However, it is possible to make the scales roam free making the charts look more evenly distributed by setting the argument `scales=free`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(data = chinook, aes(x = tl, y = w, color = loc, fill = loc))+\n  geom_point()+\n  geom_smooth()+\n  labs(\n    title = \"The Chinook fish\", \n    subtitle = \"The length and weight relationship\",\n    y = \"Weight (kg)\",\n    x = \"Length (cm)\"\n      ) +\n  theme(\n    legend.position = \"none\",\n    plot.title=element_text(size=30, face=\"bold\"),   \n     plot.subtitle = element_text(size=18, face=\"plain\"),   \n    axis.text.x=element_text(size=12),       \n    axis.text.y=element_text(size=12),    \n    axis.title.x=element_text(size=15), \n    axis.title.y=element_text(size=15),\n    legend.title = element_text(size = 13, face = \"bold\"),\n    legend.text = element_text(size = 10, face = \"italic\"),\n    legend.background = element_rect(fill = \"grey90\", color = \"black\", linewidth = .1)\n    )+\n  scale_x_continuous(breaks = seq(20,125,10))+\n  scale_y_continuous(breaks = seq(2,30,4))+\n  scale_color_manual(values = c(\"firebrick\", \"steelblue\", \"orange\"))+\n  scale_fill_manual(values = c(\"firebrick\", \"steelblue\", \"orange\"))+\n  facet_wrap(~loc, nrow = 1, scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## Wind up\n\nggplot2 is a powerful and versatile graphics framework in R that is renowned for its ability to create elegant and visually appealing visualizations. By following the principles and techniques outlined in this post, you are well on your way to becoming a skilled ggplot2 practitioner, capable of harnessing the power of this popular graphics framework to enhance the impact and clarity of your data-driven insights.\n\n\n## References \n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}