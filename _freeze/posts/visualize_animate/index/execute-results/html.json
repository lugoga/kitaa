{
  "hash": "c078dd293d4551800390448e2ceeeb48",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualize and compare change over time using gganimate.\"\ndescription: \"The article provides detailed instructions on using the gganimate package to animate a static ggplot2 plot, enhancing visualizations with dynamic transitions between data states.\"\nauthor: \n  - name: Masumbuko Semba\n    url: https://semba.netlify.app\n    orcid: 0000-0002-5002-9747\n    affiliation: Nelson Mandela African Institution of Science and Technology\n    affiliation-url: https://semba.netlify.app/  \ncitation: \n    url: https://lugoga.github.io/kitaa/posts/visualize_animate/\nbibliography: ../blog.bib\ncsl:  ../elsevier.csl\ndate: \"2024-06-20\"\ntoc: true\ntoc-depth: 4\ncategories: [Data Science, Data Visualization, ggplot]\nimage: cement_production_racee_chart.gif\ncode-fold: false\nexecute: \n  warning: false\n  message: false\n  comment: \"\"\n  \nfilters: \n  - webr\n\n---\n\n\n\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-8KY4TDP558\"></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', 'G-8KY4TDP558');\n</script>\n\n\n\n## Introduction\n\nOne of the main critiques of **ggplot2** [@ggplot] is its static nature, often cited as a limitation compared to more interactive tools like Highcharts. However, this doesn't mean that animation is entirely unavailable. Enter gganimate, a natural extension of ggplot2 designed to animate visualizations and capture changes in data over time or other variables. With gganimate, you can create dynamic charts and export them as a series of PNGs, or as a single GIF or MP4 file.\n\nToday, you'll explore **gganimate** [@gganimate] and discover how to create compelling animated visualizations. By the end of this article, you'll have a set of visually engaging animations to showcase your data. Let's start by loading packages we need for this session;\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(gganimate)\nrequire(tidyverse)\n```\n:::\n\n\n\n## Dataset\n\nThe dataset we will use for the example exercises is \"Global CO2 emissions from cement production\" (Andrew 2022). \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- readr::read_csv(\"https://zenodo.org/record/7081360/files/1.%20Cement_emissions_data.csv\", show_col_types = FALSE)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 142 × 221\n    Year Afghanistan Albania Algeria Andorra Angola Anguilla\n   <dbl>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>    <dbl>\n 1  1880          NA      NA      NA       0     NA       NA\n 2  1881          NA      NA      NA       0     NA       NA\n 3  1882          NA      NA      NA       0     NA       NA\n 4  1883          NA      NA      NA       0     NA       NA\n 5  1884          NA      NA      NA       0     NA       NA\n 6  1885          NA      NA      NA       0     NA       NA\n 7  1886          NA      NA      NA       0     NA       NA\n 8  1887          NA      NA      NA       0     NA       NA\n 9  1888          NA      NA      NA       0     NA       NA\n10  1889          NA      NA      NA       0     NA       NA\n# ℹ 132 more rows\n# ℹ 214 more variables: `Antigua and Barbuda` <dbl>, Argentina <dbl>,\n#   Armenia <dbl>, Aruba <dbl>, Australia <dbl>, Austria <dbl>,\n#   Azerbaijan <dbl>, Bahamas <dbl>, Bahrain <dbl>, Bangladesh <dbl>,\n#   Barbados <dbl>, Belarus <dbl>, Belgium <dbl>, Belize <dbl>, Benin <dbl>,\n#   Bermuda <dbl>, Bhutan <dbl>, `Bonaire, Saint Eustatius and Saba` <dbl>,\n#   `Bosnia and Herzegovina` <dbl>, Botswana <dbl>, Brazil <dbl>, …\n```\n\n\n:::\n:::\n\n\nWe can subset the emmission measurement from 1960 onwards, and any columns with all NAs or zeros have been dropped. The table below displays all the data that will be used in this tutorial.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat |> \n  dplyr::filter(Year >= 1960) |> \n  select_if(function(x) all(!is.na(x))) |> \n  select_if(function(x) all(!x == 0))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 62 × 109\n    Year Afghanistan Algeria Angola Argentina Armenia Australia Austria\n   <dbl>       <dbl>   <dbl>  <dbl>     <dbl>   <dbl>     <dbl>   <dbl>\n 1  1960        18.0    523.   79.4      1305    89.6      1381    1399\n 2  1961        21.8    530.   76.9      1436   100.       1414    1523\n 3  1962        29.1    432.   83.3      1446   113.       1450    1512\n 4  1963        50.9    436.   94.5      1254   120.       1541    1635\n 5  1964        61.8    389.  105.       1439   128.       1792    1865\n 6  1965        83.6    367.  120.       1632   143.       1879    1999\n 7  1966        87.2    327.  131.       1723   159.       1817    2224\n 8  1967        65.4    360.  138.       1756   168.       1890    2246\n 9  1968        47.1    429   152.       2064   174        1941    2250\n10  1969        50.9    469.  189.       2148   179.       2130    2253\n# ℹ 52 more rows\n# ℹ 101 more variables: Azerbaijan <dbl>, Bangladesh <dbl>, Belarus <dbl>,\n#   Belgium <dbl>, `Bosnia and Herzegovina` <dbl>, Brazil <dbl>,\n#   Bulgaria <dbl>, Canada <dbl>, Chile <dbl>, China <dbl>, Colombia <dbl>,\n#   Croatia <dbl>, Cyprus <dbl>, `Czech Republic` <dbl>, `North Korea` <dbl>,\n#   `Democratic Republic of the Congo` <dbl>, Denmark <dbl>,\n#   `Dominican Republic` <dbl>, Ecuador <dbl>, Egypt <dbl>, …\n```\n\n\n:::\n:::\n\n\nWe notice that using the select_if have removed even the countries we are interested, therefore, we need to make some changes to the code and use the filter verb instead\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected.countries = dat |> \n  select(Year, Kenya, Uganda, Tanzania, Angola, Malawi, Zambia, Mozambique) |> \n  filter(Year > 1960)\n```\n:::\n\n\nUnfortunate, the dataset is in wide format and for us to visualize and analyse to compare the emmissions across the countries, we need to convert the dataset from wide to long format first. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected.countries.long = selected.countries |> \n  pivot_longer(cols =  -Year, names_to = \"countries\", values_to = \"Emmissions\")\n```\n:::\n\n\n\nCreate and visualize the emmission of cement productions for the selecte dcountires in the Africa continent. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected.countries.long |> \n  ggplot(aes(x = Year, y = Emmissions, color = countries))+\n  geom_line() + \n  # scale_y_log10() +\n  labs(\n    x = \"Year\", \n    y = \"log10(Emission)\") +\n  theme(axis.title =  element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThen rank the cement emmission for all the countries for over the entire period the dataset was sampled. TO do that we use tne rank function and pass the argument of annual emmisions. The rank function will assign the rank for the country with the highest emmision as to the country with the lowest emmisions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrankings = selected.countries.long |> \n  group_by(Year) |> \n  mutate(Rank = rank(-Emmissions)) |> \n  # filter(Year == 1970) |> \n  arrange(Rank) |> \n  mutate(labelling = as.character(Emmissions))\n```\n:::\n\n\n\n\nLet's filter the cement production emmissions for 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrankings |> \n  filter(Year == 2021) |> \n  select(-labelling) |> \n  flextable::flextable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-aa77f772{}.cl-aa713a7c{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-aa73bebe{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-aa73bec8{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-aa73cf44{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-aa73cf4e{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-aa73cf4f{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-aa73cf50{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-aa73cf58{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-aa73cf59{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-aa77f772'><thead><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-aa73cf44\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">Year</span></p></th><th class=\"cl-aa73cf4e\"><p class=\"cl-aa73bec8\"><span class=\"cl-aa713a7c\">countries</span></p></th><th class=\"cl-aa73cf44\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">Emmissions</span></p></th><th class=\"cl-aa73cf44\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">Rank</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">2,021</span></p></td><td class=\"cl-aa73cf50\"><p class=\"cl-aa73bec8\"><span class=\"cl-aa713a7c\">Kenya</span></p></td><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">3,583.00</span></p></td><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">1</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">2,021</span></p></td><td class=\"cl-aa73cf50\"><p class=\"cl-aa73bec8\"><span class=\"cl-aa713a7c\">Tanzania</span></p></td><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">2,524.00</span></p></td><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">2</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">2,021</span></p></td><td class=\"cl-aa73cf50\"><p class=\"cl-aa73bec8\"><span class=\"cl-aa713a7c\">Angola</span></p></td><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">1,124.00</span></p></td><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">3</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">2,021</span></p></td><td class=\"cl-aa73cf50\"><p class=\"cl-aa73bec8\"><span class=\"cl-aa713a7c\">Mozambique</span></p></td><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">1,011.00</span></p></td><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">4</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">2,021</span></p></td><td class=\"cl-aa73cf50\"><p class=\"cl-aa73bec8\"><span class=\"cl-aa713a7c\">Zambia</span></p></td><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">961.00</span></p></td><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">5</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">2,021</span></p></td><td class=\"cl-aa73cf50\"><p class=\"cl-aa73bec8\"><span class=\"cl-aa713a7c\">Uganda</span></p></td><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">581.80</span></p></td><td class=\"cl-aa73cf4f\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">6</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-aa73cf58\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">2,021</span></p></td><td class=\"cl-aa73cf59\"><p class=\"cl-aa73bec8\"><span class=\"cl-aa713a7c\">Malawi</span></p></td><td class=\"cl-aa73cf58\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">94.16</span></p></td><td class=\"cl-aa73cf58\"><p class=\"cl-aa73bebe\"><span class=\"cl-aa713a7c\">7</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\nWe notice that in 2021, data on emissions from cement production for several African countries were compiled and ranked in ascending order. Malawi emitted the least amount of emissions, with 94.16 tons. Following Malawi, Uganda emitted 581.8 tons, Zambia emitted 961 tons, and Mozambique emitted 1011 tons. Angola followed with 1124 tons of emissions, Tanzania with 2524 tons, and Kenya with the highest emissions of 3583 tons.\n\n\n## Creating and Styling a Bar Chart for a Single Time Period\n\nCreating an animated chart can be time-consuming, so it's wise to start with a simpler task by building a visualization for a single time period. This allows you to ensure that everything appears exactly as you intend. For race charts to function correctly, they require one essential element: the rank. In our case, the rank indicates the position of a ticker's value compared to other tickers. Essentially, it determines the position of each column in the bar chart.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = rankings |> filter(Year == 1980), \n  aes(x = reorder(countries, -Rank), y = Emmissions, color = countries, fill = countries)\n  )+\n  geom_col()+\n  coord_flip(clip = \"off\", expand = FALSE) +\n  geom_text(aes(label = labelling), hjust = -.25) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\", axis.title.y = element_blank(),\n    plot.margin = margin(1, 2, 1, 2, unit = \"cm\")\n    ) +\n  ggsci::scale_color_jama()+\n  ggsci::scale_fill_jama()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## Animate\n\nAnimating a chart with R **gganimate** is easy. The only changes required in the charting code are removing the data filtering to capture all time periods and storing the entire plot into a variable. We assign our ggplot object as p, which is going to be fed into the animations functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\np = ggplot(\n  data = rankings , \n  aes(x = reorder(countries, -Rank), y = Emmissions, color = countries, fill = countries)\n  )+\n  geom_col()+\n  coord_flip(clip = \"off\", expand = FALSE) +\n  geom_text(aes(label = labelling), hjust = -.25) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\", axis.title.y = element_blank(),\n    plot.margin = margin(1, 2, 1, 2, unit = \"cm\")\n    ) +\n  ggsci::scale_color_jama()+\n  ggsci::scale_fill_jama()\n```\n:::\n\n\n\nOnce we have the plot object, we can animate with gganimate as the chunk below highlight. The p object represents a basic ggplot created. The `transition_states` function from gganimate is used to animate the plot based on the Year variable, with a transition length of 4 seconds between states and each state lasting for 1 second. The view_follow(fixed_x = TRUE) function keeps the x-axis consistent throughout the animation for a stable frame of reference. The plot's title dynamically updates to show the current year using the `{closest_state}` syntax. The caption at the bottom indicates the source as \"SEMBA@2024\". \n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimated_plot = p + \n  transition_states(\n    states = Year, \n    transition_length = 4, \n    state_length = 1\n    ) +\n  view_follow(fixed_x = TRUE) +\n  labs(title = \"Annual Cement Production in Tonnes ({closest_state})\", caption = \"SEMBA@2024\")\n\nanimated_plot\n```\n:::\n\n\nThis approach allows for a dynamic and engaging visualization of changes in annual cement production over time.\n\nThe `animate()` function will generate a GIF with a resolution of 1024x768 and a total of 600 frames. This means that the function will create a sequence of 600 images and compile them into a single animated GIF file. The resulting animation will have a resolution of 1024x800 pixels, providing a high-quality visual output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimate(\n  plot = animated_plot,\n  width = 1024,\n  height = 800,\n  res = 150,\n  nframes = 600,\n  fps = 30,\n  end_pause = 60,\n  renderer = gifski_renderer(\"cement_production_racee_chart.gif\")\n)\n```\n:::\n\n\n\n![](cement_production_racee_chart.gif)\n\n\n\n## References\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/tabwid-1.1.3/tabwid.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/tabwid-1.1.3/tabwid.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}