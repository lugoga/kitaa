{
  "hash": "89daf233ab7379286e2318b2f5cead56",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Understanding vector and dataframe\"\ndescription: \"Understanding vectoor and dataframe as core data storage in R is an important part, which allows for data analysis and visualization\"\nauthor: \"Masumbuko Semba\"\ndate: \"2024-02-02\"\n# date-modified: \"2024-01-26\"\ncategories: [visualization, code]\nimage: \"DATATYPES.svg\"\n---\n\n\n# Introduction\n\n**R** language is a flexible language that allows to work with different kind of data format [@R-base]. This include `integer`, `numeric`, `character`, `complex`, `dates` and `logical`. The default data type or class in **R** is double precision---numeric. In a nutshell, R treats all kind of data into five categories but we deal with only four in this book.\nDatasets in R are often a combination of seven different data types are highlighted in @fig-datatypes;\n\n![Common data types often collected and stored for anaysis and modelling ](DATATYPES.svg){# fig-datatypes}\n\n\n# Vectors\n\nOften times we want to store a set of numbers in once place. One way to do this is using the vectors in R. Vector is the most basic data structure in R. It is a sequence of elements of the same data type. if the elements are of different data types, they be coerced to a common type that can accommodate all the elements. Vector are generally created using the `c()` function widely called `concatenate`, though depending on the type vector being created, other method. Vectors store several numbers-- a set of numbers in one container. let us look on the example below\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid = c(1,2,3,4,5)\nmean.tl = c(158,659,782,659,759)\ncountry = c(\"Somalia\", \"Kenya\", \"Mauritius\", \"Seychelles\",  \"Mozambique\")\n```\n:::\n\n\nNotice that the `c()` function, which is short for concatenate wraps the list of numbers. The `c()` function combines all numbers together into one container. Notice also that all the individual numbers are separated with a comma. The comma is referred to an an item-delimiter. It allows R to hold each of the numbers separately. This is vital as without the item-delimiter, R will treat a vector as one big, unseperated number.\n\n## Numeric\n\nThe most common data type in R is numeric. The numeric class holds the set of real numbers --- decimal place numbers. We create a numeric vector using a `c()` function but you can use any function that creates a sequence of numbers.  For example, we can create a numeric vector of SST as follows;\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsst = c(25.4, 26, 28, 27.8, 29, 24.8, 22.3)\n```\n:::\n\n\nWe can check whether the variable sst is numeric with `is.numeric` function\n\n::: {.cell}\n\n```{.r .cell-code}\nis.numeric(sst)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n## Integer\n\nInteger vector data type is actually a special case of numeric data. Unlike `numeric`, `integer` values do not have decimal places.They are commonly used for counting or indexing.  Creating an integer vector is similar to numeric vector except that we need to instruct R to treat the data as integer and not numeric or double. To command R creating integer, we specify a suffix `L` to an element\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndepth = c(5L, 10L, 15L, 20L, 25L,30L)\nis.vector(depth);class(depth)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nif your variable does not have decimals, R will automatically set the type as integers instead of numeric.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naa = c(20,68,78,50)\n```\n:::\n\n\nYou can check if the data is integer with `is.integer()` and can convert numeric value to an integer with `as.integer()` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.integer(aa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\nYou can query the class of the object with the `class()` to know the class of the object\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(aa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\nAlthough the object bb is integer as confirmed with `as.integer()` function, the `class()` ouput the answer as numeric. This is because the defaul type of number in r is numeric. However, you can use the function `as.integer()` to convert numeric value to integer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(as.integer(aa))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n\n## Character\n\nIn programming terms, we usually call text as *string*. This often are `text` data like names. A character vector may contain a single character , a word or a group of words. The elements must be enclosed with a single or double quotations mark.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsites = c(\"Pemba Channel\", \"Zanzibar Channnel\", \"Pemba Channel\")\nis.vector(sites); class(sites)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\nWe can be sure whether the object is a string with `is.character()` or check the class of the object with `class()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries = c(\"Kenya\", \"Uganda\", \"Rwanda\", \"Tanzania\")\nclass(countries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n::: callout-note   \nEverything inside `\"\"` will be considered as character, no matter if it looks like character or not\n:::\n\n\n## Factor\n\nFactor variables are a special case of character variables in the sense that it also contains text. However, factor variables are used when there are a limited number of unique character strings. It often represents a categorical variable. For instance, the gender will usually take on only two values, \\\"female\\\" or \\\"male\\\" (and will be considered as a factor variable) whereas the name will generally have lots of possibilities (and thus will be considered as a character variable). To create a factor variable use the `factor()` function:\n\n::: {.cell}\n\n```{.r .cell-code}\n    maturity.stage <- factor(c(\"I\", \"II\", \"III\", \"IV\", \"V\"))\n    maturity.stage\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] I   II  III IV  V  \nLevels: I II III IV V\n```\n\n\n:::\n:::\n\n\n\nTo know the different levels of a factor variable, use `levels()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n levels(maturity.stage)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"I\"   \"II\"  \"III\" \"IV\"  \"V\"  \n```\n\n\n:::\n:::\n\n  \n   \nBy default, the levels are sorted alphabetically. You can reorder the levels with the argument `levels` in the `factor()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmature <- factor(maturity.stage, levels = c(\"V\", \"III\"))\n    levels(mature)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"V\"   \"III\"\n```\n\n\n:::\n:::\n\n  \n\nCharacter strings can be converted to factors with `as.factor()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n text <- c(\"test1\", \"test2\", \"test1\", \"test1\") # create a character vector\n    class(text) # to know the class\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n text_factor <- as.factor(text) # transform to factor\n    class(text_factor) # recheck the class\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n   \nThe character strings have been transformed to factors, as shown by its class of the type `factor`.\n\n\nOften we wish to take a continuous numerical vector and transform it into a factor. The function `cut()` takes a vector of numerical data and creates a factor based on your give cut-points. Let us make a fictional total length of 508 bigeye tuna with `rnorm()` function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntl.cm = rnorm(n = 508, mean = 40, sd = 18)\n\n# mosaic::plotDist(dist = \"norm\", mean = 40, sd = 18, under = F, kind = \"cdf\", add = TRUE)\n\ntl.cm |>\n  tibble::as.tibble() |>\n  ggstatsplot::gghistostats(x = value, binwidth = 10, test.value = 40.2, type = \"n\", normal.curve = T, centrality.type = \"p\", xlab = \"Total length (cm)\")\n```\n\n::: {.cell-output-display}\n![Normal distribution of bigeye tuna's tota length](index_files/figure-html/fig-hist-1.png){#fig-hist fig-pos='H' width=288}\n:::\n:::\n\n\nWe can now breaks the distribution into groups and make a simple plot as shown in @fig-lfq, where frequency of bigeye tuna color coded with the group size\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup = cut(tl.cm, breaks = c(0,30,60,110),\n            labels = c(\"Below 20\", \"30-60\", \"Above 60\"))\nis.factor(group)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(group)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Below 20\" \"30-60\"    \"Above 60\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(table(group), las = 1, horiz = FALSE, col = c(\"blue\", \"green\", \"red\"), ylab = \"Frequency\", xlab = \"\")\n```\n\n::: {.cell-output-display}\n![Length frequency of bigeye tuna](index_files/figure-html/fig-bar-1.png){#fig-bar fig-pos='H' width=384}\n:::\n:::\n\n\n\n## Logical\n\nLogical data (or simply logical ) represent the logical `TRUE` state and the logical `FALSE` state. Logical variables are the variables in which logical data are stored. Logical variables can assume only two states:\n\n+ FALSE, always represent by 0;\n+ TRUE, always represented by a nonzero object. Usually, the digit 1 is used for TRUE. \n\nWe can create logical variables indirectly, through logical operations, such as the result of a comparison between two numbers. These operations return logical values. For example, type the following statement at the R console: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 > 3;\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n5 < 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\nSince 5 is indeed greater than 3, the result of the comparison is true, however, 5 is not less than 3, and hence the comparison is false. The sign `>` and `<` are relational operators, returning logical data types as a result. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n value1 <- 7\n    value2 <- 9\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n    greater <- value1 > value2\n    greater\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n    class(greater)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n    # is value1 less than or equal to value2?\n    less <- value1 <= value2\n    less\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n    class(less)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\nIt is also possible to transform logical data into numeric data. After the transformation from logical to numeric with the `as.numeric()` command, `FALSE` values equal to 0 and `TRUE` values equal to 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n greater_num <- as.numeric(greater)\n    sum(greater)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n   less_num <- as.numeric(less)\n    sum(less)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\nConversely, numeric data can be converted to logical data, with `FALSE` for all values equal to 0 and `TRUE` for all other values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  x <- 0\n  as.logical(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n y <- 5\nas.logical(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n## Date and Time\n\nDate and time are also treated as vector in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate.time = seq(lubridate::dmy(010121), \n                lubridate::dmy(250121), \n                length.out = 5)\ndate.time\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2021-01-01\" \"2021-01-07\" \"2021-01-13\" \"2021-01-19\" \"2021-01-25\"\n```\n\n\n:::\n:::\n\n\n# Generating vectors\n\n## Sequence Numbers\n\nThere are few R operators that are designed for creating vecor of non-random numbers. These functions provide multiple ways for generating sequences of numbers\n\nThe colon `:` operator, explicitly generate regular sequence of numbers between the lower and upper boundary numbers specified. For example, generating number beween 0 and 10, we simply write;\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector.seq = 0:10\nvector.seq\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\nHowever, if you want to generate a vector of sequence number with specified interval, let say we want to generate number between 0 and 10 with interval of 2, then the `seq()` function is used\n\n::: {.cell}\n\n```{.r .cell-code}\nregular.vector = seq(from = 0,to = 10, by = 2)\nregular.vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0  2  4  6  8 10\n```\n\n\n:::\n:::\n\n\nunlike the `seq()` function and `:` operator that works with numbers, the `rep()` function generate sequence of repeated numbers or strings to create a vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid = rep(x = 3, each = 4)\nstation = rep(x = \"Station1\", each = 4)\nid;station\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 3 3 3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Station1\" \"Station1\" \"Station1\" \"Station1\"\n```\n\n\n:::\n:::\n\n## Sequence characters\n\nThe `rep()` function allows to parse `each` and `times` arguments. The `each` argument allows creation of vector that that repeat each element in a vector according to specified number. \n\n::: {.cell}\n\n```{.r .cell-code}\nsampled.months = c(\"January\", \"March\", \"May\")\nrep(x = sampled.months, each = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"January\" \"January\" \"January\" \"March\"   \"March\"   \"March\"   \"May\"    \n[8] \"May\"     \"May\"    \n```\n\n\n:::\n:::\n\n\nBut the `times` argument repeat the whole vector to specfied times\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(x = sampled.months, times = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"January\" \"March\"   \"May\"     \"January\" \"March\"   \"May\"     \"January\"\n[8] \"March\"   \"May\"    \n```\n\n\n:::\n:::\n\n\n## Generating normal distribution\n\nThe central limit theorem that ensure the data is normal distributed is well known to statistician. R has a `rnorm()` function which makes vector of normal distributed values. For example to generate a vector of 40 sea surface temperature values from a normal distribution with a `mean` of 25, and `standard deviation` of 1.58, we simply type this expression in console;\n\n::: {.cell}\n\n```{.r .cell-code}\nsst = rnorm(n = 40, mean = 25,sd = 1.58)\nsst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 22.51905 25.80313 24.22628 21.86037 28.99526 24.67710 24.16502 25.47170\n [9] 26.88654 25.60199 24.37076 27.22248 24.18528 24.85536 23.85104 25.53450\n[17] 25.36971 23.47394 25.31547 23.21039 25.51640 24.39540 25.97264 26.37607\n[25] 25.47267 21.68194 24.61381 21.08819 22.96802 26.02830 25.37427 24.85639\n[33] 26.26802 26.43708 25.48479 26.23754 24.07334 24.25398 27.26465 25.60898\n```\n\n\n:::\n:::\n\n# Common task\n\n## Rounding off numbers\n\nThere are many ways of rounding off numerical number to the nearest integers or specify the number of decimal places. the code block below illustrate the common way to round off:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchl = rnorm(n = 20, mean = .55, sd = .2)\nchl |> round(digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.61 0.59 0.71 0.41 0.26 0.56 0.57 0.26 0.83 0.69 0.64 0.51 0.69 0.86 0.48\n[16] 0.49 0.44 0.53 0.17 0.28\n```\n\n\n:::\n:::\n\n\n\n## Number of elements in a vector\n\nSometimes you may have a long vector and want to know the numbers of elements in the object. R has `length()` function that allows you to query the vector and print the answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(chl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20\n```\n\n\n:::\n:::\n\n\n# Data Frame\n\nOne of R’s greatest strengths is in manipulating data. One of the primary structures for storing data in R is called a Data Frame. Much of your work in R will be working with and manipulating data frames. Data frames are made up of rows and columns. The top row is a header and describes the contents of each variable. Each row represents an individual measured or observed record. Records can also have names. Each record contains multiple cells of values. Let’s illustrates data frame using historical catch data in the Western Indian Ocean Region from FAO. This dataset  is called `landings_wio_country.csv` and contains some data about total landed catches of ten countries in the WIO region reported in FAO between 1951 and 2015.\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-079c35e2{}.cl-0795f164{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-07985904{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-0798590e{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-0798694e{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-0798694f{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07986950{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07986958{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07986959{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07986962{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-079c35e2'><thead><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-0798694e\"><p class=\"cl-07985904\"><span class=\"cl-0795f164\">country</span></p></th><th class=\"cl-0798694f\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">year</span></p></th><th class=\"cl-0798694f\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">catch</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07986950\"><p class=\"cl-07985904\"><span class=\"cl-0795f164\">Kenya</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">2,015</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">33,080</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07986950\"><p class=\"cl-07985904\"><span class=\"cl-0795f164\">Tanzania</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">2,015</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">110,703</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07986950\"><p class=\"cl-07985904\"><span class=\"cl-0795f164\">Zanzibar</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">2,015</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">45,972</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07986950\"><p class=\"cl-07985904\"><span class=\"cl-0795f164\">Seychelles</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">2,015</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">325,291</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07986950\"><p class=\"cl-07985904\"><span class=\"cl-0795f164\">South Africa</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">2,015</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">1,086,810</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07986950\"><p class=\"cl-07985904\"><span class=\"cl-0795f164\">Mozambique</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">2,015</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">16,080</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07986950\"><p class=\"cl-07985904\"><span class=\"cl-0795f164\">Somalia</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">2,015</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">1,831</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07986950\"><p class=\"cl-07985904\"><span class=\"cl-0795f164\">Mauritius</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">2,015</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">16,373</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07986950\"><p class=\"cl-07985904\"><span class=\"cl-0795f164\">Mayotte</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">2,015</span></p></td><td class=\"cl-07986958\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">28,936</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07986959\"><p class=\"cl-07985904\"><span class=\"cl-0795f164\">Madagascar</span></p></td><td class=\"cl-07986962\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">2,015</span></p></td><td class=\"cl-07986962\"><p class=\"cl-0798590e\"><span class=\"cl-0795f164\">145,629</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n`data.frame` is very much like a simple Excel spreadsheet where each column represents a variable type and each row represent observations. A data frame is the most common way of storing data in R and, generally, is the data structure most often used for data analyses. A data frame is a list of equal--length vectors with rows as records and columns as variables. This makes data frames unique in data storing as it can store different classes of objects in each column (i.e. numeric, character, factor, logic, etc). \n\nIn this section, we will create data frames and add attributes to data frames. Perhaps the easiest way to create a data frame is to parse vectors in a `data.frame()` function. For instance, in this case we create a simple data frame `dt` and assess its internal structure\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create vectors\ncountry  = c('Kenya','Mozambique','Seychelles')\nweight = c(90, 75, 92)\nmaturity = c(\"I\", \"II\", \"V\")\n\n## use the vectors to make a data frame\ndt = data.frame(country, weight, maturity)\n\n## assess the internal structure\nstr(dt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  3 variables:\n $ country : chr  \"Kenya\" \"Mozambique\" \"Seychelles\"\n $ weight  : num  90 75 92\n $ maturity: chr  \"I\" \"II\" \"V\"\n```\n\n\n:::\n:::\n\n\nNote how Variable `Name` in dt was converted to a column of factors . This is because there is a default setting in `data.frame()` that converts character columns to factors . We can turn this off by setting the `stringsAsFactors = FALSE` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## use the vectors to make a data frame\ndf = data.frame(country, weight, maturity, stringsAsFactors = FALSE)\ndf |> str()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  3 variables:\n $ country : chr  \"Kenya\" \"Mozambique\" \"Seychelles\"\n $ weight  : num  90 75 92\n $ maturity: chr  \"I\" \"II\" \"V\"\n```\n\n\n:::\n:::\n\n\nNow the variable `Name` is of character class in the data frame. The inherited problem of data frame to convert character columns into a factor is resolved by introduction f advanced data frames called *tibble* [@tibble], which provides sticker checking and better formating than the traditional data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## use the vectors to make a tibble\ntb = tibble::tibble(country, weight, maturity) \n## check the internal structure of the tibble\ntb |> dplyr::glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3\nColumns: 3\n$ country  <chr> \"Kenya\", \"Mozambique\", \"Seychelles\"\n$ weight   <dbl> 90, 75, 92\n$ maturity <chr> \"I\", \"II\", \"V\"\n```\n\n\n:::\n:::\n\n\n@tbl-score show the the data frame created by fusing the two vectors together.\n\n\n::: {#tbl-score .cell tbl-cap='Variables in the data frame'}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-07b62d08{}.cl-07b08272{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-07b28554{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-07b28555{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-07b295b2{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07b295bc{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07b295c6{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07b295c7{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07b295d0{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07b295d1{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-07b62d08'><thead><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-07b295b2\"><p class=\"cl-07b28554\"><span class=\"cl-07b08272\">country</span></p></th><th class=\"cl-07b295bc\"><p class=\"cl-07b28555\"><span class=\"cl-07b08272\">weight</span></p></th><th class=\"cl-07b295b2\"><p class=\"cl-07b28554\"><span class=\"cl-07b08272\">maturity</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07b295c6\"><p class=\"cl-07b28554\"><span class=\"cl-07b08272\">Kenya</span></p></td><td class=\"cl-07b295c7\"><p class=\"cl-07b28555\"><span class=\"cl-07b08272\">90</span></p></td><td class=\"cl-07b295c6\"><p class=\"cl-07b28554\"><span class=\"cl-07b08272\">I</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07b295c6\"><p class=\"cl-07b28554\"><span class=\"cl-07b08272\">Mozambique</span></p></td><td class=\"cl-07b295c7\"><p class=\"cl-07b28555\"><span class=\"cl-07b08272\">75</span></p></td><td class=\"cl-07b295c6\"><p class=\"cl-07b28554\"><span class=\"cl-07b08272\">II</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07b295d0\"><p class=\"cl-07b28554\"><span class=\"cl-07b08272\">Seychelles</span></p></td><td class=\"cl-07b295d1\"><p class=\"cl-07b28555\"><span class=\"cl-07b08272\">92</span></p></td><td class=\"cl-07b295d0\"><p class=\"cl-07b28554\"><span class=\"cl-07b08272\">V</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\nBecause the columns have meaning and we have given them column names, it is desirable to want to access an element by the name of the column as opposed to the column number.In large Excel spreadsheets I often get annoyed trying to remember which column something was. The `$`sign and `[]`are used in R to select variable from the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt$country\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Kenya\"      \"Mozambique\" \"Seychelles\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndt[,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Kenya\"      \"Mozambique\" \"Seychelles\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndt$weight\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 90 75 92\n```\n\n\n:::\n\n```{.r .cell-code}\ndt[,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 90 75 92\n```\n\n\n:::\n:::\n\n\nThe FSA package in R has build in dataset that we can use for illustration. For example, `ChinookArg` dataset  contains total length and weight of 112 Chinook salmon collected in three sites in Argentina (@tbl-chinook). \n\n\n::: {#tbl-chinook .cell tbl-cap='Longleys\\' Economic dataset'}\n\n```{.r .cell-code}\nchinook = FSA::ChinookArg\n\n\n\nchinook |>\n  dplyr::sample_n(size = 12) |>\n  flextable::flextable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-07cc3daa{}.cl-07c64dfa{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-07c8780a{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-07c87814{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-07c8852a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07c88534{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07c88535{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07c8853e{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07c8853f{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07c88548{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-07cc3daa'><thead><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-07c8852a\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">tl</span></p></th><th class=\"cl-07c8852a\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">w</span></p></th><th class=\"cl-07c88534\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">loc</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">94.9</span></p></td><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">11.8</span></p></td><td class=\"cl-07c8853e\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">Argentina</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">115.0</span></p></td><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">17.2</span></p></td><td class=\"cl-07c8853e\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">Argentina</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">120.1</span></p></td><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">17.9</span></p></td><td class=\"cl-07c8853e\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">Argentina</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">111.2</span></p></td><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">16.8</span></p></td><td class=\"cl-07c8853e\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">Argentina</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">67.7</span></p></td><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">2.4</span></p></td><td class=\"cl-07c8853e\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">Puyehue</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">99.4</span></p></td><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">10.2</span></p></td><td class=\"cl-07c8853e\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">Petrohue</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">92.2</span></p></td><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">8.3</span></p></td><td class=\"cl-07c8853e\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">Petrohue</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">35.4</span></p></td><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">0.5</span></p></td><td class=\"cl-07c8853e\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">Puyehue</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">82.9</span></p></td><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">7.8</span></p></td><td class=\"cl-07c8853e\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">Argentina</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">57.4</span></p></td><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">1.9</span></p></td><td class=\"cl-07c8853e\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">Puyehue</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">86.0</span></p></td><td class=\"cl-07c88535\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">6.8</span></p></td><td class=\"cl-07c8853e\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">Petrohue</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07c8853f\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">71.8</span></p></td><td class=\"cl-07c8853f\"><p class=\"cl-07c8780a\"><span class=\"cl-07c64dfa\">3.0</span></p></td><td class=\"cl-07c88548\"><p class=\"cl-07c87814\"><span class=\"cl-07c64dfa\">Puyehue</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\nSometimes you may need to create set of values and store them in vectors, then combine the vectors into a data frame. Let us see how this can be done. First create three vectors. One contains id for ten individuals, the second vector hold the time each individual signed in the attendance book and the third vector is the distance of each individual from office. We can concatenate the set of values to make vectors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel.id  = c(1,2,3,4,5,6,7,8,9,10)\n\ndeparture.time = lubridate::ymd_hms(c(\"2018-11-20 06:35:25 EAT\", \"2018-11-20 06:52:05 EAT\", \n                 \"2018-11-20 07:08:45 EAT\", \"2018-11-20 07:25:25 EAT\", \n                 \"2018-11-20 07:42:05 EAT\", \"2018-11-20 07:58:45 EAT\", \n                 \"2018-11-20 08:15:25 EAT\", \"2018-11-20 08:32:05 EAT\", \n                 \"2018-11-20 08:48:45 EAT\", \"2018-11-20 09:05:25 EAT\"), tz = \"\")\n\ndistance.ground = c(20, 85, 45, 69, 42,  52, 6, 45, 36, 7)\n```\n:::\n\n\nOnce we have the vectors that have the same length dimension, we can use the function `data.frame()` to combine the the three vectors into one data frame shown in @tbl-tab23\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfishing.dep = data.frame(vessel.id, \n                     departure.time, \n                     distance.ground)\n```\n:::\n\n::: {#tbl-tab23 .cell tbl-cap='The time fishers departed for fishing with the distance to th fishing ground'}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-07f5b608{}.cl-07ef9d4a{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-07f2213c{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-07f22146{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-07f23046{width:0.88in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f23050{width:1.067in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f2305a{width:0.88in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f2305b{width:1.372in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f2305c{width:0.88in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f2305d{width:1.067in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f2305e{width:0.88in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f23064{width:1.372in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f23065{width:0.88in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f2306e{width:1.067in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f23078{width:0.88in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f23079{width:1.372in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f2307a{width:0.88in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f2307b{width:1.067in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f23082{width:0.88in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-07f23083{width:1.372in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-07f5b608'><thead><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-07f23046\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">vessel.id</span></p></th><th class=\"cl-07f23050\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">date</span></p></th><th class=\"cl-07f2305a\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">time</span></p></th><th class=\"cl-07f2305b\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">distance.ground</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07f2305c\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">1</span></p></td><td class=\"cl-07f2305d\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">2018-11-20</span></p></td><td class=\"cl-07f2305e\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">06:35:25</span></p></td><td class=\"cl-07f23064\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">20</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07f23065\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">2</span></p></td><td class=\"cl-07f2306e\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">2018-11-20</span></p></td><td class=\"cl-07f23078\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">06:52:05</span></p></td><td class=\"cl-07f23079\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">85</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07f2305c\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">3</span></p></td><td class=\"cl-07f2305d\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">2018-11-20</span></p></td><td class=\"cl-07f2305e\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">07:08:45</span></p></td><td class=\"cl-07f23064\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">45</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07f23065\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">4</span></p></td><td class=\"cl-07f2306e\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">2018-11-20</span></p></td><td class=\"cl-07f23078\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">07:25:25</span></p></td><td class=\"cl-07f23079\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">69</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07f23065\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">5</span></p></td><td class=\"cl-07f2306e\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">2018-11-20</span></p></td><td class=\"cl-07f23078\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">07:42:05</span></p></td><td class=\"cl-07f23079\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">42</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07f23065\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">6</span></p></td><td class=\"cl-07f2306e\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">2018-11-20</span></p></td><td class=\"cl-07f23078\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">07:58:45</span></p></td><td class=\"cl-07f23079\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">52</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07f23065\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">7</span></p></td><td class=\"cl-07f2306e\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">2018-11-20</span></p></td><td class=\"cl-07f23078\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">08:15:25</span></p></td><td class=\"cl-07f23079\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">6</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07f2305c\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">8</span></p></td><td class=\"cl-07f2305d\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">2018-11-20</span></p></td><td class=\"cl-07f2305e\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">08:32:05</span></p></td><td class=\"cl-07f23064\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">45</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07f2305c\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">9</span></p></td><td class=\"cl-07f2305d\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">2018-11-20</span></p></td><td class=\"cl-07f2305e\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">08:48:45</span></p></td><td class=\"cl-07f23064\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">36</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-07f2307a\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">10</span></p></td><td class=\"cl-07f2307b\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">2018-11-20</span></p></td><td class=\"cl-07f23082\"><p class=\"cl-07f22146\"><span class=\"cl-07ef9d4a\">09:05:25</span></p></td><td class=\"cl-07f23083\"><p class=\"cl-07f2213c\"><span class=\"cl-07ef9d4a\">7</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/tabwid-1.1.3/tabwid.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/tabwid-1.1.3/tabwid.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}