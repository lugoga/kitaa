{
  "hash": "95ae3946c9604178a18853d7621b8916",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Data types in R\"\ndescription: \"The post provides an overview of the different data types in R, including numeric, integer, character, factor, and logical. It explains the characteristics of each data type and how to work with them. The article also covers some common operations and conversions between data types.\"\nauthor: \n  - name: Masumbuko Semba\n    url: https://semba.netlify.app\n    orcid: 0000-0002-5002-9747\n    affiliation: Nelson Mandela African Institution of Science and Technology\n    affiliation-url: https://semba.netlify.app/  \ncitation: \n    url: https://lugoga.github.io/kitaa/posts/dataviz/\nbibliography: ../blog.bib\ncsl:  ../elsevier.csl\ndate: \"2024-05-19\"\ncategories: [Data Science, Data Visualization]\nimage: https://www.rforecology.com/post/data-types-in-r/featured_hu8cb41dadf508881dfb88de884fb97a1e_29022_720x0_resize_lanczos_2.png\ncode-fold: false\nfilters: \n  - webr\n---\n\n### A glimpse\n\nWe are all quite familiar with different data types. For example, we can easily recognize that 1, 2, 3, and 4 are numbers, specifically *integers.* Similarly, 15.7 is also a number but with a *decimal point*. We understand that every word in this sentence is made up of *characters*, and in mathematics, \"*true*\" and \"*false*\" represent the outcomes of logical statements.\n\nJust as we mentally categorize data, R also organizes data into different classes. These classes are similar to the real-life examples mentioned earlier, but there are some differences in terms of syntax and considerations for coding.\n\nTo effectively work in R and conduct data analyses, it's important to have a strong grasp of data types. In this post, we are going to learn various data types, how to utilize and manipulate each of them, and how to determine the type of data you are working with. Let's get started.\n\n### Common Data types\n\nIn R, there are six main types of data that commonly used. These include;\n\n1.  Numeric data, such as decimal numbers like 1.2 or 3.14159,\n2.  Integers, like 1, 2, 3, 4, and 5.\n3.  Character data, which includes letters or strings of text like \"a\" or \"apple.\"\n4.  Logical- take the values of TRUE or FALSE,\n5.  Factor - used to represent categorical data\n6.  Date\n\n\n\n::: callout-note\n\nComplex numbers, which involve a real part and an imaginary part (e.g., i + 4), are rarely used for data analysis in R and will not be discussed further.\n\n:::\n\n\n\n#### Numeric\n\nThe most frequently used data type in R is numeric.Numeric values are numbers with decimals. By default R store numbers as numeric. , the following two series are stored as numeric.\n\n```{webr-r}\nnum_data <- c(3, 7, 2)\n```\n\n\n```{webr-r}\nnum_data\n```\n\n\nWe can check if our vector is numeric by using the function `is.numeric()` function\n\n```{webr-r}\n\nnum_data |> is.numeric()\n\n```\n\n\nWe can further check our data type by using the functions `class()` and `typeof()`. `class()` tells us that we’re working with numeric values, while `typeof()` is more specific and tells us we’re working with doubles (i.e., numbers with decimals).\n\n::: {exr-1}\n\nGiven a series of temperature 25.4,26.3,24.5,26.1,23.4, how can you create a vector in R and check the type of values in the data you created? Do that task online using the interactive chunk below;\n\n\n\n```{webr}\n\n```\n\n\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}