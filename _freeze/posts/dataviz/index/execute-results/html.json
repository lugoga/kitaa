{
  "hash": "804c84a967c9ad1b45bafaa6933f07f0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \n  - name: Masumbuko Semba\n    url: https://semba.netlify.app\n    orcid: 0000-0002-5002-9747\n    affiliation: Nelson Mandela African Institution of Science and Technology\n    affiliation-url: https://semba.netlify.app/  \ncitation: \n    url: https://lugoga.github.io/kitaa/posts/dataviz/\nbibliography: ../blog.bib\ncsl:  ../elsevier.csl\ndate: \"2024-05-05\"\ncategories: [Data Science, Data Visualization]\ndescription: \"Data Science-Data Visualization\"\nimage: https://images.unsplash.com/photo-1565106430482-8f6e74349ca1?ixlib=rb-1.2.1&q=80&cs=tinysrgb&fm=jpg&crop=entropy&w=3600\ncode-fold: false\n---\n\n\n# Welcome!\n\n## What is data visualization?\n\nData visualization is the graphical representation of information and data. By using visual elements like charts, graphs, and maps, data visualization tools provide an accessible way to see and understand trends, outliers, and patterns in data. Additionally, it provides an excellent way for employees or business owners to present data to non-technical audiences without confusion.\n\nIn the world of Big Data, data visualization tools and technologies are essential to analyze massive amounts of information and make data-driven decisions.\n\n# Introduction to Data Visualization and Distributions\n\n## Overview\n\nAfter completing this section, we will:\n\n-   understand the importance of data visualization for communicating data-driven findings.\n\n-   be able to use distributions to summarize data.\n\n-   be able to use the average and the standard deviation to understand the normal distribution\n\n-   be able to access how well a normal distribution fit the data using a quantile-quantile plot.\n\n-   be able to interpret data from a box plot\n\n## Introduction to Data Visualization\n\n### Key Point:\n\n-   Plots of data easily communicate information that is difficult to extract from table of raw values.\n\n-   Data visualization is a key component of exploratory data analysis (EDA), in which the properties of data are explored through visualization and summarization techniques.\n\n-   Data visualization can help discover biases, systematic errors, mistakes and other unexpected problems in data before those data are incorporated into potentially flawed analysis.\n\n-   Basics of data visualization and EDA will be covered in R by using the ggplot2 package and motivating examples from world health, economics and infections disease.\n\n### Code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'dslabs' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\ndata(murders)\nhead(murders)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       state abb region population total\n1    Alabama  AL  South    4779736   135\n2     Alaska  AK   West     710231    19\n3    Arizona  AZ   West    6392017   232\n4   Arkansas  AR  South    2915918    93\n5 California  CA   West   37253956  1257\n6   Colorado  CO   West    5029196    65\n```\n\n\n:::\n:::\n\n\n## Introduction to Distributions\n\n### Key Points:\n\n[[(**Variance/Deviation Var**)方差](https://baike.baidu.com/item/方差/3108412): 方差越大，数据的波动越大；方差越小，数据的波动就越小。]{.aside}\n\n[[(**Standard Deviation**)标准差](https://baike.baidu.com/item/标准差/1415772): 方差开根号。]{.aside}\n\n-   The most basic statistical summary of a list of object is its distribution.\n\n-   We will learn ways to visualize and analyze distributions in the upcoming videos.\n\n-   In some cases, data can be summarized by two-number summary: the average and standard deviation.I will learn to use data visualization to determine when that is appropriate.\n\n### Data Types\n\nIn R, there are [6 basic data types](https://www.programiz.com/r/data-types):\n\n-   `logical`\n\n-   `numeric`\n\n-   `integer`\n\n-   `complex`\n\n-   `character`\n\n-   `raw`\n\n::: callout-important\nCategorical data are variables that are defined by a small number of groups.\n\n-   Ordinal categorical data have an inherent order to the categories (mild/medium/hot, for example).\n\n-   Non-ordinal categorical data have no order to the categories.\n:::\n\n::: callout-important\nNumerical data take a variety of numeric values.\n\n-   Continuous variables can take any value.\n\n-   Discrete variables are limited to sets of specific values.\n:::\n\n\n```{mermaid}\nflowchart LR\n  A[Main variable types] --> B{Catrgorical}\n  A[Main variable types] --> C{Numeric}\n  B{Catrgorical} --> D[ordinal]\n  B{Catrgorical} --> E[non-ordinal]\n  C{Numeric} --> F[continuous]\n  C{Numeric} --> G[discrete]\n```\n\n\n### Exercise\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract the variable names from a dataset\nnames(x)\n# explore how many unique values are used in dataset\nunique(x)\n# determine how many variable were reported\nlength(x)\n# determine how many unique variable were reported\nlength(unique(x))\n# to compute the frequencies of each unique value\ntable(x)\n```\n:::\n\n\n## Describe Heights to ET\n\n### key point:\n\n-   A distribution is a function or description that shows the possible values of a variable and how often those values occur.\n-   For categorical variables, the distribution describes the proportions of each category.\n-   A *frequency table* is the simplest way to show a categorical distribution. Use `prop.table()` to convert a table of counts to a frequency table. *Barplots* display the distribution of categorical variables and are a way to visualize the information in frequency tables.\n-   For continuous numerical data, reporting the frequency of each unique entry is not an effective summary as many or most values are unique. Instead, a distribution function is required.\n-   The [*cumulative distribution function (CDF)*](https://en.wikipedia.org/wiki/Cumulative_distribution_function) is a function that reports the proportion of data below a value $a$ for all values of $a$ :$F(a)=Pr(x≤a)$.\n-   The proportion of observations between any two values $a$ and $b$ can be computed from the CDF as $F(b)-F(a)$.\n-   A *histogram* divides data into non-overlapping bins of the same size and plots the counts of number of values that fall in that interval.\n\n### Code:\n\n[R 语言学习 - [`table()`](https://blog.csdn.net/wlt9037/article/details/76570155 \"table()结果提取\") 结果提取.]{.aside}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the dataset\nlibrary(dslabs)\ndata(heights)\n# make a table of category proportions\nprop.table(table(heights$sex))\n```\n:::\n\n\n## Cumulative Distribution Function\n\nEvery *continuous distribution* has *cumulative distribution function (CDF)*. The CDF defines the proportion of the data below a given value for all values of $a$ :\n\n![Cumulative Distribution Function (CDF)](https://rafalab.dfci.harvard.edu/dsbook/book_files/figure-html/ecdf-1.png)\n\nAs defined above, this plot of the CDF for male heights has height value *a* on the x-axis and the proportion of student with heights of that value or lower(*F(*a*)*) on the y-axis.\n\nThe CDF is essential for calculating probabilities related to continuous data. In a continuous dataset, the probability of a specific exact value is not informative because most entries are unique. For example, in the student heights data, only one individual reported a height of 68.8976377952726 inches, but many students rounded similar heights to 69 inches. If we computed exact value probabilities, we would find that being exactly 69 inches is much more likely than being a non-integer exact height, which does not match our understanding that height is continuous. We can instead use the CDF to obtain a useful summary, such as the probability that a student is between 68.5 and 69.5 inches.\n\nFor datasets that are not normal, the CDF can be calculated manually by defining a function to compute the probability above. This function can then be applied to a range of values across the range of the dataset to calculate a CDF. Given a dataset`my_data`, the CDF can be calculated and plotted like this:\n\n[R语言中的[\\[`apply()`\\]，\\[`lapply()`\\]，\\[`sapply()`\\]，`tapply()`](https://www.jianshu.com/p/59fb24ca2ea7)函数以及示例]{.aside}\n\n### Code for CDF:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cumulative Distribution Function \na <- seq(min(x), max(x), length) # define range of the values\ncdf_function <- function(x) {\n    mean(my_data <= x)\n}\ncdf_values <- sapply(a, cdf_function)\nplot(a, cdf_values)\n```\n:::\n\n\n### Code for student height:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# example for student heights\na <- seq(min(heights$height), max(heights$height), length = 100)\ncdf_function <- function(x){\n  mean(heights$height <= x)\n}\ncdf_value <- sapply(a, cdf_function)\nplot(a, cdf_value)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThe CDF defines that proportion of data below a cut-off $a$. To define the proportion of values above $a$, we compute: $1-F(a)$\n\nTo define the proportion of values between $a$ and $b$, we compute: $F(b)-F(a)$\n\nNote that the CDF can help compute probabilities. The probability of observing a randomly chosen value between $a$ and $b$ is equal to the proportion of values between $a$ and $b$, which we compute with the CDF.\n\n## Smooth Density Plots\n\n### Key Point:\n\n::: callout-note\n### A further note on histograms\n\nThe choice of binwidth has a determinative effect on sharp. There is no \"correct\" choice for binwidth, and you can sometimes gain insights into the data by experimenting with binwidths.\n:::\n\n-   *Smooth density plots* can be thought of as ***histograms where the binwidth is extremely or infinitely small***. The smoothing function makes estimates of the true continuous trend of the data given the available sample of data points.\n\n-   The degree of smoothness can be controlled by an argument in the plotting function.\n\n-   While the histogram is an assumption-free summary, the smooth density plot is shaped by assumptions and choices you make as a data analyst.\n\n-   ***The y-axis is scaled so that the area under the density curve sums to 1.*** <!--#这是因为Y轴表示的是区间内的变量占总体的比重。 所有区间相加等于1。-->This means that interpreting value on the y-axis is not straightforward. To determine the proportion of data in between two values, compute the area under the smooth density curve in the region between those values.\n\n-   An advantage of smooth densities over histograms is that ***densities are easier to compare visually***.\n\n## Normal Distribution\n\n### Key Points:\n\n-   [The normal distribution](https://www.youtube.com/watch?v=xI9ZHGOSaCg&ab_channel=AceTutors):\n\n    -   is ***centered around*** one value, the ***mean***\n    -   is ***symmetric(对称)*** around the mean.\n    -   is defined completely by its ***mean(***$\\mu$**)** and ***standard deviation(***$\\sigma$**)**\n    -   ***Always has the same proportion*** of observations ***within a given distance*** of the mean (for example, 95% with 2$\\sigma$)\n\n-   The standard deviation is the ***average distance between a value and the mean value***.\n\n-   Calculate the mean using the ***`mean()`*** function.\n\n-   Calculate the standard deviation using the ***`sd()`*** function or manually.\n\n-   ***Standard units*** describe how many standard deviations a value is away from the mean. The z-score, or number of standard deviation an observation is away from the mean $\\mu$:\n\n    $$\n      z = (x-\\mu)/\\sigma\n      $$\n\n-   Computer standard units with the `scale()` function.\n\n-   ***Important:*** to calculate the proportion of value that meet a certain condition, use the `mean` function on a logical vector. Because `TRUE` is converted to 1 and `FALSE` is converted to 0, taking the mean of this vector yields the proportion of `TURE`.\n\n## Equation for the normal distribution\n\nThe normal distribution is mathematically defined by the following formula for any mean $\\mu$ and standard deviation $\\sigma$:\n\n$$\nPr(a < x < b) = \\int_{a}^b\\frac{1}{\\sqrt{2\\pi\\mu}}{e}^{-\\frac{1}{2}(\\frac{x-\\mu^2}{\\sigma})}dx\n$$\n\nWhen standard unites $z=0$, the normal distribution is at a maximum, the mean $\\mu$. The function is defined to be symmetric around $z=0$.\n\nThe normal distribution of z-score is called the *standard normal distribution* and is defined by $\\mu=0$ and $\\sigma=1$.\n\nZ-score are useful to quickly evalute whether an observation is average or extreme. Z-scores near 0 are average. Z-score above 2 or below -2 are ***significantly above or blew the mean***, and z-scores above 3 or below -3 are ***extrmely rate***.\n\n### Code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define x as vector of male heights\nlibrary(tidyverse)\nlibrary(dslabs)\ndata(heights)\nindex <- heights$sex==\"Male\"\nx <- heights$height[index]\n\n# calculate the mean and standard deviation manually\naverage <- sum(x)/length(x)\nSD <- sqrt(sum((x-average)^2)/length(x))\n\n# built-in mean and sd functions - note that the audio and printed value disagree\naverage <- mean(x)\nSD <- sd(x)\nc(average = average, SD = SD)\n\n# calculate standard units\nz <- scale(x)\n\n# calculate proportion of value within 2 SD of mean\nmean(abs(z) < 2)\n```\n:::\n\n\n[***function `sd()`:***The built-in R ***function `sd()`*** calculates the standard deviation, but it divides by ***`length(x)-1`*** instead of ***`length(x)`***. When the length of the list is large, this difference is negligible and you can use the built-in ***`sd()`*** function. Otherwise, you should compute σ by hand. For this course series, assume that you should use the ***`sd()`*** function unless you are told not to do so.]{.aside}\n\nHere we will learn more about benchmark z-score value and their corresponding probabilities.\n\n### The 68-95-99.7 Rule\n\nThe normal distribution is associated with the 68-95-99.7 rule. This rule describes the probability of observing events within a ceration number of standard deviations of the mean.\n\n![Normal Distribution Probabilities](https://courses.edx.org/assets/courseware/v1/28d10d22ba8b3bf4b0cc5024de0dc616/asset-v1:HarvardX+PH125.2x+1T2022+type@asset+block/norm-dist-probs-combined.png)\n\nThe probability distribution function for the normal distribution is defined such that:\n\n-   About 68% of observations will be within one standard deviation of the mean($\\mu\\pm\\sigma$). In standard units, this is equivalent to a z-score of $|z|\\leq2$\n\n![Probability of an observation within 1 SD of mean](https://courses.edx.org/assets/courseware/v1/f0bb9f66b7bdd91b2c9852c7a68427c7/asset-v1:HarvardX+PH125.2x+1T2022+type@asset+block/norm-dist-1sd.png)\n\n-   About 95% of observations will be within two standard seviations of the mean($\\mu\\pm2\\sigma$). In standard units, this is equivalent to a z-sore of $|z|\\leq2$.\n\n![Probability of an ovservation within 2 SD of mean](https://courses.edx.org/assets/courseware/v1/9686a507a97a536a1f5c6b6a01bd8154/asset-v1:HarvardX+PH125.2x+1T2022+type@asset+block/norm-dist-2sd.png)\n\n-   About 99.7% of observations will be within three standard deviations of the mean($\\mu\\pm3\\sigma$). In standard units, this is equivalent to a z-score of $|z|\\leq3$.\n\n![Probability of an observation within 3 SD of mean](https://courses.edx.org/assets/courseware/v1/a8af7c699c20d1e83819b5f68bf6f17d/asset-v1:HarvardX+PH125.2x+1T2022+type@asset+block/norm-dist-3sd.png)\n\n## The Normal CDF and pnorm\n\n### Key points:\n\n-   The normal distribution has a mathematically defined CDF which can be computed in R with the function `pnorm`.\n\n-   `pnom(a, avg, s)` gives the value of the cumculative distribution function *F(a)* for the normal distribution defined by average *avg* and standard deviation *s*.\n\n-   we say that a random quantity is normally distributed with average *avg* and standard deviation *s* if the approximate *pnorm(a, avg, s)* holds for all values of *a*.\n\n-   If we are willing to use the normal approximation for height, we can estimate the distribution simply from the mean and standard deviation of our values.\n\n-   If we treat the height data as discrete rather than categorical, we see that the data are not very useful because integer values are more common that expected due to rounding. This is called discretization.\n\n-   With rounded data, the normal approximation is particularly useful when computing probabilities of intervals of length 1 that include exactly over integer.\n\n### Code: Using pnorm to calculate probabilities\n\nGiven male heights x:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dslabs)\ndata(\"heights\")\nx <- heights %>% filter(sex==\"Male\") %>% pull(height)\n```\n:::\n\n\nwe can estimate the probability that a male is taller than 70.5 inches with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 - pnorm(70.5, mean(x), sd(x))\n```\n:::\n\n\n### Code: Discretization and the normal approximation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot distribution of exact heights in data\nplot(prop.table(table(x)), xlab = \"a = Height in inches\", ylab = \"Pr(x = a)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# probabilities in actual data over length 1 ranges containing a integer\nmean(x <= 68.5) - mean(x <= 67.5)\nmean(x <= 69.5) - mean(x <= 68.5)\nmean(x <= 70.5) - mean(x <= 69.5)\n\n# probabilities in normal approximation match well\npnorm(68.5, mean(x), sd(x)) - pnorm(67.5, mean(x), sd(x))\npnorm(69.5, mean(x), sd(x)) - pnorm(68.5, mean(x), sd(x))\npnorm(70.5, mean(x), sd(x)) - pnorm(69.5, mean(x), sd(x))\n\n# probabilities in actual data over other ranges don't match normal approx as well\nmean(x <= 70.9) - mean(x <= 70.1)\npnorm(70.9, mean(x), sd(x)) - pnorm(70.1, mean(x), sd(x))\n```\n:::\n\n\n## Definition of quantiles\n\n### Definition of quantiles\n\n[Quantiles](https://www.youtube.com/watch?v=Ky7QeVgv-BA&ab_channel=MarinStatsLectures-RProgramming%26Statistics) are cut off points that divide a dataset into intervals with set probability. The *qth* quantile is the value at which *q%* of the observation are ***equal to or less than that value***.\n\n### Using the quantile function\n\nGiven a dataset `data` and desired quantile `q`, you can find the `q` the quantile of `data` with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(data,q)\n```\n:::\n\n\n### Percentiles\n\nPercentiles are the quantiles that divide a dataset into 100 intervals each with 1% probability. You can determine all percentiles of a dataset `data` like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- seq(0.01, 0.09, 0.01)\nquantile(data, p)\n```\n:::\n\n\n### Quartiles\n\nQuartiles divide a dataset into 4 parts each with 25% probability. They are equal to the 25th, 50th and 75th percentiles. The 25th percentile is also known as the *1st quartile*, the 50th percentile is also konwn as the median, and the 75th percentile is also knowns as the *3rd quartile*.\n\nThe ***`summary()`*** function returns the minimum, quartiles and maximum of a vector.\n\n### Examples\n\nLoad the heights dataset from the *dslabs* package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\ndata(\"heights\")\n```\n:::\n\n\nUse`summary`on the `heights$height` variable to find the quartiles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(heights$height)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  50.00   66.00   68.50   68.32   71.00   82.68 \n```\n\n\n:::\n:::\n\n\nFind the percentiles of `height$height`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- seq(0.01, 0.99, 0.01)\npercentiles <- quantile(heights$height, p)\n```\n:::\n\n\nConfirm that the 25th and 75th percentiles match that 1st and 3rd quartiles. Note that `quantile()` returns a named vector. You can access the 25th and 75th percentiles like this (adapt the code for other percentile value):\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercentiles[names(percentiles) == \"25%\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n25% \n 66 \n```\n\n\n:::\n\n```{.r .cell-code}\npercentiles[names(percentiles) == \"75%\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n75% \n 71 \n```\n\n\n:::\n:::\n\n\n## Finding quantile with qnorm\n\n### Definiton of qnorm\n\n[简单来说,[***`qnorm`***](https://www.jianshu.com/p/a24eb1b94177)是正态分布***累积分布函数(CDF)***的反函数， 也就是说它可以视为`pnorm`的反函数, 这里`q`指的是quantile, 即分位数]{.aside}\n\nThe [`qnorm()`](https://www.youtube.com/watch?v=X5NXDK6AVtU&ab_channel=TheDataDigest) function gives the theoretical value of a quantile with probability `p` of observing a value equal to or less than that quantile value a normal distribution with mean `mu` and standard deviation `sigma`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqnorm(p, mu, sigma)\n```\n:::\n\n\n***By default, `mu`=0 and `sigma`=1***. Therefore, calling `qnorm()` with no arguments gives quantiles for the standard normal distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqnorm(p)\n```\n:::\n\n\nRecall that quantiles are defined such that $p$ is the probability of a random observation less than or equal to the quantile.\n\n### Realation to pnorm\n\nThe `pnorm()` function gives the probability that a value from a standard normal distribution will be less than or equal to a z-score value z. consider: $$pnorm(-1.96)\\approx0.025$$ The result of `pnorm()` is the quantile. Note that: $$qnorm(0.025)\\approx-1.96$$ `qnorm()` and `pnorm` are inverse functions: $$pnorm(qnorm(0.025))\\equiv0.025$$\n\n### Theoretical quantiles\n\nYou can use `qnorm()` to determine the theoretical quantiles of a dataset: that is, the theoretical value of quantiles assuming that a dataset follows a normal distribution. Run the `qnorm()` function with the desired probabilities *p*, mean mu and standard deviation sigma.\n\nSuppose male heights follow a normal distribution with a mean of 69 inches and standard deviation of 3 inches. The theoretical quantiles are:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- seq(0.01, 0.99, 0.01)\ntheoretical_quantiles <- qnorm(p, 69, 3)\n```\n:::\n\n\nTheoretical quantiles can be compared to sample quantiles determined with the quantile function in order to evaluate whether the sample follows a normal distribution.\n\n## Quantile-Quantile Plots\n\n### Key Points:\n\n-   Quantile-quantile plots, or QQ-plot, are used to check whether distributions are well-approximated by a normal distribution.\n\n-   Given a proportion *p*, the quantile *q* is the value such that the proportion of values in the data blew *q* is *p*.\n\n-   In a QQ-plot, the sample quantiles in the observed data are compared to the theoretical quantiles expected from the normal distribution. If the data are well-approximated by the normal distribution, then the points on the QQ-plot will fall near the identity line(sample = theoretical).\n\n-   Calculate sample quantiles (observed quantiles) using the `quantile()` function.\n\n-   Calculate theoretical quantiles with the `qnorm()` function. `qnorm()` will caculate quantiles for the standard normal distribution ($\\mu=0, \\sigma=1$) by default, but it can calculate quantiles for any normal distribution given `mean()` and `sd()` arguments.\n\n### Code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define x and z\nlibrary(tidyverse)\nlibrary(dslabs)\ndata(heights)\n\nindex <- heights$sex==\"Male\"\nx <- heights$height[index]\nz <- scale(x)\n\n# proportion of data below 69.5\nmean(x <= 69.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5147783\n```\n\n\n:::\n\n```{.r .cell-code}\n# calculate observed and theoretical quantiles\np <- seq(0.05, 0.95, 0.05)\nobserved_quantiles <- quantile(x, p)\ntheoretical_quantiles <- qnorm(p, mean = mean(x), sd = sd(x))\n\n# make QQ-plot\nplot(theoretical_quantiles, observed_quantiles)\nabline(0,1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# make QQ-plot with scaled values\nobserved_quantiles <- quantile(z, p)\ntheoretical_quantiles <- qnorm(p)\nplot(theoretical_quantiles, observed_quantiles)\nabline(0,1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n:::\n\n\n## Percentiles\n\n### Key Points:\n\n-   Percentiles are the quantiles obtained when defining $p$ as 0.01, 0.02,...,0.99. They summarize the values at which a certain percent of the observations are equal to or less than that value.\n\n-   The 50th percentile is also known as the median.\n\n-   The quartiles are the 25th, 50th and 75th percentiles.\n\n## Boxplots\n\n[R语言如何绘制[箱线图](https://zhuanlan.zhihu.com/p/440914623)]{.aside}\n\n### Key Points:\n\n-   When data do not follow a normal distribution and cannot be succinctly summarized by only the mean and standard deviation, an alternative is to report a five-number summary: range (ignoring outliers) and the quartiles (25th, 50th, 75th percentile).\n\n-   In a [boxplot](https://www.youtube.com/watch?v=INSIyaZUXIY&ab_channel=DATAtab), the box is defined by the *25th* and *75th* percentiles and the *median* is ***a horizontal line through the box***. The *whiskers* show ***the range excluding outliers***, and outliers are plotted separately as individual points.\n\n-   The *interquartile range* is the distance between the 25th and 75th percentiles.\n\n-   Boxplots are particularly useful when comparing *multiple distributions*.\n\n## Distribution of Female Heights\n\n### Key Points:\n\n-   If a distribution is not normal, it cannot be summarized with only the mean and standard seviation. Provide a histogram, smooth density or boxplot instead.\n\n-   A plot can force us to see unexpected results that make us question the quality or implication of our data.\n\n# Introduction to ggplot2\n\n## Overview\n\nAfter completing ggplot2, we will:\n\n-   be able to use ggplot2 to create data visualizations in R.\n\n-   be able to explain what the data component of a graph is.\n\n-   be able to identify the geometry component of a graph and know when to use which type of geometry. be able to explain what the aesthetic mapping component of a graph is.\n\n-   be able to understand the scale component of a graph and select an appropriate scale component to use.\n\n## ggplot\n\n### ggplot2\n\n-   [Data visualization with ggolot2](https://datacarpentry.org/R-ecology-lesson/04-visualization-ggplot2.html)\n\n-   [Data visualization with ggplot2: Cheat Sheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf)\n\n-   [The R graph gallery example](https://r-graph-gallery.com/index.html)\n\n### key Points:\n\n-   Throughout the series, we will create plots with the ggplot2 package. **ggplot2** is part of the **tidyverse** suite of package, which you can load with **`library(tidyverse)`**.\n\n-   Note that you can also load **ggplot2** alone using the command **`library(ggplot2)`**, instead of loading the entire tidyverse.\n\n-   **ggplot2** uses a **grammar of graphics** to break plots into building blocks that have intuitive syntax, making it easy to create relatively complex and aesthetically pleasing plots with relatively simple and readable code.\n\n-   **ggplot2** is designed to work excusively with tidy data (**rows are observations and columns are variables**).\n\n## Graph Components\n\n### Key Points:\n\n-   Plots in **ggplot2** consist of 3 main components:\n    -   **Data**: The dataset being summarized\n    -   **Geometry**: The type of plot(scatterplot, boxplot, barplot, histogram, qqplot, smooth desity, etc.)\n    -   **Aesthetic mapping**: Variable mapped to visual cues, such as x-axis and y-axis values and color.\n\n### Code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\ndata(murders)\n```\n:::\n\n\n## Creating a New Plot\n\n### Key Points:\n\n-   You can associated a dataset `x` with a ggplot object with any of the 3 commands:\n\n    -   **`ggplot(data = x)`**\n    -   **`ggplot(x)`**\n    -   **`x %>% ggplot()`**\n\n-   You can assign a ggplot object to a variable. If the object is not assigned to a variable, it will automatically be displayed.\n\n-   You can display a ggplot object assigned to a variable by printing that variable.\n\nCode:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dslabs)\ndata(murders)\n\nggplot(data = murders)\n\nmurders %>% ggplot()\n\np <- ggplot(data = murders)\n\nclass(p)\n\nprint(p) # this is equivalent to simply typing p\np \n```\n:::\n\n\n## Layers\n\n### Key Points:\n\n-   In **ggplot2**, graphs are created by adding layers to the ggplot object: DATA %\\>% ggplot() + LAYER_1 + LAYER_2 + ... + LAYER_N\n\n-   The ***geometry layer*** defines that plot type and takes the format `geom_x` where `x` is the plot type.\n\n-   ***Aesthetic mappings*** describe how properties of **the data connect with features of the graph** (axis position, color, size, etc.) define aesthetic mapping with `aes()` function.\n\n-   **`aes()`** uses variable names from the object component (for example, **`total`** rather than **`murders$total`**).\n\n-   **`geom_point()`** creates a scatterplot and requires `x` and `y` aesthetic mappings.\n\n-   **`geom_text()`** and **`geom_label`** add text to a scatterplot and require `x`, `y`, and `label` aesthetic mappings.\n\n-   To determine which aesthetic mappings are required for a geometry, read the help file for that geometry.\n\n-   You can add layers with different aesthetic mappings to the same graph.\n\nCode: Adding layers to a plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dslabs)\ndata(murders)\n\nmurders %>% ggplot() +\n  geom_point(aes(x = population/10^6, y = total))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# add points layer to predefined ggplot object\np <- ggplot(data = murders)\np + geom_point(aes(population/10^6, total))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# add text layer to scatterplot\np + geom_point(aes(population/10^6, total)) +\n  geom_text(aes(population/10^6, total, label = abb))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-2.png){width=672}\n:::\n:::\n\n\nCode: Example of `aes` behavior\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# no error from this call\np_test <- p + geom_text(aes(population/10^6, total, lable = abb))\n\n# error - \"abb\" is not a globally defined variable and cannot be found outside of aes\np_test <- p + geom_text(aes(population/10^6, total), label = abb)\n```\n:::\n\n\n## Thinkering\n\n### Key Points:\n\n-   You can modify arguments to geometry functions others than `aes()` and the data.\n\n-   These arguments are not aesthetic mappings: the affect all data points the same way.\n\n-   ***Global aesthetic mappings*** apply to all geometries and can be defined when you initially call `ggplot()`. All the geometries added as layers will default to this mapping. Local aesthetic mapping add additional information or override the default mappings.\n\n::: callout-tip\n# **Nudge** points a fixed distance\n\n[`position_nudge(x = 0, y = 0)`](https://ggplot2.tidyverse.org/reference/position_nudge.html?q=nudge#null) is generally useful for adjusting the position of items on discrete scales by a small amount. Nudging is built in to **`geom_text()`** because it's so useful for moving labels a small distance from what they're labeling.\n:::\n\nCode:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# change the size of the points\np + geom_point(aes(population/10^6, total), size = 3) +\n    geom_text(aes(population/10^6, total, label = abb))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# move text labels slightly to the right\np + geom_point(aes(population/10^6, total), size = 3) +\n    geom_text(aes(population/10^6, total, label = abb), nudge_x = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# simplify code by adding global aesthetic\np <- murders %>% ggplot(aes(population/10^6, total, label = abb))\np + geom_point(size = 3) +\n    geom_text(nudge_x = 1.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# local aesthetics override global aesthetics\np + geom_point(size = 3) +\n  geom_text(aes(x = 10, y = 800, label = \"Hello there!\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in geom_text(aes(x = 10, y = 800, label = \"Hello there!\")): All aesthetics have length 1, but the data has 51 rows.\nℹ Did you mean to use `annotate()`?\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-4.png){width=672}\n:::\n:::\n\n\n## Scales, Labels, and Colors\n\n### Textbook links:\n\n-   [Textbook section on **scales**](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#scales)\n\n-   [Textbook section on **labels and titles**](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#labels-and-titles)\n\n-   [Textbook section on **categories as colors**](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#categories-as-colors)\n\n-   [Textbook section on **annotation, shapes and adjustments**](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#annotation-shapes-and-adjustments)\n\n### Key Points:\n\n-   Convert the x-axis to log scale with **`scale_x_continuous(trans = \"log10\")`** or **`scale_x_log10()`**. Similar function exist for the y-axis.\n\n-   **Add axis title** with **`xlab()`** and **`ylab()`** function. **Add a plot title** with the **`ggtitle()`** function.\n\n-   **Add a color mapping** that colors points by a varaibale by defining **`col`** argument **within `aes()`**. To color all pints the same way, define **`col`** outside of **`aes()`**.\n\n-   **Add a line** with the **`geom_abline()`** geometry. **`geom_abline()`** takes arguments **`slop`** (default = 1) and **`intercept`**(default = 0). Change the color with **`col`** or **`color`** and line type with [**`lty`**](https://r-charts.com/base-r/line-types/).\n\n-   Placing the line layer after the point layer will overlay the the line on top of the points. To overlay points on the line, **place the line layer before the point layer**.\n\n-   There are many additional ways to tweak your graph that can be found in the **ggplot2** documentation, cheat sheet or on the internet. For example, you can change the legend title with [**`scale_color_discrete`**](https://www.jianshu.com/p/6ba336b3931f).\n\n### Code: Log-scale the x-axis and y-axis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define p\nlibrary(tidyverse)\nlibrary(dslabs)\ndata(murders)\n\np <- murders %>% ggplot(aes(population/10^6, total, label = abb))\n\n# log base 10 scale the x-axis and y-axis\np + geom_point(size = 3) +\n    geom_text(nudge_x = 0.05) +\n    scale_x_continuous(trans = \"log10\") +\n    scale_y_continuous(trans = \"log10\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# efficient log scaling of the axes\np + geom_point(size = 3) +\n    geom_text(nudge_x = 0.05) +\n    scale_x_log10() +\n    scale_y_log10()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n### Code: Add labels and title\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + geom_point(size = 3) +\n    geom_text(nudge_x = 0.05) +\n    scale_x_log10() +\n    scale_y_log10() +\n    xlab(\"Population in million(log scale)\") +\n    ylab(\"Total number of murders(log scale)\") +\n    ggtitle(\"US Gun Murders in 2010\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n### Code: Change color of the points\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# redefine p to be everything except the points layer\np <- murders %>% \n     ggplot(aes(population/10^6, total, label = abb)) +\n     geom_text(nudge_x = 0.075) +\n     scale_x_log10() +\n     scale_y_log10() +\n     xlab(\"Population in million(log scale)\") +\n     ylab(\"Total number of murders(log scale)\") +\n     ggtitle(\"US Gun Murders in 2010\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# make all points blue\np + geom_point(size = 3, color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# color points by region\np + geom_point(aes(col = region), size = 3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n### Code: Add a line with average murder rate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- murders %>% \n     summarize(rate = sum(total) / sum(population) * 10^6) %>%      pull(rate)\n\np <- p + geom_point(aes(col = region), size = 3) +\n         geom_abline(intercept = log10(r)) # slop is default of 1\n\n# change line to dashed and dark grey, line under points\np + geom_abline(intercept = log(r), lty = 2, color = \"darkgrey\") +\n    geom_point(aes(col = region), size = 3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n::: callout-tip\n## Line types in R: Ity\n\nThe different **line types** available in **R** are shown in the figure hereafter. The argument [**lty**](http://www.sthda.com/english/wiki/line-types-in-r-lty) can be used to specify the **line type**. To change **line width**, the argument **lwd** can be used.\n:::\n\n### Code: Change legend title\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# capitalize legend title\np <- p + scale_color_discrete(name = \"Region\")\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n## Add-on packages\n\n### Textbook links:\n\n-   [Textbook section on add-on packages](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#add-on-packages)\n-   [Textbook section on putting it all together](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#putting-it-all-together)\n\n### Key Points\n\n-   The style of a ggplot graph can be changed using the `theme()` function.\n\n-   The `ggthemes` package adds additional themes.\n\n-   The `ggrepel` package includes a geometry that repels text labels, ensuring they do not overlap with each other: `geom_text_repel()`.\n\n### Code: Adding themes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# theme used for graphs in the textbook and course\nlibrary(dslabs)\nds_theme_set()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# themes from ggthemes\nlibrary(ggthemes)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np + theme_economist()    # style of the Economist magazine\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n\n```{.r .cell-code}\np + theme_fivethirtyeight()    # style of the FiveThirtyEight website\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-2.png){width=672}\n:::\n:::\n\n\n### Code: Putting it all together to assemble the plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load libraries\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(ggthemes)\nlibrary(dslabs)\ndata(murders)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the intercept\nr <- murders %>%\n    summarize(rate = sum(total) / sum(population) * 10^6) %>%\n    .$rate\n    \n# make the plot, combining all elements\nmurders %>%\n    ggplot(aes(population/10^6, total, label = abb)) +\n    geom_abline(intercept = log10(r), lty = 2, color = \"darkgrey\") +\n    geom_point(aes(col = region), size = 3) +\n    geom_text_repel() +\n    scale_x_log10() +\n    scale_y_log10() +\n    xlab(\"Population in millions (log scale)\") +\n    ylab(\"Total number of murders (log scale)\") +\n    ggtitle(\"US Gun Murders in 2010\") +\n    scale_color_discrete(name = \"Region\") +\n    theme_economist()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n## Other Examples\n\n### Textbook links:\n\n-   [Textbook section on histograms](http://rafalab.dfci.harvard.edu/dsbook/distributions.html#histograms-1)\n\n-   [Textbook section on density plots](http://rafalab.dfci.harvard.edu/dsbook/distributions.html#density-plots)\n\n-   [Textbook section on grids of plots](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#grids-of-plots)\n\n### Key points\n\n-   `geom_histogram()` creates a histogram. Use the **binwidth** argument to change the width of bins, the fill argument to change the bar fill color, and the col argument to change bar outline color.\n\n-   `geom_density()` creates smooth density plots. Change the fill color of the plot with the fill argument.\n\n-   `geom_qq()` creates a quantile-quantile plot. This geometry requires the sample argument. By default, the data are compared to a standard normal distribution with a mean of 0 and standard deviation of 1. This can be changed with the dparams argument, or the sample data can be scaled.\n\n-   Plots can be arranged adjacent to each other using the `grid.arrange()` function from the **gridExtra** package. First, create the plots and save them to objects (p1, p2, ...). Then pass the plot objects to `grid.arrange()`.\n\n### Code: Histograms in ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dslabs)\ndata(heights)\n\n# define p\np <- heights %>% \n  filter(sex == \"Male\") %>% \n  ggplot(aes(x=height))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# basic histograms\np + geom_histogram() + ggtitle(\"binwidth is default\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n\n```{.r .cell-code}\np + geom_histogram(binwidth = 1) + ggtitle(\"binwidth is 1\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# histogram with blue fill, black outline, labels and title\np + geom_histogram(binwidth = 1, fill =\"blue\", col = \"black\") + \n  xlab(\"Male heights in inches\") +\n  ggtitle(\"histogram\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-3.png){width=672}\n:::\n:::\n\n\n### Code: Smooth density plots in ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + geom_density()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n\n```{.r .cell-code}\np + geom_density(fill = \"blue\", col = \"red\") +\n  xlab(\"Male heights in inches\") +\n  ylab(\"proportion of Male heights\") +\n  ggtitle(\"Male heights distribution\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-43-2.png){width=672}\n:::\n:::\n\n\n### Code: Quantile-quantile plots in ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# basic QQ-plot\np <- heights %>% filter(sex == \"Male\") %>% \n  ggplot(aes(sample = height))\np + geom_qq()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# QQ-plot against a normal distribution with same mean/sd as data\nparams <- heights %>% \n  filter(sex == \"Male\") %>% \n  summarize(mean = mean(height), sd = sd(height))\np + geom_qq(dparams = params) +\n  geom_abline()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-44-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# QQ-plot of scaled data against the standard normal distribution\nheights %>% \n  ggplot(aes(sample = scale(height))) +\n  geom_qq() +\n  geom_abline()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-44-3.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# define plots p1, p2, p3\np <- heights %>% filter(sex == \"Male\") %>% ggplot(aes(x = height))\np1 <- p + geom_histogram(binwidth = 1, fill = \"blue\", col = \"black\")\np2 <- p + geom_histogram(binwidth = 2, fill = \"blue\", col = \"black\")\np3 <- p + geom_histogram(binwidth = 3, fill = \"blue\", col = \"black\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# arrange plots next to each other in 1 row, 3 columns\nlibrary(gridExtra)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.arrange(p1, p2, p3, ncol = 3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n# Gapminder\n\n## Overview\n\nAfter completing Gapminder, you will: - understand how Hans Rosling and the Gapminder Foundation use effective data visualization to convey data-based trends.\n\n-   be able to apply the **ggplot2** techniques from the previous section to answer questions using data.\n\n-   understand how fixed scales across plots can ease comparisons.\n\n-   be able to modify graphs to improve data visualization.\n\n## Introduction to Gapminder\n\nCase study: Trends in World Health and Economics\n\nData Source form Gapminder\n\nWe will use this data to answer the following questions about World Health and Economics: - Is it still fair to consider the world as divided into the West and the developing world? - Has income inequality across countries worsened over the last 40 years?\n\n## Gapminder Dataset\n\n### Key Points\n\n-   A selection of world health and economics statistics from the Gapminder project can be found in the `dslabs` package as data(gapminder).\n\n-   Most people have **misconceptions** about world health and economics, which can be addressed by considering real data.\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dslabs)\ndata(\"gapminder\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              country year infant_mortality life_expectancy fertility\n1             Albania 1960           115.40           62.87      6.19\n2             Algeria 1960           148.20           47.50      7.65\n3              Angola 1960           208.00           35.98      7.32\n4 Antigua and Barbuda 1960               NA           62.97      4.43\n5           Argentina 1960            59.87           65.39      3.11\n6             Armenia 1960               NA           66.86      4.55\n  population          gdp continent          region\n1    1636054           NA    Europe Southern Europe\n2   11124892  13828152297    Africa Northern Africa\n3    5270844           NA    Africa   Middle Africa\n4      54681           NA  Americas       Caribbean\n5   20619075 108322326649  Americas   South America\n6    1867396           NA      Asia    Western Asia\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"country\"          \"year\"             \"infant_mortality\" \"life_expectancy\" \n[5] \"fertility\"        \"population\"       \"gdp\"              \"continent\"       \n[9] \"region\"          \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  filter(year == 2015 & country %in% c(\"Sri Lanka\", \"Turkey\")) %>% \n  select(country, infant_mortality)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    country infant_mortality\n1 Sri Lanka              8.4\n2    Turkey             11.6\n```\n\n\n:::\n:::\n\n\n## Life Expectancy and Fertility Rates\n\n### Key Points\n\n-   A prevalent worldview is that the world is divided into two groups of countries:\n\n    -   Western world: high life expectancy, low fertility rate\n\n    -   Developing world: lower life expectancy, higher fertility rate\n\n-   Gapminder data can be used to evaluate the validity of this view.\n\n-   A scatterplot of life expectancy versus fertility rate in 1962 suggests that this viewpoint was grounded in reality 50 years ago. Is it still the case today?\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# basic scatterplot of life expectancy versus fertility\nds_theme_set() # set plot theme\nfilter(gapminder, year == 1962) %>% \n  ggplot(aes(fertility, life_expectancy)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# add color as continent\nfilter(gapminder, year == 1962) %>% \n  ggplot(aes(fertility, life_expectancy, color = continent)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-51-2.png){width=672}\n:::\n:::\n\n\n## Faceting\n\n### Key Points\n\n-   Faceting **makes multiple side-by-side plots stratified by some variable**. This is a way to ease comparisons.\n\n-   The `facet_grid()` function allows *faceting by up to two variables*, with rows faceted by one variable and columns faceted by the other variable. To facet by only one variable, use the dot operator as the other variable.\n\n-   The `facet_wrap()` function *facets by one variable and automatically wraps the series of plots* so they have readable dimensions.\n\n-   Faceting keeps the axes fixed across all plots, easing comparisons between plots.\n\n-   The data suggest that the developing versus Western world view no longer makes sense in 2012.\n\n[ggplot2-[分面(facet) 一页多图](https://blog.csdn.net/tanzuozhev/article/details/51112177)]{.aside} [数据可视化章节学习[facet](https://zhuanlan.zhihu.com/p/31044450)]{.aside}\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# facet by continent and year\nfilter(gapminder, year %in% c(1962, 2012)) %>% \n  ggplot(aes(fertility, life_expectancy, col = continent)) +\n  geom_point() +\n  facet_grid(continent ~ year)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# facet by year only \nfilter(gapminder, year %in% c(1962, 2012)) %>% \n  ggplot(aes(fertility, life_expectancy, col = continent)) +\n  geom_point() +\n  facet_grid(. ~ year)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-52-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# facet by year, plots wrapped onto multiple rows\nyears <- c(1962, 1980, 1990, 2000, 2012)\ncontinents <- c(\"Europ\", \"Asia\")\ngapminder %>% \n  filter(year %in% years & continent %in% continent) %>% \n  ggplot(aes(fertility, life_expectancy, col = continent)) +\n  geom_point() +\n  facet_wrap(. ~ year)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-52-3.png){width=672}\n:::\n:::\n\n\n## Time Series Plots\n\n### Key Points\n\n-   Time series plots have time on the *x-axis* and a variable of interest on the *y-axis*.\n\n-   The `geom_line()` geometry connects adjacent data points to form a continuous line. A line plot is appropriate when points are regularly spaced, densely packed and from a single data series.\n\n-   You can plot multiple lines on the same graph. Remember to group or color by a variable so that the lines are plotted independently.\n\n-   Labeling is usually preferred over legends. However, legends are easier to make and appear by default. Add a label with `geom_text()`, specifying the coordinates where the label should appear on the graph.\n\n### Code: Single Time Series\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# scatterplot of US fertility by year\ngapminder %>% \n  filter(country == \"United States\") %>% \n  ggplot(aes(year, fertility)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# line plot of US fertility by year\ngapminder %>% \n  filter(country == \"United States\") %>% \n  ggplot(aes(year, fertility)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-53-2.png){width=672}\n:::\n:::\n\n\n### Code: Multiple Time Series\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# line plot fertility time series for two countries- only one line (incorrect)\ncountries <- c(\"South Korea\", \"Germany\")\ngapminder %>% filter(country %in% countries) %>%\n    ggplot(aes(year, fertility)) +\n    geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# line plot fertility time series for two countries - one line per country\ngapminder %>% filter(country %in% countries) %>%\n    ggplot(aes(year, fertility, group = country)) +\n    geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-54-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# fertility time series for two countries - lines colored by country\ngapminder %>% filter(country %in% countries) %>%\n    ggplot(aes(year, fertility, col = country)) +\n    geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-54-3.png){width=672}\n:::\n:::\n\n\n### Code: Adding text labels to a plot\n\n::: callout-note\n**labels data frame as the data to ensure where to start label text** ![](https://raw.githubusercontent.com/NING3739/my-personal-website/main/geom_text.png)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# life expectancy time series - lines colored by country and labeled, no legend\nlabels <- data.frame(country = countries, x = c(1975, 1965), y = c(60, 72))\ngapminder %>% filter(country %in% countries) %>%\n    ggplot(aes(year, life_expectancy, col = country)) +\n    geom_line() +\n    geom_text(data = labels, aes(x, y, label = country), size = 5) +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n## Transformations\n\n### Key Points\n\n-   We use GDP data to compute income in US dollars per day, adjusted for inflation.\n\n-   Log transformations covert multiplicative changes into additive changes.\n\n-   common transformations are the log base 2 transformation and the log base 10 transformation. The choice of base depends on the range of the data. The natural log is not recommended for visualization because it is difficult to interpret.\n\n-   The mode of a distribution is the value with the highest frequency. The mode of a normal distribution is the average. A distribution can have multiple local modes.\n\n-   There are two ways to use log transformations in plots: transform the data before plotting or transform the axes of the plot. Log scales have the advantage of showing the original values as axis labels, while log transformed values ease interpretation of intermediate values between labels.\n\n-   Scale the x-axis using `scale_x_continuous()` or `scale_x_log10()` layers in ggplot2. Similar functions exist for the y-axis.\n\n-   In 1970, income distribution is bimodal, consistent with the dichotomous Western versus developing worldview.\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add dollars per day variable\ngapminder <- gapminder %>% \n  mutate(dollars_per_day = gdp/population/365)\n\n# histogram of dollars per day\npast_year <- 1970\ngapminder %>% \n  filter(year == past_year & !is.na(gdp)) %>% \n  ggplot(aes(dollars_per_day)) +\n  geom_histogram(binwidth = 1, color = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# repeat histogram with log2 scaled data\ngapminder %>%\n    filter(year == past_year & !is.na(gdp)) %>%\n    ggplot(aes(log2(dollars_per_day))) +\n    geom_histogram(binwidth = 1, color = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-56-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# repeat histogram with log2 scaled x-axis\ngapminder %>%\n    filter(year == past_year & !is.na(gdp)) %>%\n    ggplot(aes(dollars_per_day)) +\n    geom_histogram(binwidth = 1, color = \"black\") +\n    scale_x_continuous(trans = \"log2\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-56-3.png){width=672}\n:::\n:::\n\n\n## Stratify and Boxplot\n\n### Key Points\n\n-   Make boxplots stratified by a categorical variable using the `geom_boxplot()` geometry.\n\n-   Rotate axis labels by changing the theme through `element_text()`. You can change the angle and justification of the text labels.\n\n-   Consider ordering your factors by a meaningful value with the `reorder` function, which changes the order of factor levels based on a related numeric vector. This is a way to ease comparisons.\n\n-   Show the data by adding data points to the boxplot with a `geom_point` layer. This adds information beyond the five-number summary to your plot, but too many data points it can obfuscate your message.\n\n### Code: Boxplot of GDP by region\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add dollars per day variable\ngapminder <- gapminder %>% \n  mutate(dollars_per_day = gdp/population/365)\n\n# number of regions\nlength(levels(gapminder$region))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n\n```{.r .cell-code}\n# boxplot of GDP by region in 1970\npast_year <- 1970\np <- gapminder %>% \n     filter(year == past_year & !is.na(gdp)) %>% \n     ggplot(aes(region, dollars_per_day))\np + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# roation name on x-axis\np + geom_boxplot() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-57-2.png){width=672}\n:::\n:::\n\n\n### Code: The reorder function\n\n::: callout-tip\n[Reorder a variable with ggplot2](https://r-graph-gallery.com/267-reorder-a-variable-in-ggplot2.html)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# by default, factor order is alphabetical\nfac <- factor(c(\"Asia\", \"Asia\", \"West\", \"West\", \"West\"))\nlevels(fac)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Asia\" \"West\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# reorder factor by the category means\nvalue <- c(10, 11, 12, 6, 4)\nfac <- reorder(fac, value, FUN = mean)\nlevels(fac)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"West\" \"Asia\"\n```\n\n\n:::\n:::\n\n\n### Code: Enhanced boxplot ordered by median income, scaled, and showing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reorder by median income and color by continent \np <- gapminder %>%\n    filter(year == past_year & !is.na(gdp)) %>%\n    mutate(region = reorder(region, dollars_per_day, FUN = median)) %>%  # reorder\n    ggplot(aes(region, dollars_per_day, fill = continent)) + # color by continent \n    geom_boxplot() +\n    theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n    xlab(\"\")\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# log2 scale y-axis\np + scale_y_continuous(trans = \"log2\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-59-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# add data points\np + scale_y_continuous(trans = \"log2\") + geom_point(show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-59-3.png){width=672}\n:::\n:::\n\n\n## Comparing Distributions\n\n::: callout-important\n[intersect(交集);union(并集);setdiff(找不同);setequal(判断相同)](https://blog.csdn.net/woodcorpse/article/details/80494605)\n:::\n\n### Key Points\n\n-   Use `intersect` to find the overlap between two vectors.\n-   To make boxplots where grouped variables are adjacaent, color the boxplot by a factor instead of faceting by that factor. This is a way to ease comparisions.\n-   The data suggest that the income gap between rich and poor countries has narrowed, not expended.\n\n### Code: Histogram of income in West versus developing world, 1970 and 2010\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add dollars per day variable and define past year\ngapminder <- gapminder %>% \n  mutate(dollars_per_day = gdp/population/365)\npast_year <- 1970\n\n# define Western countries\nwest <- c(\"Western Europe\", \"Northern Europe\", \"Southern Europe\", \"Northern America\", \"Australia and New Zealand\")\n\n# facet by West vs Devloping \ngapminder %>% \n  filter(year == past_year & !is.na(gdp)) %>% \n  mutate(group = ifelse(region %in% west, \"West\", \"Developing\")) %>% \n  ggplot(aes(dollars_per_day)) +\n  geom_histogram(binwidth = 1, color = \"black\") +\n  scale_x_continuous(trans = \"log2\") +\n  facet_grid(. ~group)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# facet by West/Developing and year\npresent_year <- 2010\ngapminder %>%\n    filter(year %in% c(past_year, present_year) & !is.na(gdp)) %>%\n    mutate(group = ifelse(region %in% west, \"West\", \"Developing\")) %>%\n    ggplot(aes(dollars_per_day)) +\n    geom_histogram(binwidth = 1, color = \"black\") +\n    scale_x_continuous(trans = \"log2\") +\n    facet_grid(year ~ group)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-60-2.png){width=672}\n:::\n:::\n\n\n### Code: Income distribution of West verseus Developing world, only countries with data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define countries that have data available in both years\ncountry_list_1 <- gapminder %>% \n  filter(year == past_year & !is.na(dollars_per_day)) %>% .$country\n\ncountry_list_2 <- gapminder %>% \n  filter(year == present_year & !is.na(dollars_per_day)) %>% .$country\n\ncountry_list <- intersect(country_list_1, country_list_2)\n\n# make histogram including only countries with data availabe in both years\ngapminder %>% \n  filter(year %in% c(past_year, present_year) & country %in% country_list) %>% # keep only selected countries\n  mutate(group = ifelse(region %in% west, \"West\", \"Developing\")) %>% \n  ggplot(aes(dollars_per_day)) +\n  geom_histogram(binwidth = 1, color = \"black\") +\n  scale_x_continuous(trans = \"log2\") +\n  facet_grid(year ~ group)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\n### Code: Boxplots of income in West versus Developing world, 1970 and 2010\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- gapminder %>% \n  filter(year %in% c(past_year, present_year) & country %in% country_list) %>%\n  mutate(region = reorder(region, dollars_per_day, FUN = median)) %>% \n  ggplot() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  xlab(\"\") + scale_y_continuous(trans = \"log2\") \n\np + geom_boxplot(aes(region, dollars_per_day, fill = continent)) +\n  facet_grid(year ~ .)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# arrange matching boxplots next to each other, colored by year\np + geom_boxplot(aes(region, dollars_per_day, fill = factor(year)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-62-2.png){width=672}\n:::\n:::\n\n\n## Density Plots\n\n::: callout-tip\n-   [**dplyr处理数据时常用的的函数**](https://bookdown.org/zhongyufei/Data-Handling-in-R/dplyr-functions.html)\n\n-   [**在 R Dplyr 包中使用 case when 语句**](https://verytoolz.com/blog/4341dd7810/)\n:::\n\n### Key Points\n\n-   Change the y-axis of density plots to variable counts using `..count..` as the y argument.\n\n-   The `case_when()` function defines a factor whose levels are defined by a variety of logical operations to group data.\n\n-   Plot stacked density plots using `position=\"stack\"`.\n\n-   Define a weight aesthetic mapping to change the relative weights of density plots-for example, this allow weighting of plots by population rather than number of countries.\n\n### Code: Faceted smooth density plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# see the code below the previous video for variable definitions\n\n# smooth density plots - area under each curve adds to 1\ngapminder %>% \n  filter(year == past_year & country %in% country_list) %>% \n  mutate(group = ifelse(region %in% west, \"West\", \"Developing\")) %>% group_by(group) %>% \n  summarize(n = n()) %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|group      |  n|\n|:----------|--:|\n|Developing | 87|\n|West       | 21|\n\n\n:::\n\n```{.r .cell-code}\n# smooth density plots - variable counts on y-axis\np <- gapminder %>% \n  filter(year == past_year & country %in% country_list) %>% \n  mutate(group = ifelse(region %in% west, \"West\", \"Developing\")) %>%\n  ggplot(aes(dollars_per_day, y = ..count.., fill = group)) +\n  scale_x_continuous(trans = \"log2\")\np + geom_density(alpha = 0.2, bw = 0.75) + facet_grid(year ~ .)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n\n### Code: Add new region group with case_when\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add group as a factor, grouping regions\ngapminder <- gapminder %>% \n  mutate(group = case_when(\n    .$region %in% west ~ \"West\",\n    .$region %in% c(\"Eastern Asia\", \"South-Eastern Asia\") ~ \"East Asia\", \n    .$region %in% c(\"Caribbean\", \"Central America\", \"South America\") ~ \"Latin America\",\n    .$continent == \"Africa\" & .$region != \"Northern Africa\" ~ \"Sub-Saharan Africa\", TRUE ~ \"Others\"))\n\n# reorder factor levels\ngapminder <- gapminder %>% \n  mutate(group = factor(group, levels = c(\"Others\", \"Latin America\", \"East Asia\", \"Sub-Saharan Africa\", \"West\")))\n```\n:::\n\n\n### Code: Stacked density plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# note you must redefine p with the new gapminder object first\np <- gapminder %>% \n  filter(year %in% c(past_year, present_year) & country %in% country_list) %>% \n  ggplot(aes(dollars_per_day, fill = group)) +\n  scale_x_continuous(trans = \"log2\")\n\n# stacked density plot\np + geom_density(alpha = 0.2, bw = 0.75, position = \"stack\") +\n  facet_grid(year ~ .)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n\n### Code: Weighted stacked density plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  filter(year %in% c(past_year, present_year) & country %in% country_list) %>% \n  group_by(year) %>% \n  mutate(weight = population/sum(population*2)) %>% \n  ungroup() %>% \n  ggplot(aes(dollars_per_day, fill = group, weight = weight)) +\n  scale_x_continuous(trans = \"log2\") +\n  geom_density(alpha = 0.2, bw = 0.75, position = \"stack\") + facet_grid(year ~ .)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n:::\n\n\n## Ecological Fallacy\n\n### Textbook link\n\n[Ecological Fallacy](https://rafalab.dfci.harvard.edu/dsbook/gapminder.html#the-ecological-fallacy-and-importance-of-showing-the-data)\n\n### Key Points\n\n-   The breaks argument allows us to set the location of the axis labels and tick marks.\n\n-   the *logistic* or *logit transformation* is defined as $f(p)=log\\frac{1}{1-p}$, or the log of odds. This scale is useful for highlighting difference near 0 or near 1 and converts fold changes into constant increase.\n\n-   The *ecological fallacy* is assuming that conclusion made from the average of a group apply to all members of that group.\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define gapminder\nlibrary(tidyverse)\nlibrary(dslabs)\ndata(gapminder)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# add additional cases\ngapminder <- gapminder %>%\n    mutate(group = case_when(\n        .$region %in% west ~ \"The West\",\n        .$region %in% \"Northern Africa\" ~ \"Northern Africa\",\n        .$region %in% c(\"Eastern Asia\", \"South-Eastern Asia\") ~ \"East Asia\",\n        .$region == \"Southern Asia\" ~ \"Southern Asia\",\n        .$region %in% c(\"Central America\", \"South America\", \"Caribbean\") ~ \"Latin America\",\n        .$continent == \"Africa\" & .$region != \"Northern Africa\" ~ \"Sub-Saharan Africa\",\n        .$region %in% c(\"Melanesia\", \"Micronesia\", \"Polynesia\") ~ \"Pacific Islands\"))\n\n# define a data frame with group average income and average infant survival rate\nsurv_income <- gapminder %>%\n    filter(year %in% present_year & !is.na(gdp) & !is.na(infant_mortality) & !is.na(group)) %>%\n    group_by(group) %>%\n    summarize(income = sum(gdp)/sum(population)/365,\n                        infant_survival_rate = 1 - sum(infant_mortality/1000*population)/sum(population))\nsurv_income %>% arrange(income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 3\n  group              income infant_survival_rate\n  <chr>               <dbl>                <dbl>\n1 Sub-Saharan Africa   1.76                0.936\n2 Southern Asia        2.07                0.952\n3 Pacific Islands      2.70                0.956\n4 Northern Africa      4.94                0.970\n5 Latin America       13.2                 0.983\n6 East Asia           13.4                 0.985\n7 The West            77.1                 0.995\n```\n\n\n:::\n\n```{.r .cell-code}\n# plot infant survival versus income, with transformed axes\nsurv_income %>% ggplot(aes(income, infant_survival_rate, label = group, color = group)) +\n    scale_x_continuous(trans = \"log2\", limit = c(0.25, 150)) +\n    scale_y_continuous(trans = \"logit\", limit = c(0.875, .9981),\n                                       breaks = c(.85, .90, .95, .99, .995, .998)) +\n    geom_label(size = 3, show.legend = FALSE) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-68-1.png){width=672}\n:::\n:::\n\n\n# Data Visualization Principles\n\n## Overview\n\nData visualization principles covers some general principles that can serve as guides for effective data visualization.\n\nAfter completing this section, you will:\n\n-   understand basic principles of effective data visualization.\n\n-   understand the importance of keeping your goal in mind when deciding on a visualization approach.\n\n-   understand principles for encoding data, including position, aligned lengths, angles, area, brightness, and color hue.\n\n-   know when to include the number zero in visualizations.\n\n-   be able to use techniques to ease comparisons, such as using common axes, putting visual cues to be compared adjacent to one another, and using color effectively.\n\n## Encoding Data Using Visual Cues\n\n### Key Points\n\n-   Visual cues for encoding data include position, length, angle, area, brightness and color hue.\n\n-   Position and length are the preferred way to display quantities, followed by angles, which are preferred over area. Brightness and color are even harder to quantify but can sometimes be useful.\n\n-   Pie charts represent visual cues as both angles and area, while donut charts use only area. Humans are not good at visually quantifying angles and are even worse at quantifying area. Therefore pie and donut charts should be avoided - use a bar plot instead. **If you must make a pie chart, include percentages as labels**.\n\n-   Bar plots represent visual cues as position and length. Humans are good at visually quantifying linear measures, **making bar plots a strong alternative to pie or donut charts**.\n\n## Know when to Include Zero\n\n### Key Points\n\n-   **When using bar plots, always start at 0**. It is deceptive not to start at 0 because bar plots imply length is proportional to the quantity displayed. Cutting off the y-axis can make differences look bigger than they actually are.\n\n-   **When using position rather than length, it is not necessary to include 0** (scatterplot, dot plot, boxplot).\n\n## Do not Distort Quantitles\n\n### Key Points\n\n-   Make sure your visualizations encode the correct quantities.\n\n-   For example, if you are using a plot that relies on circle area, make sure the area (rather than the radius) is proportional to the quantity.\n\n## Order by a Meaningful Value\n\n### Key Points\n\n-   It is easiest to visually extract information from a plot when categories are ordered by a meaningful value. The exact value on which to order will depend on your data and the message you wish to convey with your plot.\n\n-   The default ordering for categories is alphabetical if the categories are strings or by factor level if factors. However, **we rarely want alphabetical order**.\n\n## Show the Data\n\n### Key Points\n\n-   A dynamite plot - a bar graph of group averages with error bars denoting standard errors - provides almost no information about a distribution.\n\n-   By showing the data, you provide viewers extra information about distributions.\n\n-   Jitter is adding a small random shift to each point in order to minimize the number of overlapping points. To add jitter, use the `geom_jitter()` geometry instead of `geom_point()`. (See example below.)\n\n-   Alpha blending is making points somewhat transparent, helping visualize the density of overlapping points. Add an alpha argument to the geometry.\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dot plot showing the data\nheights %>% ggplot(aes(sex, height)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# jittered, alpha blended point plot\nheights %>% ggplot(aes(sex, height)) + geom_jitter(width = 0.1, alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-69-2.png){width=672}\n:::\n:::\n\n\n## Ease Comparisons: Use Common Axes\n\n### Key Points\n\n-   Ease comparisons by keeping axes the same when comparing data across multiple plots.\n\n-   Align plots vertically to see horizontal changes. Align plots horizontally to see vertical changes.\n\n-   Bar plots are useful for showing one number but not useful for showing distributions.\n\n## Consider Transformations\n\n### Key Points\n\n-   Use transformations when warranted to ease visual interpretation.\n\n-   The log transformation is useful for data with multiplicative changes. The logistic transformation is useful for fold changes in odds. The square root transformation is useful for count data.\n\n## Ease Comparisons: Compared Visual Cues Should Be Adjacent\n\n### Textbook links\n\n-   [Textbook section on compared visual cues being adjacent](https://rafalab.dfci.harvard.edu/dsbook/data-visualization-principles.html#visual-cues-to-be-compared-should-be-adjacent)\n\n-   [Textbook section on using color](https://rafalab.dfci.harvard.edu/dsbook/data-visualization-principles.html#use-color)\n\n-   [Textbook section on considering the color blind](https://rafalab.dfci.harvard.edu/dsbook/data-visualization-principles.html#think-of-the-color-blind)\n\n### Key Points\n\n-   When two groups are to be compared, it is optimal to place them adjacent in the plot.\n\n-   Use color to encode groups to be compared.\n\n-   Consider using a color blind friendly palette.\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor_blind_friendly_cols <- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\np1 <- data.frame(x = 1:8, y = 1:8, col = as.character(1:8)) %>%\n    ggplot(aes(x, y, color = col)) +\n    geom_point(size = 5)\np1 + scale_color_manual(values = color_blind_friendly_cols)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n:::\n\n\n## Slope Charts\n\n### Textbook link\n\n[Plots for two variables](https://rafalab.dfci.harvard.edu/dsbook/data-visualization-principles.html#plots-for-two-variables)\n\n### Key Points\n\n-   Consider using a **slope chart** or **Bland-Altman plot** when comparing one variable at two different time points, especially **for a small number of observations**.\n\n-   Slope charts use angle to encode change. Use geom_line() to create slope charts. It is useful when comparing a small number of observations.\n\n-   The Bland-Altman plot (Tukey mean difference plot, MA plot) graphs the difference between conditions on the y-axis and the mean between conditions on the x-axis. It is more appropriate for large numbers of observations than slope charts.\n\n### Code: Slope chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dslabs)\ndata(gapminder)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwest <- c(\"Western Europe\", \"Northern Europe\", \"Southern Europe\", \"Northern America\", \"Australia and New Zealand\")\n\ndat <- gapminder %>%\n    filter(year %in% c(2010, 2015) & region %in% west & !is.na(life_expectancy) & population > 10^7)\n\ndat %>%\n    mutate(location = ifelse(year == 2010, 1, 2),\n           location = ifelse(year == 2015 & country %in% c(\"United Kingdom\", \"Portugal\"),\n                             location + 0.22, location),\n           hjust = ifelse(year == 2010, 1, 0)) %>%\n    mutate(year = as.factor(year)) %>%\n    ggplot(aes(year, life_expectancy, group = country)) +\n    geom_line(aes(color = country), show.legend = FALSE) +\n    geom_text(aes(x = location, label = country, hjust = hjust), show.legend = FALSE) +\n    xlab(\"\") +\n    ylab(\"Life Expectancy\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n:::\n\n\n### Code: Bland-Altman Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggrepel)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>%\n    mutate(year = paste0(\"life_expectancy_\", year)) %>%\n    select(country, year, life_expectancy) %>% spread(year, life_expectancy) %>%\n    mutate(average = (life_expectancy_2015 + life_expectancy_2010)/2,\n                difference = life_expectancy_2015 - life_expectancy_2010) %>%\n    ggplot(aes(average, difference, label = country)) +\n    geom_point() +\n    geom_text_repel() +\n    geom_abline(lty = 2) +\n    xlab(\"Average of 2010 and 2015\") +\n    ylab(\"Difference between 2015 and 2010\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\n## Encoding a Third Variable\n\n### Textbook link\n\n[Encoding a third variable](https://rafalab.dfci.harvard.edu/dsbook/data-visualization-principles.html#encoding-a-third-variable)\n\n### Key Points\n\n-   Encode a categorical third variable on a scatterplot using color hue or shape. Use the shape argument to control shape.\n\n-   Encode a continuous third variable on a using color intensity or size.\n\n## Case Study: Vaccines\n\n### Textbook link\n\n[Case study: vaccines and infectious diseases](https://rafalab.dfci.harvard.edu/dsbook/data-visualization-principles.html#vaccines)\n\n[geom_vline: Add vertical lines](https://www.sthda.com/english/wiki/ggplot2-add-straight-lines-to-a-plot-horizontal-vertical-and-regression-lines)\n\n### Key Points\n\n-   Vaccines save millions of lives, but misinformation has led some to question the safety of vaccines. The data support vaccines as safe and effective. We visualize data about measles incidence in order to demonstrate the impact of vaccination programs on disease rate.\n\n-   The **RColorBrewer** package offers several color palettes. Sequential color palettes are best suited for data that span from high to low. Diverging color palettes are best suited for data that are centered and diverge towards high or low values.\n\n-   The `geom_tile()` geometry creates a grid of colored tiles. Position and length are stronger cues than color for numeric values, but color can be appropriate sometimes.\n\n### Code: Tile plot of measles rate by year and state\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import data and inspect\nlibrary(tidyverse)\nlibrary(dslabs)\ndata(us_contagious_diseases)\nstr(us_contagious_diseases)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign dat to the per 10,000 rate of measles, removing Alaska and Hawaii and adjusting for weeks reporting\nthe_disease <- \"Measles\"\ndat <- us_contagious_diseases %>%\n    filter(!state %in% c(\"Hawaii\", \"Alaska\") & disease == the_disease) %>%\n    mutate(rate = count / population * 10000 * 52/weeks_reporting) %>%\n    mutate(state = reorder(state, rate))\n\n# plot disease rates per year in California\ndat %>% filter(state == \"California\" & !is.na(rate)) %>%\n    ggplot(aes(year, rate)) +\n    geom_line() +\n    ylab(\"Cases per 10,000\") +\n    geom_vline(xintercept=1963, col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# tile plot of disease rate by state and year\ndat %>% ggplot(aes(year, state, fill=rate)) +\n    geom_tile(color = \"grey50\") +\n    scale_x_continuous(expand = c(0,0)) +\n    scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, \"Reds\"), trans = \"sqrt\") +\n    geom_vline(xintercept = 1963, col = \"blue\") +\n    theme_minimal() + theme(panel.grid = element_blank()) +\n    ggtitle(the_disease) +\n    ylab(\"\") +\n    xlab(\"\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-76-2.png){width=672}\n:::\n:::\n\n\n### Code: Line plot of measles rate by year and state\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute US average measles rate by year\navg <- us_contagious_diseases %>%\n    filter(disease == the_disease) %>% group_by(year) %>%\n    summarize(us_rate = sum(count, na.rm = TRUE)/sum(population, na.rm = TRUE)*10000)\n\n# make line plot of measles rate by year by state\ndat %>%\n    filter(!is.na(rate)) %>%\n    ggplot() +\n    geom_line(aes(year, rate, group = state), color = \"grey50\", \n        show.legend = FALSE, alpha = 0.2, size = 1) +\n    geom_line(mapping = aes(year, us_rate), data = avg, size = 1, col = \"black\") +\n    scale_y_continuous(trans = \"sqrt\", breaks = c(5, 25, 125, 300)) +\n    ggtitle(\"Cases per 10,000 by state\") +\n    xlab(\"\") +\n    ylab(\"\") +\n    geom_text(data = data.frame(x = 1955, y = 50),\n        mapping = aes(x, y, label = \"US average\"), color = \"black\") +\n    geom_vline(xintercept = 1963, col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n\n## Avoid Pseudo and Gratuitous 3D Plots\n\n### Textbook link\n\n[Avoid pseudo-three-dimensional plots](https://rafalab.dfci.harvard.edu/dsbook/data-visualization-principles.html#avoid-pseudo-three-dimensional-plots)\n\n### Key Points\n\nIn general, pseudo-3D plots and gratuitous 3D plots only add confusion. Use regular 2D plots instead.\n\n## Avoid Too Many Significant Digits\n\n### Textbook link\n\n[Avoid too many significant digits](https://rafalab.dfci.harvard.edu/dsbook/data-visualization-principles.html#avoid-too-many-significant-digits)\n\n### Key points\n\n-   In tables, avoid using too many significant digits. Too many digits can distract from the meaning of your data.\n\n-   Reduce the number of significant digits globally by setting an option. For example, options(digits = 3) will cause all future computations that session to have 3 significant digits.\n\n-   Reduce the number of digits locally using `round()` or `signif()`.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}