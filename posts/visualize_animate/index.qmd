---
title: "Visualize and compare change over time using gganimate."
description: "The article provides detailed instructions on using the gganimate package to animate a static ggplot2 plot, enhancing visualizations with dynamic transitions between data states."
author: 
  - name: Masumbuko Semba
    url: https://semba.netlify.app
    orcid: 0000-0002-5002-9747
    affiliation: Nelson Mandela African Institution of Science and Technology
    affiliation-url: https://semba.netlify.app/  
citation: 
    url: https://lugoga.github.io/kitaa/posts/visualize_animate/
bibliography: ../blog.bib
csl:  ../elsevier.csl
date: "2024-06-20"
toc: true
toc-depth: 4
categories: [Data Science, Data Visualization, ggplot]
image: cement_production_racee_chart.gif
code-fold: false
execute: 
  warning: false
  message: false
  comment: ""
  
filters: 
  - webr

---


<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-8KY4TDP558"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8KY4TDP558');
</script>



## Introduction

One of the main critiques of **ggplot2** [@ggplot] is its static nature, often cited as a limitation compared to more interactive tools like Highcharts. However, this doesn't mean that animation is entirely unavailable. Enter gganimate, a natural extension of ggplot2 designed to animate visualizations and capture changes in data over time or other variables. With gganimate, you can create dynamic charts and export them as a series of PNGs, or as a single GIF or MP4 file.

Today, you'll explore **gganimate** [@gganimate] and discover how to create compelling animated visualizations. By the end of this article, you'll have a set of visually engaging animations to showcase your data. Let's start by loading packages we need for this session;

```{r}
require(gganimate)
require(tidyverse)
```


## Dataset

The dataset we will use for the example exercises is "Global CO2 emissions from cement production" (Andrew 2022). 

```{r}
dat <- readr::read_csv("https://zenodo.org/record/7081360/files/1.%20Cement_emissions_data.csv", show_col_types = FALSE)
dat
```

We can subset the emmission measurement from 1960 onwards, and any columns with all NAs or zeros have been dropped. The table below displays all the data that will be used in this tutorial.

```{r}

dat |> 
  dplyr::filter(Year >= 1960) |> 
  select_if(function(x) all(!is.na(x))) |> 
  select_if(function(x) all(!x == 0))

```

We notice that using the select_if have removed even the countries we are interested, therefore, we need to make some changes to the code and use the filter verb instead

```{r}
selected.countries = dat |> 
  select(Year, Kenya, Uganda, Tanzania, Angola, Malawi, Zambia, Mozambique) |> 
  filter(Year > 1960)
```

Unfortunate, the dataset is in wide format and for us to visualize and analyse to compare the emmissions across the countries, we need to convert the dataset from wide to long format first. 

```{r}
selected.countries.long = selected.countries |> 
  pivot_longer(cols =  -Year, names_to = "countries", values_to = "Emmissions")
```


Create and visualize the emmission of cement productions for the selecte dcountires in the Africa continent. 


```{r}
selected.countries.long |> 
  ggplot(aes(x = Year, y = Emmissions, color = countries))+
  geom_line() + 
  # scale_y_log10() +
  labs(
    x = "Year", 
    y = "log10(Emission)") +
  theme(axis.title =  element_blank())
```

Then rank the cement emmission for all the countries for over the entire period the dataset was sampled. TO do that we use tne rank function and pass the argument of annual emmisions. The rank function will assign the rank for the country with the highest emmision as to the country with the lowest emmisions


```{r}
rankings = selected.countries.long |> 
  group_by(Year) |> 
  mutate(Rank = rank(-Emmissions)) |> 
  # filter(Year == 1970) |> 
  arrange(Rank) |> 
  mutate(labelling = as.character(Emmissions))
```



Let's filter the cement production emmissions for 2021

```{r}
rankings |> 
  filter(Year == 2021) |> 
  select(-labelling) |> 
  flextable::flextable()
```

We notice that in 2021, data on emissions from cement production for several African countries were compiled and ranked in ascending order. Malawi emitted the least amount of emissions, with 94.16 tons. Following Malawi, Uganda emitted 581.8 tons, Zambia emitted 961 tons, and Mozambique emitted 1011 tons. Angola followed with 1124 tons of emissions, Tanzania with 2524 tons, and Kenya with the highest emissions of 3583 tons.


## Creating and Styling a Bar Chart for a Single Time Period

Creating an animated chart can be time-consuming, so it's wise to start with a simpler task by building a visualization for a single time period. This allows you to ensure that everything appears exactly as you intend. For race charts to function correctly, they require one essential element: the rank. In our case, the rank indicates the position of a ticker's value compared to other tickers. Essentially, it determines the position of each column in the bar chart.


```{r}
ggplot(
  data = rankings |> filter(Year == 1980), 
  aes(x = reorder(countries, -Rank), y = Emmissions, color = countries, fill = countries)
  )+
  geom_col()+
  coord_flip(clip = "off", expand = FALSE) +
  geom_text(aes(label = labelling), hjust = -.25) +
  theme_minimal() +
  theme(
    legend.position = "none", axis.title.y = element_blank(),
    plot.margin = margin(1, 2, 1, 2, unit = "cm")
    ) +
  ggsci::scale_color_jama()+
  ggsci::scale_fill_jama()

```


## Animate

Animating a chart with R **gganimate** is easy. The only changes required in the charting code are removing the data filtering to capture all time periods and storing the entire plot into a variable. We assign our ggplot object as p, which is going to be fed into the animations functions

```{r}
p = ggplot(
  data = rankings , 
  aes(x = reorder(countries, -Rank), y = Emmissions, color = countries, fill = countries)
  )+
  geom_col()+
  coord_flip(clip = "off", expand = FALSE) +
  geom_text(aes(label = labelling), hjust = -.25) +
  theme_minimal() +
  theme(
    legend.position = "none", axis.title.y = element_blank(),
    plot.margin = margin(1, 2, 1, 2, unit = "cm")
    ) +
  ggsci::scale_color_jama()+
  ggsci::scale_fill_jama()

```


Once we have the plot object, we can animate with gganimate as the chunk below highlight. The p object represents a basic ggplot created. The `transition_states` function from gganimate is used to animate the plot based on the Year variable, with a transition length of 4 seconds between states and each state lasting for 1 second. The view_follow(fixed_x = TRUE) function keeps the x-axis consistent throughout the animation for a stable frame of reference. The plot's title dynamically updates to show the current year using the `{closest_state}` syntax. The caption at the bottom indicates the source as "SEMBA@2024". 

```{r}
#| eval: false
#| 
animated_plot = p + 
  transition_states(
    states = Year, 
    transition_length = 4, 
    state_length = 1
    ) +
  view_follow(fixed_x = TRUE) +
  labs(title = "Annual Cement Production in Tonnes ({closest_state})", caption = "SEMBA@2024")

animated_plot
```

This approach allows for a dynamic and engaging visualization of changes in annual cement production over time.

The `animate()` function will generate a GIF with a resolution of 1024x768 and a total of 600 frames. This means that the function will create a sequence of 600 images and compile them into a single animated GIF file. The resulting animation will have a resolution of 1024x800 pixels, providing a high-quality visual output.

```{r}
#| eval: false
#| 
animate(
  plot = animated_plot,
  width = 1024,
  height = 800,
  res = 150,
  nframes = 600,
  fps = 30,
  end_pause = 60,
  renderer = gifski_renderer("cement_production_racee_chart.gif")
)

```


![](cement_production_racee_chart.gif)



## References








