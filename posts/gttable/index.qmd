---
title: "Enhancing Tables with Flags Using the `gt` Package in R"
description: "The post explaining how to use the `gt` package in R to format tables with flags and other features, along with data manipulation using `tidyverse` and `rvest`"
author: 
  - name: Masumbuko Semba
    url: https://semba.netlify.app
    orcid: 0000-0002-5002-9747
    affiliation: Nelson Mandela African Institution of Science and Technology
    affiliation-url: https://semba.netlify.app/  
citation: 
    url: https://lugoga.github.io/kitaa/posts/summarytool/
bibliography: ../blog.bib
csl:  ../elsevier.csl
date: "2024-09-06"
date-modified: "2024-09-08"
categories: [visualization, code, Statistics]
image: "gt_table.png"
toc: true
execute: 
  warning: false
  message: false
  comment: ""
  
---


## Introduction

In this blog post, we'll explore how to use the `gt` package in R to create visually appealing tables that include country flags and other enhancements. We'll also cover data manipulation using `tidyverse` and `rvest` to prepare our data. 

### Step 1: Install and Load Required Packages

To get started, you'll need several R packages: `sf`, `tidyverse`, `rvest`, `gt`, and `gtsummary`. Install and load these packages with the following commands:

```{r}
require(sf)
require(tidyverse)
require(rvest)
require(gt)
require(gtsummary)
```

### Step 2: Extract and Clean Data

We'll extract population data from a Wikipedia page listing African countries by population. Using `rvest`, we can scrape this data into R:

```{r}
africa = read_html("https://en.wikipedia.org/wiki/List_of_African_countries_by_population") |> 
  html_table()
```

We then select the first table from the list:

```{r}
africa.pop = africa |> 
  purrr::pluck(1)
```

### Step 3: Prepare Data for `gt`

Before we format our table, we need to clean and prepare our data. We'll use `janitor` to clean column names and `dplyr` to select and join relevant columns:

```{r}
codes = countrypops |> 
  distinct(country_name, .keep_all = T) |> 
  select(1:3)

africa.pop.code = africa.pop |> 
  janitor::clean_names() |> 
  rename(country_name = country) |> 
  select(country_name, pop = 4, growth_rate = 3) |> 
  left_join(codes) |> 
  filter(!country_name == "Total")
```

### Step 4: Format Table with `gt`

Now we’re ready to create a table with flags using the `gt` package. First, we check available flag formatting options with:

```{r}
gt::info_flags()
```

To format our table with country flags, we use the `fmt_flag()` function. Here’s how to apply it:

```{r}
africa.pop.code |> 
  select(country_code_2, country_name, pop, growth_rate) |> 
  gt() |> 
  fmt_flag(columns = country_code_2) |>
  cols_label(
    country_code_2 = "Flag",
    country_name = "Country",
    pop = "Population (2024)",
    growth_rate = "Growth rate"
  )
```


## Displaying national flags by region

To create a table displaying national flags by region, you first need to prepare and clean your data. Start by filtering the dataset to include only African countries. We use the spData package to access the world dataset, filter for Africa, and remove any geometry columns to focus on the tabular data. Next, we select relevant columns, including country codes, names, and regions.

```{r}

afcon = spData::world |> 
  filter(continent == "Africa") |> 
  st_drop_geometry() |> 
  as_tibble() |> 
  select(country_code_2=1, country = name_long, region = subregion)

```


Once the data is prepared, join it with a dataset containing country codes. This dataset should map each country to its flag. Using dplyr, group the data by region and then summarize it to create a comma-separated list of country codes (representing flags) for each region. Rename this summarized column to "flag" for clarity.

```{r}
afcon.tb = afcon |> 
  left_join(codes) |> 
  dplyr::group_by(region) |>
  dplyr::summarize(
    countries = paste0(country_code_2, collapse = ",")
  ) |> 
  rename(flag = countries)
```

Then, use the gt package to format and display the table. Create a table object with `gt()`, and then apply the `fmt_flag()` function to format the flag column so that it displays the flags associated with each country code. Label the columns appropriately using `cols_label()` to make the table more readable, with clear names like "Region" and "National Flags."


```{r}
afcon.tb |> 
  gt() |> 
  gt::fmt_flag(columns = flag) |>
  cols_label(
    region = "Region",
    flag = "Nationa Flags"
  )

```


### Conclusion

Using the `gt` package, we can enhance tables by including flags and applying various formatting options. This approach not only makes data more engaging but also improves readability. Experiment with different formatting functions to further customize your tables!


