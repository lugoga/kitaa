[
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Agenda and Presentations for covered topics",
    "section": "",
    "text": "Our Agenda\n\nAn introduction\nGet familiar with R and Rstudio\nData types\nData structures\nReading and writing data in Rstudio\nTidying Data with tidyverse\nPlotting\n\nPlotting and Visualization_A\nPlotting and Visualization_B\nPlotting and Visualization_C\n\nData Manipulation\nDescriptive Statistics\nInferential Statistics\nModelling and simulation\nSpatial Handling and Analysis\nFurther topics\n\nGIt and Github\nReproducibility with Quarto\nWebsites and blog\nUsing python from Rstudio\nGenerating HTML, PDF and Word Reports\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/timeline/index.html",
    "href": "posts/timeline/index.html",
    "title": "Creating a Timeline graphic using R and ggplot2",
    "section": "",
    "text": "In this post we’re going to be using R and ggplot2 to create a project timeline with milestones and milestone statuses.\nThe finished product will look like as illustrated in Figure 1\n\n\n\n\n\n\nFigure 1: A timeline of the Milestone for learning Modern\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/stats0/index.html",
    "href": "posts/stats0/index.html",
    "title": "Understanding Descriptive Statistics",
    "section": "",
    "text": "In the world of statistics, there are three main types that are commonly used to analyze and interpret data: descriptive, inferential, and Bayesian. Each type serves a specific purpose and provides valuable insights into different aspects of the data.\nWhile descriptive statistics provides valuable insights into the basic features of a dataset (Figure 1), inferential statistics takes it a step further by making inferences or predictions about a population based on a sample. This type of statistics involves hypothesis testing, confidence intervals, and regression analysis, among other techniques.\nBayesian statistics, on the other hand, provides a framework for updating beliefs about parameters or hypotheses based on new evidence or data. It differs from traditional frequentist statistics in that it incorporates prior knowledge or beliefs about the parameters being estimated.\n\n\n\n\n\n\nFigure 1: The common metrics of descriptive statistics\n\n\n\nIn future sessions, we will delve deeper into inferential and Bayesian statistics to explore their applications and implications in data analysis. In this blog post, we will focus on descriptive statistics (Figure 1) and explore the central tendency theorem, as well as the measures of center and dispersion."
  },
  {
    "objectID": "posts/stats0/index.html#introduction",
    "href": "posts/stats0/index.html#introduction",
    "title": "Understanding Descriptive Statistics",
    "section": "",
    "text": "In the world of statistics, there are three main types that are commonly used to analyze and interpret data: descriptive, inferential, and Bayesian. Each type serves a specific purpose and provides valuable insights into different aspects of the data.\nWhile descriptive statistics provides valuable insights into the basic features of a dataset (Figure 1), inferential statistics takes it a step further by making inferences or predictions about a population based on a sample. This type of statistics involves hypothesis testing, confidence intervals, and regression analysis, among other techniques.\nBayesian statistics, on the other hand, provides a framework for updating beliefs about parameters or hypotheses based on new evidence or data. It differs from traditional frequentist statistics in that it incorporates prior knowledge or beliefs about the parameters being estimated.\n\n\n\n\n\n\nFigure 1: The common metrics of descriptive statistics\n\n\n\nIn future sessions, we will delve deeper into inferential and Bayesian statistics to explore their applications and implications in data analysis. In this blog post, we will focus on descriptive statistics (Figure 1) and explore the central tendency theorem, as well as the measures of center and dispersion."
  },
  {
    "objectID": "posts/stats0/index.html#descriptive-statistics",
    "href": "posts/stats0/index.html#descriptive-statistics",
    "title": "Understanding Descriptive Statistics",
    "section": "Descriptive Statistics",
    "text": "Descriptive Statistics\nDescriptive statistics is a branch of statistics focused on summarizing, organizing, and presenting data in a clear and understandable way. Its primary aim is to define and analyze the fundamental characteristics of a dataset without making sweeping generalizations or assumptions about the entire data set.\nThe main purpose of descriptive statistics is to provide a straightforward and concise overview of the data, enabling researchers or analysts to gain insights and understand patterns, trends, and distributions within the dataset.\nDescriptive statistics typically involve measures of central tendency (such as mean, median, mode), dispersion (such as range, variance, standard deviation), and distribution shape (including skewness and kurtosis). Additionally, graphical representations like charts, graphs, and tables are commonly used to visualize and interpret the data.\nHistograms, bar charts, pie charts, scatter plots, and box plots are some examples of widely used graphical techniques in descriptive statistics."
  },
  {
    "objectID": "posts/stats0/index.html#types-of-descriptive-statistics",
    "href": "posts/stats0/index.html#types-of-descriptive-statistics",
    "title": "Understanding Descriptive Statistics",
    "section": "Types of Descriptive Statistics",
    "text": "Types of Descriptive Statistics\nThere are two types of descriptive statistics:\n\nMeasures of Central Tendency\nMeasures of Dispersion\n\n\nMeasures of Central Tendency\nThe central tendency is defined as a statistical measure that may be used to describe a complete distribution or dataset with a single value, known as a measure of central tendency. Any of the central tendency measures accurately describes the whole data distribution. In the following sections, we will look at the central tendency measures, their formulae, applications, and kinds in depth.\n\n\n\n\n\n\n\n\nFigure 2: The location of the mean value of the normal distribution\n\n\n\n\n\n\nMean\nMean is the sum of all the components in a group or collection divided by the number of items in that group or collection. Mean of a data collection is typically represented as x̄ (pronounced “x bar”). The formula for calculating the mean for ungrouped data to express it as the measure is given as follows:\nFor a series of observations:\n\\[\n\\bar x = \\sum \\frac{x}{n}\n\\tag{1}\\]\nWhere,\n\n\\(\\bar x\\) = Mean values of the vector\n\\(\\sum x\\) Sum of all terms\n\\(n\\) number of observations\n\n\nExample 1 Weights of 7 girls in kg are 54, 32, 45, 61, 20, 66 and 50. create a vector object from these values and compute the mean of the data.\n\n\nSolution 1. \n\nweights = c(54, 32, 45, 61, 20, 66, 50)\n\nweights |&gt; mean()\n\n[1] 46.85714\n\n\n\n\n\nMedian\nMedian of a data set is the value of the middle-most observation obtained after organizing the data in ascending order, which is one of the measures of central tendency. Median formula may be used to compute the median for many types of data, such as grouped and ungrouped data.\n\nExample 2 Weights of 7 girls in kg are 54, 32, 45, 61, 20, 66 and 50. crreate a vector object from these values and compute the median of the data.\n\n\n\nweights = c(54, 32, 45, 61, 20, 66, 50)\nweights |&gt; median()\n\n[1] 50\n\n\n\n\n\nMode\nMode is one of the measures of central tendency, defined as the value that appears the most frequently in the provided data, i.e. the observation with the highest frequency is known as the mode of data. The mode formulae provided below can be used to compute the mode for ungrouped data.\n\nExample 3 Weights of 7 girls in kg are 54, 32, 45, 61, 20, 66 and 50. create a vector object from these values and compute the mode of these data.\n\n\nSolution 2. \n\n#|eval: false\nweights = c(54, 32, 45, 61, 20, 55, 50)\n\n\nweights |&gt; mode()\n\n[1] \"numeric\"\n\n\n\n\n\n\nMeasure of Dispersion\nAnother important property of a distribution is the dispersion. Some of the parameters that can be used to quantify dispersion are illustrated in Figure 3.\n\n\n\n\n\n\n\n\nFigure 3: The location of the standard deviation values of the normal distribution\n\n\n\n\n\nIf the variability of data within an experiment must be established, absolute measures of variability should be employed. These metrics often reflect differences in a data collection in terms of the average deviations of the observations. The most prevalent absolute measurements of deviation are mentioned below. In the following sections, we will look at the variability measures, their formulae in depth.\n\nRange\nStandard Deviation\nVariance\n\n\n\nRange\nThe range represents the spread of your data from the lowest to the highest value in the distribution. It is the most straightforward measure of variability to compute. To get the range, subtract the data set’s lowest and highest values.\nRange = Highest Value – Lowest Value\n\nExample 4 Calculate the range of the following data series: 5, 13, 32, 42, 15, 84\n\n\nSolution 3. \n\n#|eval: false\nweights = c(5, 13, 32, 42, 15, 84)\n\n\nweights |&gt; range()\n\n[1]  5 84\n\n\n\n\n\nStandard Deviation\nStandard deviation (s or SD) represents the average level of variability in your dataset. It represents the average deviation of each score from the mean. The higher the standard deviation, the more varied the dataset is.\nTo calculate standard deviation, follow these six steps:\n\nMake a list of each score and calculate the mean.\nCalculate deviation from the mean, by subtracting the mean from each score.\nSquare each of these differences.\nSum up all squared variances.\nDivide the total of squared variances by N-1.\n\n1.Find the square root of the number that you discovered.\n\nExample 5 Calculate standard deviation of the following data series: 5, 13, 32, 42, 15, 84.\n\n\nSolution 4. \n\n#|eval: false\nweights = c(5, 13, 32, 42, 15, 84)\n\n\nweights |&gt; sd()\n\n[1] 28.92346\n\n\n\n\n\nVariance\nVariance is calculated as average of squared departures from the mean. Variance measures the degree of dispersion in a data collection. The more scattered the data, the larger the variance in relation to the mean. To calculate the variance, square the standard deviation.\n\nExample 6 Calculate standard deviation of the following data series: 5, 13, 32, 42, 15, 84.\n\n\nSolution 5. \n\n#|eval: false\nweights = c(5, 13, 32, 42, 15, 84)\n\n\nweights |&gt; sd()\n\n[1] 28.92346\n\n\n\n\n\nShape of the distribution\n\nSkewness\nSkewness is a measure of the asymmetry of the tails of a distribution. A negative skew indicates that the distribution is spread out more to the left of the mean value, assuming values increasing towards the right along the axis. Th e sample mean is in this case smaller than the mode. Distributions with positive skewness have large tails that extend towards the right. Th e skewness of the symmetric normal distribution is zero.\nThe most popular way to compute the asymmetry of a distribution is by Pearson’s mode skewness:\n\\[\nskewness = \\frac{mean - mode}{standar deviation}\n\\] Although Pearson’s measure is a useful one, a Fisher formula is often used, which is defined as;\n\\[\nskewness = \\sum_{i-1}^N \\frac{(x - \\bar x)}{s^3}^2\n\\]\n\n\nKurtosis\nThe second important measure for the sape of the distribution is the kurtosis. The kurtosis is a measure of whether the data are peaked or flat relative to a normal distribution. A normal distribution has a kurtosis of three. A high kurtosis indicates that the distribution has a distinct peak near the mean, whereas a distribution characterized by a low kurtosis shows a flat top near the mean and broad tails. Higher peakedness in a distribution results from rare extreme deviations, whereas a low kurtosis is caused by frequent moderate deviations. Kurtosis formula is defined as :\n\\[\nkurtosis = \\sum \\frac{(x_i - \\bar x)^4}{s^4}\n\\]\n\n\n\nExample of distribution\nR has several functions to numerically summarize variables. These include the capability of calculating the mean, standard deviation, variance, median, five number summary, interquartile range (IQR) as well as arbitrary quantiles. To improve the legibility of output, we will also set the default number of digits to display to a more reasonable level (see ?options() for more configuration possibilities).\n\noptions(digits = 3)\n\n\n\nSimulate the weight of tuna species in the WIO region\nAs an example, we can simulate the weight of yellow fin tuna in the tropical Indian ocean. According to , yellow fin tuna weight range from 0.5 to 7.8 kg and we can use runif function in R to generate a sample of 200 individual as the code highlight;\n\nweight = runif(n = 200, min = 0.5, max = 7.8)\n# weight = rnorm(n = 200, mean = 4.10, sd = .28)\n\nweight |&gt; hist()\n\n\n\n\n\n\n\n\nInbuilt function exists for summary statistics.\n\nweight |&gt;\n  mean()\n\n[1] 4.34\n\n\n\nweight |&gt;\n  median()\n\n[1] 4.33\n\n\n\nweight |&gt;\n  sd()\n\n[1] 2.08\n\n\n\nweight |&gt;\n  range()\n\n[1] 0.639 7.796\n\n\n\nweight |&gt;\n  mode()\n\n[1] \"numeric\"\n\n\nIt is also straightforward to calculate quantiles of the distribution.\n\nweight |&gt;\n  quantile()\n\n   0%   25%   50%   75%  100% \n0.639 2.740 4.328 6.296 7.796 \n\n\nRather than computing the metrics as individual, some packages have dedicated functions that produce the summary statistic. For example, the psych package has describe function;\n\nweight |&gt;\n  psych::describe()\n\n   vars   n mean   sd median trimmed  mad  min max range  skew kurtosis   se\nX1    1 200 4.34 2.08   4.33    4.37 2.82 0.64 7.8  7.16 -0.08    -1.17 0.15\n\n\n\nweight |&gt;\n  summarytools::descr()\n\nDescriptive Statistics  \nweight  \nN: 200  \n\n                    weight\n----------------- --------\n             Mean     4.34\n          Std.Dev     2.08\n              Min     0.64\n               Q1     2.67\n           Median     4.33\n               Q3     6.31\n              Max     7.80\n              MAD     2.82\n              IQR     3.56\n               CV     0.48\n         Skewness    -0.08\n      SE.Skewness     0.17\n         Kurtosis    -1.17\n          N.Valid   200.00\n        Pct.Valid   100.00\n\n\n\nweight |&gt;\n  EnvStats::summaryFull()\n\n                             weight  \nN                            200     \nMean                           4.34  \nMedian                         4.33  \n10% Trimmed Mean               4.37  \nGeometric Mean                 3.69  \nSkew                          -0.0801\nKurtosis                      -1.15  \nMin                            0.639 \nMax                            7.8   \nRange                          7.16  \n1st Quartile                   2.74  \n3rd Quartile                   6.3   \nStandard Deviation             2.08  \nGeometric Standard Deviation   1.88  \nInterquartile Range            3.56  \nMedian Absolute Deviation      2.82  \nCoefficient of Variation       0.48  \n\n\nFinally, the report function in the report package provides a concise summary of many useful statistics.\n\nweight |&gt;\n  report::report()\n\nx: n = 200, Mean = 4.34, SD = 2.08, Median = 4.33, MAD = 2.82, range: [0.64,\n7.80], Skewness = -0.08, Kurtosis = -1.15, 0% missing\n\n\nLikewise, the fav_stats function in mosaic package\n\nweight |&gt;\n  mosaic::fav_stats()\n\n   min   Q1 median  Q3 max mean   sd   n missing\n 0.639 2.74   4.33 6.3 7.8 4.34 2.08 200       0\n\n\n\n\nGraphical Summaries\n\nlength = rnorm(n = 200, mean = 60, sd = 8)\n\nTh e functions hist provide numerous ways of binning the data, of normalizing the data, and of displaying the histogram.\n\nlength |&gt;\n  hist()\n\n\n\n\n\n\n\n\nTh e functions boxplot provide five summary number (min, Q1, median, Q3, max) values that are displayed in boxplot\n\nlength |&gt;\n  boxplot()\n\n\n\n\n\n\n\n\n\nlength |&gt;\n  densityplot()"
  },
  {
    "objectID": "posts/stats0/index.html#summary",
    "href": "posts/stats0/index.html#summary",
    "title": "Understanding Descriptive Statistics",
    "section": "Summary",
    "text": "Summary\nUnderstanding both central tendency and dispersion is essential for gaining insights into the characteristics of a dataset. Together, these measures can help to identify patterns, trends, and potential outliers within the data."
  },
  {
    "objectID": "posts/get started/index.html",
    "href": "posts/get started/index.html",
    "title": "Getting Started with R and RStudio",
    "section": "",
    "text": "In this tutorial we'll learn how to begin programming with R using RStudio. We'll install R, and RStudio RStudio, an extremely popular development environment for R. We'll learn the key RStudio features in order to start programming in R on our own."
  },
  {
    "objectID": "posts/get started/index.html#getting-started-with-rstudio",
    "href": "posts/get started/index.html#getting-started-with-rstudio",
    "title": "Getting Started with R and RStudio",
    "section": "Getting Started with RStudio",
    "text": "Getting Started with RStudio\nRStudio is an open-source tool for programming in R. RStudio is a flexible tool that helps you create readable analyses, and keeps your code, images, comments, and plots together in one place. It's worth knowing about the capabilities of RStudio for data analysis and programming in R.\nUsing RStudio for data analysis and programming in R provides many advantages. Here are a few examples of what RStudio provides:\n\nAn intuitive interface that lets us keep track of saved objects, scripts, and figures\nA text editor with features like color-coded syntax that helps us write clean scripts\nAuto complete features save time\nTools for creating documents containing a project's code, notes, and visuals\nDedicated Project folders to keep everything in one place\n\nRStudio can also be used to program in other languages including SQL, Python, and Bash, to name a few.\nBut before we can install RStudio, we'll need to have a recent version of R installed on our computer."
  },
  {
    "objectID": "posts/get started/index.html#install-r",
    "href": "posts/get started/index.html#install-r",
    "title": "Getting Started with R and RStudio",
    "section": "1. Install R",
    "text": "1. Install R\nR is available to download from the official R website. Look for this section of the web page:\nThe version of R to download depends on our operating system. Below, we include installation instructions for Mac OS X, Windows, and Linux (Ubuntu).\nMAC OS X\n\nSelect the Download R for (Mac) OSX option.\nLook for the most up-to-date version of R (new versions are released frequently and appear toward the top of the page) and click the .pkg file to download.\nOpen the .pkg file and follow the standard instructions for installing applications on MAC OS X.\nDrag and drop the R application into the Applications folder.\n\nWindows\n\nSelect the Download R for Windows option.\nSelect base, since this is our first installation of R on our computer.\nFollow the standard instructions for installing programs for Windows. If we are asked to select Customize Startup or Accept Default Startup Options, choose the default options.\n\nLinux/Ubuntu\n\nSelect the Download R for Linux option.\nSelect the Ubuntu option.\nAlternatively, select the Linux package management system relevant to you if you are not using Ubuntu.\n\nRStudio is compatible with many versions of R (R version 3.0.1 or newer as of July, 2020). Installing R separately from RStudio enables the user to select the version of R that fits their needs."
  },
  {
    "objectID": "posts/get started/index.html#install-rstudio",
    "href": "posts/get started/index.html#install-rstudio",
    "title": "Getting Started with R and RStudio",
    "section": "2. Install RStudio",
    "text": "2. Install RStudio\nNow that R is installed, we can install RStudio. Navigate to the RStudio downloads page.\nWhen we reach the RStudio downloads page, let's click the \"Download\" button of the RStudio Desktop Open Source License Free option:\nOur operating system is usually detected automatically and so we can directly download the correct version for our computer by clicking the \"Download RStudio\" button. If we want to download RStudio for another operating system (other than the one we are running), navigate down to the \"All installers\" section of the page."
  },
  {
    "objectID": "posts/get started/index.html#first-look-at-rstudio",
    "href": "posts/get started/index.html#first-look-at-rstudio",
    "title": "Getting Started with R and RStudio",
    "section": "3. First Look at RStudio",
    "text": "3. First Look at RStudio\nWhen we open RStudio for the first time, we'll probably see a layout like this:\n But the background color will be white, so don't expect to see this blue-colored background the first time RStudio is launched. Check out this Dataquest blog to learn how to customize the appearance of RStudio.\nWhen we open RStudio, R is launched as well. A common mistake by new users is to open R instead of RStudio. To open RStudio, search for RStudio on the desktop, and pin the RStudio icon to the preferred location (e.g. Desktop or toolbar).\n\n\n\n\n\n\nFigure 1: Watch the video that guide you through the key step of using Rstudio in R."
  },
  {
    "objectID": "posts/get started/index.html#the-console",
    "href": "posts/get started/index.html#the-console",
    "title": "Getting Started with R and RStudio",
    "section": "4. The Console",
    "text": "4. The Console\nLet's start off by introducing some features of the Console. The Console is a tab in RStudio where we can run R code.\nNotice that the window pane where the console is located contains three tabs: Console, Terminal and Jobs (this may vary depending on the version of RStudio in use). We'll focus on the Console for now.\nWhen we open RStudio, the console contains information about the version of R we're working with. Scroll down, and try typing a few expressions like this one. Press the enter key to see the result.\n1 + 2\nAs we can see, we can use the console to test code immediately. When we type an expression like 1 + 2, we'll see the output below after hitting the enter key.\nWe can store the output of this command as a variable. Here, we've named our variable result:\nresult &lt;- 1 + 2\nThe &lt;- is called the assignment operator. This operator assigns values to variables. The command above is translated into a sentence as:\n\n&gt; The result variable gets the value of one plus two.\n\nOne nice feature from RStudio is the keyboard shortcut for typing the assignment operator &lt;-:\n\nMac OS X: Option + -\nWindows/Linux: Alt + -\n\nWe highly recommend that you memorize this keyboard shortcut because it saves a lot of time in the long run!\nWhen we type result into the console and hit enter, we see the stored value of 3:\n&gt; result &lt;- 1 + 2 &gt; result [1] 3\nWhen we create a variable in RStudio, it saves it as an object in the R global environment. We'll discuss the environment and how to view objects stored in the environment in the next section."
  },
  {
    "objectID": "posts/get started/index.html#the-global-environment",
    "href": "posts/get started/index.html#the-global-environment",
    "title": "Getting Started with R and RStudio",
    "section": "5. The Global Environment",
    "text": "5. The Global Environment\nWe can think of the global environment as our workspace. During a programming session in R, any variables we define, or data we import and save in a dataframe, are stored in our global environment. In RStudio, we can see the objects in our global environment in the Environment tab at the top right of the interface:\nWe'll see any objects we created, such as result, under values in the Environment tab. Notice that the value, 3, stored in the variable is displayed.\nSometimes, having too many named objects in the global environment creates confusion. Maybe we'd like to remove all or some of the objects. To remove all objects, click the broom icon at the top of the window:\nTo remove selected objects from the workspace, select the Grid view from the dropdown menu:\nHere we can check the boxes of the objects we'd like to remove and use the broom icon to clear them from our Global Environment."
  },
  {
    "objectID": "posts/get started/index.html#install-the-tidyverse-packages",
    "href": "posts/get started/index.html#install-the-tidyverse-packages",
    "title": "Getting Started with R and RStudio",
    "section": "6. Install the tidyverse Packages",
    "text": "6. Install the tidyverse Packages\nMuch of the functionality in R comes from using packages. Packages are shareable collections of code, data, and documentation. Packages are essentially extensions, or add-ons, to the R program that we installed above.\nOne of the most popular collection of packages in R is known as the \"tidyverse\". The tidyverse is a collection of R packages designed for working with data. The tidyverse packages share a common design philosophy, grammar, and data structures. Tidyverse packages \"play well together\". The tidyverse enables you to spend less time cleaning data so that you can focus more on analyzing, visualizing, and modeling data.\nLet's learn how to install the tidyverse packages. The most common \"core\" tidyverse packages are:\n\nreadr, for data import.\nggplot2, for data visualization.\ndplyr, for data manipulation.\ntidyr, for data tidying.\npurrr, for functional programming.\ntibble, for tibbles, a modern re-imagining of dataframes.\nstringr, for string manipulation.\nforcats, for working with factors (categorical data).\n\nTo install packages in R we use the built-in install.packages() function. We could install the packages listed above one-by-one, but fortunately the creators of the tidyverse provide a way to install all these packages from a single command. Type the following command in the Console and hit the enter key.\ninstall.packages(\"tidyverse\")\nThe install.packages() command only needs to be used to download and install packages for the first time."
  },
  {
    "objectID": "posts/get started/index.html#load-the-tidyverse-packages-into-memory",
    "href": "posts/get started/index.html#load-the-tidyverse-packages-into-memory",
    "title": "Getting Started with R and RStudio",
    "section": "7. Load the tidyverse Packages into Memory",
    "text": "7. Load the tidyverse Packages into Memory\nAfter a package is installed on a computer's hard drive, the library() command is used to load a package into memory:\nlibrary(readr) library(ggplot2)\nLoading the package into memory with library() makes the functionality of a given package available for use in the current R session. It is common for R users to have hundreds of R packages installed on their hard drive, so it would be inefficient to load all packages at once. Instead, we specify the R packages needed for a particular project or task.\nFortunately, the core tidyverse packages can be loaded into memory with a single command. This is how the command and the output looks in the console:\nlibrary(tidyverse)## ── Attaching packages ───────────────────────────────────────────────── tidyverse 1.3.0 ──## ✓ ggplot2 3.3.2 ✓ purrr 0.3.4 ## ✓ tibble 3.0.3 ✓ dplyr 1.0.0 ## ✓ tidyr 1.1.0 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.5.0## ── Conflicts ──────────────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag()\nThe Attaching packages section of the output specifies the packages and their versions loaded into memory. The Conflicts section specifies any function names included in the packages that we just loaded to memory that share the same name as a function already loaded into memory. Using the example above, now if we call the filter() function, R will use the code specified for this function from the dplyr package. These conflicts are generally not a problem, but it's worth reading the output message to be sure."
  },
  {
    "objectID": "posts/get started/index.html#identify-loaded-packages",
    "href": "posts/get started/index.html#identify-loaded-packages",
    "title": "Getting Started with R and RStudio",
    "section": "8. Identify Loaded Packages",
    "text": "8. Identify Loaded Packages\nIf we need to check which packages we loaded, we can refer to the Packages tab in the window at the bottom right of the console.\nWe can search for packages, and checking the box next to a package loads it (the code appears in the console).\nAlternatively, entering this code into the console will display all packages currently loaded into memory:\n(.packages())\nWhich returns:\n[1] \"forcats\" \"stringr\" \"dplyr\" \"purrr\" \"tidyr\" \"tibble\" \"tidyverse\" [8] \"ggplot2\" \"readr\" \"stats\" \"graphics\" \"grDevices\" \"utils\" \"datasets\" [15] \"methods\" \"base\"\nAnother useful function for returning the names of packages currently loaded into memory is search():\n&gt; search()  [1] \".GlobalEnv\" \"package:forcats\" \"package:stringr\" \"package:dplyr\"  [5] \"package:purrr\" \"package:readr\" \"package:tidyr\" \"package:tibble\"  [9] \"package:ggplot2\" \"package:tidyverse\" \"tools:rstudio\" \"package:stats\" [13] \"package:graphics\" \"package:grDevices\" \"package:utils\" \"package:datasets\" [17] \"package:methods\" \"Autoloads\" \"package:base\""
  },
  {
    "objectID": "posts/get started/index.html#get-help-on-a-package",
    "href": "posts/get started/index.html#get-help-on-a-package",
    "title": "Getting Started with R and RStudio",
    "section": "9. Get Help on a Package",
    "text": "9. Get Help on a Package\nWe've learned how to install and load packages. But what if we'd like to learn more about a package that we've installed? That's easy! Clicking the package name in the Packages tab takes us to the Help tab for the selected package. Here's what we see if we click the tidyr package:\nAlternatively, we can type this command into the console and achieve the same result:\nhelp(package = \"tidyr\")\nThe help page for a package provides quick access to documentation for each function included in a package. From the main help page for a package you can also access \"vignettes\" when they are available. Vignettes provide brief introductions, tutorials, or other reference information about a package, or how to use specific functions in a package.\nvignette(package = \"tidyr\")\nWhich results in this list of available options:\nVignettes in package ‘tidyr’:nest nest (source, html) pivot Pivoting (source, html) programming Programming with tidyr (source, html) rectangle rectangling (source, html) tidy-data Tidy data (source, html) in-packages Usage and migration (source, html)\nFrom there, we can select a particular vignette to view:\nvignette(\"pivot\")\nNow we see the Pivot vignette is displayed in the Help tab. This is one example of why RStudio is a powerful tool for programming in R. We can access function and package documentation and tutorials without leaving RStudio!"
  },
  {
    "objectID": "posts/get started/index.html#get-help-on-a-function",
    "href": "posts/get started/index.html#get-help-on-a-function",
    "title": "Getting Started with R and RStudio",
    "section": "10. Get Help on a Function",
    "text": "10. Get Help on a Function\nAs we learned in the last section, we can get help on a function by clicking the package name in Packages and then click on a function name to see the help file. Here we see the pivot_longer() function from the tidyr package is at the top of this list:\nAnd if we click on \"pivot_longer\" we get this:\nWe can achieve the same results in the Console with any of these function calls:\nhelp(\"pivot_longer\") help(pivot_longer) ?pivot_longer\nNote that the specific Help tab for the pivot_longer() function (or any function we're interested in) may not be the default result if the package that contains the function is not loaded into memory yet. In general it's best to ensure a specific package is loaded before seeking help on a function."
  },
  {
    "objectID": "posts/get started/index.html#rstudio-projects",
    "href": "posts/get started/index.html#rstudio-projects",
    "title": "Getting Started with R and RStudio",
    "section": "11. RStudio Projects",
    "text": "11. RStudio Projects\nRStudio offers a powerful feature to keep you organized; Projects. It is important to stay organized when you work on multiple analyses. Projects from RStudio allow you to keep all of your important work in one place, including code scripts, plots, figures, results, and datasets.\nCreate a new project by navigating to the File tab in RStudio and select New Project.... Then specify if you would like to create the project in a new directory, or in an existing directory. Here we select \"New Directory\":\nRStudio offers dedicated project types if you are working on an R package, or a Shiny Web Application. Here we select \"New Project\", which creates an R project:\nNext, we give our project a name. \"Create project as a subdirectory of:\" is showing where the folder will live on the computer. If we approve of the location select \"Create Project\", if we do not, select \"Browse\" and choose the location on the computer where this project folder should live.\nNow in RStudio we see the name of the project is indicated in the upper-right corner of the screen. We also see the .Rproj file in the Files tab. Any files we add to, or generate-within, this project will appear in the Files tab.\nRStudio Projects are useful when you need to share your work with colleagues. You can send your project file (ending in .Rproj) along with all supporting files, which will make it easier for your colleagues to recreate the working environment and reproduce the results."
  },
  {
    "objectID": "posts/get started/index.html#save-your-real-work.-delete-the-rest.",
    "href": "posts/get started/index.html#save-your-real-work.-delete-the-rest.",
    "title": "Getting Started with R and RStudio",
    "section": "12. Save Your \"Real\" Work. Delete the Rest.",
    "text": "12. Save Your \"Real\" Work. Delete the Rest.\nThis tip comes from our 23 RStudio Tips, Tricks, and Shortcuts blog post, but it's so important that we are sharing it here as well!\nPractice good housekeeping to avoid unforeseen challenges down the road. If you create an R object worth saving, capture the R code that generated the object in an R script file. Save the R script, but don't save the environment, or workspace, where the object was created.\nTo prevent RStudio from saving your workspace, open Preferences &gt; General and un-select the option to restore .RData into workspace at startup. Be sure to specify that you never want to save your workspace, like this:\nNow, each time you open RStudio, you will begin with an empty session. None of the code generated from your previous sessions will be remembered. The R script and datasets can be used to recreate the environment from scratch.\nOther experts agree that not saving your workspace is best practice when using RStudio."
  },
  {
    "objectID": "posts/get started/index.html#r-scripts",
    "href": "posts/get started/index.html#r-scripts",
    "title": "Getting Started with R and RStudio",
    "section": "13. R Scripts",
    "text": "13. R Scripts\nAs we worked through this tutorial, we wrote code in the Console. As our projects become more complex, we write longer blocks of code. If we want to save our work, it is necessary to organize our code into a script. This allows us to keep track of our work on a project, write clean code with plenty of notes, reproduce our work, and share it with others.\nIn RStudio, we can write scripts in the text editor window at the top left of the interface:\n To create a new script, we can use the commands in the file menu:\nWe can also use the keyboard shortcut Ctrl + Shift + N. When we save a script, it has the file extension .R. As an example, we'll create a new script that includes this code to generate a scatterplot:\nlibrary(ggplot2) ggplot(data = mpg,        aes(x = displ, y = hwy)) +   geom_point()\nTo save our script we navigate to the File menu tab and select Save. Or we enter the following command:\n\nMac OS X: Cmd + S\nWindows/Linux: Ctrl + S"
  },
  {
    "objectID": "posts/get started/index.html#run-code",
    "href": "posts/get started/index.html#run-code",
    "title": "Getting Started with R and RStudio",
    "section": "14. Run Code",
    "text": "14. Run Code\nTo run a single line of code we typed into our script, we can either click Run at the top right of the script, or use the following keyboard commands when our cursor is on the line we want to run:\n\nMac OS X: Cmd + Enter\nWindows/Linux: Ctrl + Enter\n\nIn this case, we'll need to highlight multiple lines of code to generate the scatterplot. To highlight and run all lines of code in a script enter:\n\nMac OS X: Cmd + A + Enter\nWindows/Linux: Ctrl + A + Enter\n\nLet's check out the result when we run the lines of code specified above:\nSide note: this scatterplot is generated using data from the mpg dataset that is included in the ggplot2 package. The dataset contains fuel economy data from 1999 to 2008, for 38 popular models of cars.\nIn this plot, the engine displacement (i.e. size) is depicted on the x-axis (horizontal axis). The y-axis (vertical axis) depicts the fuel efficiency in miles-per-gallon. In general, fuel economy decreases with the increase in engine size. This plot was generated with the tidyverse package ggplot2. This package is very popular for data visualization in R."
  },
  {
    "objectID": "posts/get started/index.html#access-built-in-datasets",
    "href": "posts/get started/index.html#access-built-in-datasets",
    "title": "Getting Started with R and RStudio",
    "section": "15. Access Built-in Datasets",
    "text": "15. Access Built-in Datasets\nWant to learn more about the mpg dataset from the ggplot2 package that we mentioned in the last example? Do this with the following command:\ndata(mpg, package = \"ggplot2\")\nFrom there you can take a look at the first six rows of data with the head() function:\nhead(mpg)\n## # A tibble: 6 x 11 ##   manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class ## ## 1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa… ## 2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa… ## 3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa… ## 4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa… ## 5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa… ## 6 audi         a4      2.8  1999     6 manual(m5) f        18    26 p     compa…\nObtain summary statistics with the summary() function:\nsummary(mpg)\n##  manufacturer          model               displ            year ##  Length:234         Length:234         Min.   :1.600   Min.   :1999 ##  Class :character   Class :character   1st Qu.:2.400   1st Qu.:1999 ##  Mode  :character   Mode  :character   Median :3.300   Median :2004 ##                                        Mean   :3.472   Mean   :2004 ##                                        3rd Qu.:4.600   3rd Qu.:2008 ##                                        Max.   :7.000   Max.   :2008 ##       cyl           trans               drv                 cty ##  Min.   :4.000   Length:234         Length:234         Min.   : 9.00 ##  1st Qu.:4.000   Class :character   Class :character   1st Qu.:14.00 ##  Median :6.000   Mode  :character   Mode  :character   Median :17.00 ##  Mean   :5.889                                         Mean   :16.86 ##  3rd Qu.:8.000                                         3rd Qu.:19.00 ##  Max.   :8.000                                         Max.   :35.00 ##       hwy             fl               class ##  Min.   :12.00   Length:234         Length:234 ##  1st Qu.:18.00   Class :character   Class :character ##  Median :24.00   Mode  :character   Mode  :character ##  Mean   :23.44 ##  3rd Qu.:27.00 ##  Max.   :44.00\nOr open the help page in the Help tab, like this:\nhelp(mpg)\nFinally, there are many datasets built-in to R that are ready to work with. Built-in datasets are handy for practicing new R skills without searching for data. View available datasets with this command:\ndata()"
  },
  {
    "objectID": "posts/get started/index.html#additional-resources",
    "href": "posts/get started/index.html#additional-resources",
    "title": "Getting Started with R and RStudio",
    "section": "Additional Resources",
    "text": "Additional Resources\nIf you enjoyed this tutorial, come learn with us at Dataquest! If you are new to R and RStudio, we recommend starting with the Dataquest Introduction to Data Analysis in R course. This is the first course in the Dataquest Data Analyst in R path.\nFor more advanced RStudio tips check out the Dataquest blog post 23 RStudio Tips, Tricks, and Shortcuts.\nLearn how to load and clean data with tidyverse tools in this Dataquest blog post.\nRStudio has published numerous in-depth how to articles about using RStudio. Find them here.\nThere is an official RStudio Blog.\nIf you would like to learn R Markdown, check out these Dataquest blog posts:\n\nGetting Started with R Markdown — Guide and Cheatsheet\nR Markdown Tips, Tricks, and Shortcuts\n\nLearn R and the tidyverse with R for Data Science by Hadley Wickham. Solidify your knowledge by working through the exercises in RStudio and saving your work for future reference."
  },
  {
    "objectID": "posts/dataTypes/index.html",
    "href": "posts/dataTypes/index.html",
    "title": "Understanding and using Data types in R",
    "section": "",
    "text": "In the realm of data science and statistical analysis, mastering data types is akin to understanding the building blocks of a language. In R, a powerful statistical computing language, data types form the foundation upon which all analyses are conducted. From integers to dates, each data type serves a unique purpose and understanding their nuances is critical for efficient and accurate data manipulation.\nUnderstanding and effectively utilizing these core data types in R is essential for performing data analysis, visualization, and modeling tasks. Mastery of data types empowers data scientists to manipulate data efficiently and extract valuable insights from complex datasets. Whether performing arithmetic operations, manipulating text, or handling temporal information, the versatility of R’s data types makes it a powerful tool for data analysis and statistical computing.\nIn this guide, we will delve into the core data types in R, exploring their characteristics and providing illustrative examples. Before we dive in, let pause for a moment and watch video in Figure 1\n\n\n\n\n\n\nFigure 1: Primary data types in R\n\n\n\n\nInteger:\nIntegers are whole numbers without any decimal or fractional component. In R, integers are represented by the integer class. They are commonly used for indexing and counting operations.\n\nExample 1  \n# Creating an integer variable\nx &lt;- 5L\nclass(x) # Output: \"integer\"\n\n# Arithmetic operations with integers\ny &lt;- x + 3\n\n\n\nNumeric:\nNumeric data type, also known as double in other programming languages, represents numbers with decimal points. Numeric data types are used for most mathematical calculations and statistical operations in R.\n\nExample 2  \n# Creating a numeric variable\nheight &lt;- 175.5\nclass(height) # Output: \"numeric\"\n\n# Arithmetic operations with numeric variables\nbmi &lt;- weight / (height^2)\n\n\n\nCharacter:\nCharacter data type represents textual data such as strings of letters, words, or sentences. In R, character values are enclosed in either single or double quotes.\n\nExample 3  \n# Creating a character variable\nname &lt;- \"John Doe\"\nclass(name) # Output: \"character\"\n\n# Concatenating character strings\ngreeting &lt;- paste(\"Hello\", name)\n\n\n\nLogical:\nLogical data type, often referred to as Boolean, represents binary values: TRUE or FALSE. Logical values are fundamental in controlling program flow and making decisions based on conditions.\n\nExample 4  \n# Creating logical variables\nis_adult &lt;- TRUE\nclass(is_adult) # Output: \"logical\"\n\n# Conditional statements with logical variables\nif (is_adult) {\n  print(\"You are an adult.\")\n} else {\n  print(\"You are not an adult.\")\n}\n\n\n\nFactor:\nFactor data type is used to represent categorical data in R. Factors are stored as integers with associated labels, making them efficient for statistical modeling and analysis.\n\nExample 5  \n# Creating a factor variable\ngender &lt;- factor(c(\"Male\", \"Female\", \"Female\", \"Male\"))\nclass(gender) # Output: \"factor\"\n\n# Summary statistics with factors\ntable(gender)\n\n\n\nDate and Time:\nDate and time data types are crucial for handling temporal information in R. R provides specialized classes for dates (Date) and date-time values (POSIXct, POSIXlt).\n\nExample 6  \n# Creating a date variable\ntoday &lt;- as.Date(\"2024-04-25\")\nclass(today) # Output: \"Date\"\n\n# Date arithmetic\nnext_week &lt;- today + 7\n\n# Creating a POSIXct variable (date-time)\ncurrent_time &lt;- Sys.time()\nclass(current_time) # Output: \"POSIXct\"\n\nIn this post we learned about different R data types and what kind of data do they hold. Data type is very important concept in programming and can not be ignored. We have explained about each data type with example in this article.\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "photos.html",
    "href": "photos.html",
    "title": "Photos",
    "section": "",
    "text": "Greater flamingo\n\n\n\n\n\nLittle Egret\n\n\n\n\n\nPhragmites australis\n\n\n\n\n\nWhite Stork"
  },
  {
    "objectID": "photos.html#parc-naturel-du-mejean-lattes-fr",
    "href": "photos.html#parc-naturel-du-mejean-lattes-fr",
    "title": "Photos",
    "section": "",
    "text": "Greater flamingo\n\n\n\n\n\nLittle Egret\n\n\n\n\n\nPhragmites australis\n\n\n\n\n\nWhite Stork"
  },
  {
    "objectID": "photos.html#iceland",
    "href": "photos.html#iceland",
    "title": "Photos",
    "section": "Iceland",
    "text": "Iceland\n\n\n\n\nKirkjufell\n\n\n\n\n\nBlack pebble beach of Djúpalónssandur\n\n\n\n\n\nArnarstapi\n\n\n\n\n\nBúðakirkja\n\n\n\n\n\nDiamond beach\n\n\n\n\n\nSkógafoss\n\n\n\n\n\nReykjanes Peninsula\n\n\n\n\n\nReykjanes Peninsula"
  },
  {
    "objectID": "photos.html#montpellier-fr",
    "href": "photos.html#montpellier-fr",
    "title": "Photos",
    "section": "Montpellier, FR",
    "text": "Montpellier, FR\n\n\n\n\nLe Peyrou\n\n\n\n\n\nArc de triomphe\n\n\n\n\n\nLes Arceaux\n\n\n\n\n\n\n\n\nGreater flamingo\nLittle Egret\nPhragmites australis\nWhite Stork\nKirkjufell\nBlack pebble beach of Djúpalónssandur\nArnarstapi\nBúðakirkja\nDiamond beach\nSkógafoss\nReykjanes Peninsula\nReykjanes Peninsula\nLe Peyrou\nArc de triomphe\nLes Arceaux"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnderstanding Descriptive Statistics\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\nStatistics\n\n\n\nExamine measures of center and dispersion of the data so that we can gain valuable insights into the characteristics and distribution of various metrics that are in a dataset\n\n\n\n\n\nApr 25, 2024\n\n\nMasumbuko Semba\n\n\n\n\n\n\n\n\n\n\n\n\nImporting table files into R\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\n\nLearning to import tabular files from local directory intot R session is an important skills in R programming\n\n\n\n\n\nFeb 26, 2024\n\n\nMasumbuko Semba\n\n\n\n\n\n\n\n\n\n\n\n\nUnderstanding vector and dataframe\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\n\nUnderstanding vectoor and dataframe as core data storage in R is an important part, which allows for data analysis and visualization\n\n\n\n\n\nFeb 12, 2024\n\n\nMasumbuko Semba\n\n\n\n\n\n\n\n\n\n\n\n\nMastering Data Structures in R\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\n\nLearn the primary data structures (vector and data frame) in R, which are the foundation of data manipulation and analysis in R \n\n\n\n\n\nFeb 3, 2024\n\n\nMasumbuko Semba\n\n\n\n\n\n\n\n\n\n\n\n\nUnderstanding and using Data types in R\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\n\nLearn the primary data types in R, which are the foundation of data programming in R \n\n\n\n\n\nJan 26, 2024\n\n\nMasumbuko Semba\n\n\n\n\n\n\n\n\n\n\n\n\nFamliarize with R and Rstudio\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\nanalysis\n\n\n\nUnderstanding the software and layout of the tools make it easy to access the right tools while interacting with the data and software\n\n\n\n\n\nJan 26, 2024\n\n\nMasumbuko Semba\n\n\n\n\n\n\n\n\n\n\n\n\nGetting Started with R and RStudio\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\n\nLearn the basic of programming with R using RStudio. We’ll install R, and RStudio RStudio, an extremely popular development environment for R \n\n\n\n\n\nJan 24, 2024\n\n\nMasumbuko Semba\n\n\n\n\n\n\n\n\n\n\n\n\nThe basics of R and Rstudio\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\nanalysis\n\n\n\nUnderstanding the building blocks of R and its working environment Rstudio for smooth operations in data science\n\n\n\n\n\nJan 24, 2024\n\n\nMasumbuko Semba\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a Timeline graphic using R and ggplot2\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\nanalysis\n\n\n\nCreating a timeline graphic using ggplot2, which is a powerful data visualization library in R\n\n\n\n\n\nNov 24, 2023\n\n\nMasumbuko Semba\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "books.html",
    "href": "books.html",
    "title": "Reference books for the program",
    "section": "",
    "text": "Learning to code with the R language opens up a vast world of possibilities in data analysis, visualization, and spatial data handling. While the journey may seem daunting at first, having the right resources can significantly ease the learning curve. Here’s a curated list of relevant books to help you navigate through the intricacies of R programming:\n\nR for Data Science R for Data Science is a practical guide that serves as an excellent starting point for beginners. Authored by Hadley Wickham and Garrett Grolemund, this book introduces R programming for data analysis and visualization, with a strong emphasis on the tidyverse approach. Through hands-on examples and clear explanations, readers learn how to manipulate, explore, and visualize data effectively.\nModern R with the tidyverse takes a contemporary approach to R programming, focusing on modern packages, particularly those from the tidyverse ecosystem. Written by authors Thomas Mock and Rick Scavetta, this book goes beyond traditional R concepts, introducing readers to efficient data manipulation techniques and best practices for writing clean, readable code.\nPractical Spatial Data is an invaluable resource for those interested in working with spatial data, particularly in coastal and marine environments. Authored by Masumbuko Semba, this book provides a comprehensive introduction to R programming with a specific focus on handling spatial data. From importing geographic information to performing spatial analysis, readers gain practical insights and hands-on experience in utilizing R for geospatial applications.\nGeospatial Technology and Spatial Analysis in R delves deeper into the realm of geospatial data analysis using R. Written by Masumbuko Semba, this book explores the latest tools and packages available for modern spatial data handling and manipulation. Through step-by-step tutorials and real-world examples, readers learn how to harness the power of R for tasks such as geographic visualization, spatial statistics, and remote sensing analysis.\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About the initiative",
    "section": "",
    "text": "Are you interested in diving into the world of coding and programming using R and Python? If so, you’ve come to the right place. This website will guide you through the essentials of data science, focusing on how to turn raw data into valuable information to support decision making in both business and science.\n\n\n\nThe Five Key Processes of the learning workflow in R and Python languages\n\n\nAs often taught, we begin with the basics - an introduction to programming. Whether you’re new to coding or have some experience, understanding the fundamentals of programming is crucial. We’ll cover key concepts and terminology to help you get started on the right foot.\nNext, we’ll walk you through the process of installing R and RStudio. These are essential tools for anyone working with R, as they provide a user-friendly interface and a wide range of features to enhance your coding experience.\nOnce you have R and RStudio up and running, it’s time to get familiar with the environment. We’ll explore the layout and functionality of R and RStudio, helping you feel comfortable navigating and using these tools effectively.\nData types in R are an important aspect of programming in R. Understanding different data types such as numeric, character, and logical is essential for data manipulation and analysis. We’ll break down each data type and provide examples to ensure you have a solid grasp of this concept.\nData structure in R is another crucial topic to master. From vectors to matrices to lists, we’ll cover the various data structures in R and explain how each one is used in data science applications.\nTidying data frames is a key step in data analysis. We’ll delve into the principles of tidy data and demonstrate how to clean and organize your data frames for optimal analysis and visualization.\nData visualization with ggplot2 is an exciting aspect of data science. This powerful package in R allows you to create stunning visualizations to gain insights from your data. We’ll guide you through the process of using ggplot2 to create compelling graphs and charts.\nData manipulation is a vital skill for any data scientist. We’ll explore techniques for filtering, sorting, and transforming data to extract the information you need for your analysis.\nStatistics play a significant role in data science, enabling you to draw meaningful conclusions from your data. We’ll cover essential statistical concepts and techniques to help you make sense of your findings.\nModeling is the process of building and evaluating models to make predictions or gain a deeper understanding of your data. We’ll introduce key modeling techniques and demonstrate how to apply them in R for various scenarios.\nQuarto for report writing is a valuable tool for creating dynamic and reproducible reports. We’ll show you how to use Quarto to generate professional reports that capture your data analysis process and findings.\nGit and GitHub are essential for version control and collaboration in coding projects. We’ll provide an overview of these tools and explain how they can streamline your coding workflow and facilitate teamwork.\nFinally, we’ll discuss the importance of blogs and websites in showcasing your work as a data scientist. Building an online presence through blogging and creating a personal website can help you share your insights and connect with others in the field.\nBy covering these nine major topics, we aim to equip you with the foundational knowledge and practical skills needed to excel in data science using R and Python. Whether you’re just starting or looking to expand your expertise, this blog post will serve as a valuable resource on your journey in the world of programming and data science.\n\n\n\n Back to top"
  },
  {
    "objectID": "archive.html",
    "href": "archive.html",
    "title": "Archive",
    "section": "",
    "text": "Understanding Descriptive Statistics\n\n\n\n\n\n\n\n\nApr 25, 2024\n\n\n\n\n\n\n\nImporting table files into R\n\n\n\n\n\n\n\n\nFeb 26, 2024\n\n\n\n\n\n\n\nUnderstanding vector and dataframe\n\n\n\n\n\n\n\n\nFeb 12, 2024\n\n\n\n\n\n\n\nMastering Data Structures in R\n\n\n\n\n\n\n\n\nFeb 3, 2024\n\n\n\n\n\n\n\nUnderstanding and using Data types in R\n\n\n\n\n\n\n\n\nJan 26, 2024\n\n\n\n\n\n\n\nFamliarize with R and Rstudio\n\n\n\n\n\n\n\n\nJan 26, 2024\n\n\n\n\n\n\n\nGetting Started with R and RStudio\n\n\n\n\n\n\n\n\nJan 24, 2024\n\n\n\n\n\n\n\nThe basics of R and Rstudio\n\n\n\n\n\n\n\n\nJan 24, 2024\n\n\n\n\n\n\n\nCreating a Timeline graphic using R and ggplot2\n\n\n\n\n\n\n\n\nNov 24, 2023\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "The dataset for the program",
    "section": "",
    "text": "Datasets\n\nChinook – contains the lengths and weights for Chinook Salmon from three locations in Argentina. you can simply download the file from the internet using the code chunk below;\n\n\nchinook = readr::read_csv(\n  file = \"https://raw.githubusercontent.com/lugoga/kitaa/main/datasets/chinook_lw.csv\")\n\n\nchinook |&gt; \n  FSA::headtail() |&gt; \n  flextable::flextable()\n\ntlwloc120.117.9Argentina115.017.2Argentina111.216.8Argentina29.20.3Puyehue25.20.3Puyehue18.00.1Puyehue\n\n\n\nMauna Loa Atmospheric CO2 Concentration– store Atmospheric concentrations of CO2 are expressed in parts per million (ppm) and reported in the preliminary 1997 SIO manometric mole fraction scale. The link to download is found in the chunk\n\n\nco = readr::read_csv(\"https://raw.githubusercontent.com/lugoga/kitaa/main/datasets/long_form_co2.csv\")\n\n`\n\nco |&gt; \n  FSA::headtail() |&gt; \n  flextable::flextable()\n\ndaymonthsyearco21511,959315.421521,959316.311531,959316.5015101,997360.8315111,997362.4915121,997364.34\n\n\n\nNote that you can import the dataset from online API to Rstudio with easy as the chunk above highlight\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "people.html",
    "href": "people.html",
    "title": "People you meet along the initiative",
    "section": "",
    "text": "We view data as a key to solving societal issues, and modern tools make it easier than ever.\n\nPause for a moment and Join us\n\n\n\n\n\n\n\n\nMr. Masumbuko Semba\n\nRole: Mentor\nSemba works at the Nelson Mandela African Institution of Science and Technology. He use programming language like R and Python to manage and analyse data and report using Web Applications, Website or blogs. Semba also design graphics and automate plots, maps for static and interactive document.\n lugosemba@gmail.com\n +255 717 603 703\n\n\n\n\n\nMs. Nyamisi Peter\n\nRole: Mentor\nNyamisi works at University of Dar es Salaam. She is phytoplankton exeprt using earth observation data and automate data acquisation, process, analyse. She is excellent in using quarto that combine R codes and text to automate generation of technical documents in word, pdf or html formats.\n nyamisip@gmail.com\n +255 717 516 711\n\n\n\n\n\n\nMr. Kassim Said\n\nRole: Mentee\nKassim is an accountant and financial analyst. He works as an accountant at Letshego Faidika Bank and as a financial consultant at Asasi ya Uwezeshaji Tanzania under the USAID Heshimu Bahari Project.\n +255 743 956 226\n\n\n\nMr. Kessy Revocatus\n\nRole: Mentor\nKessy Revocatus is a mathematician current teaches at Hannah Bennie Schools School. Recognizing the role of data in driving business, he is learning R programming to automate data analysis, model and reporting.\n +255 711 396 392\n\n\n\n\n\n\nMr. Barakael Matulu\n\nRole: Mentee\nBarakael works on the USAID Heshimu Bahari Project. He is an aquatic ecologist with interests in marine resources management and climate change issues. Recently, he has also developed an interest in automating data acquisition, processing, analysis, and reporting in R, as well as graphic design.\n\n\n\nMr. Emmanuel Mpina\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Ailars MIMP\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Alex Peter\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMs. Amina Kibola\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Juma Charles\n\nRole: Mentee\nJuma Charles works at TANESCO as land surveyor. He uses tools like Excel, ArcGIS Pro, and AutoCAD to transform spatial data into information. Currently, he’s expanding his expertise by mastering R to enhance his career capabilities.\n +255 783 293 841\n\n\n\n\n\n\nMr. Benjamini Mpinga\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Bernaid MPRU\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nDr. Deo Shirima\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMs. Elika Kileo\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nDr. Elikana\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMs. Glady K.\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Hilary Mkai\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Humphrey Mahundi\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Ikumbi\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMs. Kaijage\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMs. Kulwa Mtaki\n\nRole: Mentee\nMs. Kulwa Mtaki serves as a Marine Conservation Warden at the Marine Parks and Reserves Unit in Tanzania. Her expertise lies in fisheries and aquaculture, marine ecosystem monitoring, and data management and analysis using R-program.\n mtakikulwa@yahoo.com\n\n\n\nMs. Maria Pentzel\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Paschal Mkongola\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Sam Job\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr.Stephano Semba\n\nRole: Mentee\nStephano Semba is employed by the Tanzania Forestry Service (TFS) as a Forestry Conservator. Understanding the importance of programming, I have dedicated myself to acquiring knowledge in data science, report writing, and spatial analysis to address the challenges in conservation.\n +255 677 250 711\n\n\n\nMr. Edward Senkondo\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr.Shadrack Nyanda\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. January Wegoro\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Zac Maritine\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMs. Edina G\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. James Lusana\n\nRole: Mentee\nJames Lusana, an Assistant Lecturer at the University of Dar es Salaam, is researching catfish in Lake Tanganyika for his PhD. He uses advanced imaging techniques to study their physical traits and analyzes their diet and genetics to understand their ecological role and evolution. His work aims to uncover how these fish have adapted and diversified in their environment.\n\n\n\nMs. Kally\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Gabriely J. Namate\n\nRole: Mentee\nNamate is employed at Pangani District Council as a Fisheries Officer and Aquaculture Specialist. Recognizing the power of R programming in data, he decided to learn and acquired necessary skills for statistical analysis, plotting, and sharing the finding.\n +255 654 989 271\n\n\n\nMr. Samwel\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Julius Olumeh\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Ekumbi Boniphace\n\nRole: Facilitator\nEkumbi Boniphace is currently working on the project, where he is responsible for promoting schools in Tanzania. He utilizes various tools such as ArcGIS, Kobo, and Adobe Photoshop to carry out his tasks. Recently, he is expanding his skill set by learning R and Python for data processing, analysis and reporting.\n ekumbiboni@gmail.com\n +255 716 494 125\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: The video “CERN: The Journey of Discovery”\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/datastructures/index.html",
    "href": "posts/datastructures/index.html",
    "title": "Mastering Data Structures in R",
    "section": "",
    "text": "In data analysis and statistical computing, mastering data structures is essential for efficient data manipulation and analysis. In R, a powerful language for statistical computing and graphics, two fundamental data structures are vectors and data frames. Additionally, the newer tibble data structure offers enhanced features for data manipulation and visualization. In this comprehensive guide, we will explore these data structures in detail, providing illustrative examples along the way.Before we dive in, let pause for a moment and watch video in Figure 1\n\n\n\n\n\n\nFigure 1: Primary data structure in R\n\n\n\n\nVectors:\nVectors are one-dimensional arrays that can hold numeric, character, logical, or other atomic data types. They are the simplest and most basic data structure in R.\n\nCreating Vectors:\nCreating vectors in R is straightforward using the c() function, which concatenates elements into a vector.\n# Creating a numeric vector\nnumeric_vector &lt;- c(1, 2, 3, 4, 5)\n\n# Creating a character vector\ncharacter_vector &lt;- c(\"apple\", \"banana\", \"orange\", \"grape\", \"pineapple\")\n\n# Creating a logical vector\nlogical_vector &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE)\n\n\nUsing Vectors to Create Data Frames:\nData frames are two-dimensional data structures that resemble tables, where each column can be a different data type. They are commonly used for storing and analyzing structured data.\n# Using vectors to create a data frame\ndata &lt;- data.frame(\n  numeric_col = numeric_vector,\n  character_col = character_vector,\n  logical_col = logical_vector\n)\n\n# View the created data frame\nprint(data)\n\n\n\nData Frames:\nData frames are the workhorse of R for storing tabular data. They are similar to matrices but offer more flexibility, as each column can be of a different data type.\n\nCreating Data Frames:\nData frames can be created directly using the data.frame() function, where each column is specified as a vector.\n# Creating a data frame directly\nstudent_data &lt;- data.frame(\n  name = c(\"John\", \"Alice\", \"Bob\", \"Emma\", \"Michael\"),\n  age = c(25, 23, 27, 22, 24),\n  grade = c(\"A\", \"B\", \"B\", \"C\", \"A\")\n)\n\n# View the created data frame\nprint(student_data)\n\n\nUsing Tibbles:\nTibbles are a modern alternative to data frames, introduced by the tidyverse ecosystem. They are more user-friendly, provide enhanced printing, and have better support for data analysis pipelines.\n# Creating a tibble from vectors\nlibrary(tibble)\n\n# Creating a tibble directly\nstudent_tibble &lt;- tibble(\n  name = c(\"John\", \"Alice\", \"Bob\", \"Emma\", \"Michael\"),\n  age = c(25, 23, 27, 22, 24),\n  grade = c(\"A\", \"B\", \"B\", \"C\", \"A\")\n)\n\n# View the created tibble\nprint(student_tibble)\n\n\n\nConclusion:\nUnderstanding data structures such as vectors, data frames, and tibbles is crucial for effective data manipulation and analysis in R. Whether you’re working with numeric data, text data, or logical data, these data structures provide the foundation for organizing and analyzing your data efficiently. By mastering these data structures, you’ll be well-equipped to tackle a wide range of data analysis tasks in R.\nIn this guide, we’ve covered how to create vectors, use them to construct data frames, and introduced the newer tibble data structure. Armed with this knowledge, you’re ready to dive deeper into the world of data analysis and unlock the full potential of R for your projects. Whether you’re a beginner or an experienced R user, mastering these fundamental data structures will pave the way for more advanced data analysis and modeling techniques.\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/exploreR/index.html",
    "href": "posts/exploreR/index.html",
    "title": "Famliarize with R and Rstudio",
    "section": "",
    "text": "For data to make sense, you will need to use some of the tools you have come across already, namely your spreadsheet and the R program. You will see the various specifics as you go along but before you go any further you need to become a bit more familiar with the R program and with some important tools in Excel. What you will learn in this chapter***\n\nThe basics of using R;\nHow to extend the capabilities of R;\nHow to manage data using Excel (e.g. sorting, filtering);\nHow to make pivot tables using Excel;\nHow to save data in different file formats;\nHow to get data from Excel into R\n\n\n\nOnce you have installed R, you can run it using the regular methods: you may have a shortcut on the desktop or use the Start button. Once you have run the program, you will see the main input window and a welcome text message. This will look something like Figure 1 if you are using Windows. There is a &gt; and cursor | to show that you can type at that point. In the examples, you’ll see the &gt; to indicate where you have typed a command, and lines beginning with anything else are the results of your typing.\n\n\n\n\n\n\n\n\nFigure 1: The R program interface is a bit sparse compared to most Windows programs.\n\n\n\n\n\nThe graphical user interface (GUI) of R program is somewhat sparse compared to most Windows programs. You are expected to type commands in the console. This sounds a bit daunting but is actually not that hard. Once you know a few basics, you can start to explore more and more powerful commands\nR has an extensive help system [@rbase]. There are many resources available on the R website and it is worth looking at some of the recommended documents (most are PDF) and working through those. Of course this book itself will provide a good starting point!\nAfter a while you can start to build up a library of commands in a basic text editor; it is easy to copy and paste commands into R. It is also easy to save a snapshot of the work you have been doing for someone else to look over.\n\n\nRstudio Figure 2 has made coding in R easier than ever before.\n\n\n\n\n\n\n\n\nFigure 2: The RStudio program interface.\n\n\n\n\n\n\n\n\nR has extensive help. If you know the name of a command and want to find out more (there are often additional options), then type one of the following:\n\nhelp(topic)\n?topic\n\nYou replace the word topic with the name of the command you want to find out about. The help system that is opened depends on your operating system:\n\nWindows – opens your default web browser;\nMacintosh – opens a browser-like help window;\nLinux – displays text help in the R console.\n\n\n\n\n\n\n\nNote\n\n\n\nYou can open the help system in your web browser in any operating system if you type help.start()\n\n\n\n\n\nThere are several people using R and many of them write about it on the Internet. The R website is a good start but just adding R to a web search may well get you what you need.\n\n\n\nR can function like a regular calculator. Open Rstudio and start by typing some maths in a console:\n\n14 +11 +(23 * 2)\n\n[1] 71\n\n\n\nsqrt(5)\n\n[1] 2.236068\n\n\n\npi * 4\n\n[1] 12.56637\n\n\nThe [1] indicates that the value displayed is the first in a series (and in this case the only value). If you have several lines of answers, then each line begins with an [n] label where n is a number relating to “how far along” the list the first in that line is. Instant display of the result is very useful but you really want to store some of the results so that you can use them later and use them in longer calculations. To do this you create variable names. For example, you simply assign the result of the computation with = operator and specify its name:\n\nans1 = 14 +11 +(23 * 2)\n\nThis time you will notice that you do not see the result of your calculations. R does not assume that just because you created these objects you necessarily want to see them. It is easy enough to view the results; you need to type in the name of the variable you created and execute the command:\n\nans1\n\n[1] 71\n\n\nIn most tutorials, you will notice that a &lt;- is used instead of = operator. This is because in older versions of R, the = sign was not used:\n\nans2 &lt;-  14 +11 +(23 * 2)\nans2\n\n[1] 71\n\n\n\n\n\n\n\n\nImportant\n\n\n\nAlthough a &lt;- is easy to read in code, but for most practical purposes = is quicker to type.\n\n\n\n\n\nAll objects created in R enviroment must be assigned as name. In a spreadsheet, each cell has a row and column reference, e.g. B12, which allows you to call up data by specifying the range of cells they occupy. R does not set out data like this so you must assign labels to everything so you can keep track of them. You need to give your data a name; R expects everything to have a name and this allows great flexibility. Think of these names as like the memory on a calculator; with R you can have loads of different things stored at the same time.\nNames can be more or less any combination of letters and numbers. Any name you create must start with a letter; other than that, you can use numbers and letters freely. The only other characters allowed are the full stop and the underscore character. R is case sensitive so the following are all different:\n\n\n\n\n\n\nImportant\n\n\n\nIt is a good idea to make your names meaningful but short!\n\n\n\n\n\nWithout data R has nothing to do and with must make some datasets. The simplest technique of making objects of elements in r is by concatenate using a c() command\n\nweight = c(28.1, 25.4, 63.24, 45.8, 68.5, 42.6, 45.3, 74.5)\nweight\n\n[1] 28.10 25.40 63.24 45.80 68.50 42.60 45.30 74.50\n\n\nHere you make an object called weight and combine the numbers in the brackets to make it. Each value has to be followed by a comma. The spaces are optional, R ignores them, but they can be useful to aid clarity and avoid mistakes when typing.\n\n\n\nThe base distribution of R can do a lot but often you will find the need to perform some analysis that it cannot do. Because of the nature of R, several people are working to develop new packages that extend the capability of R. These packages are dedicated to specific routines from management, manipulation, analysis, model, and plotting data to reporting and sharing of information.\nIt is fairly simple to find and install these extra packages. One method is to search online but the R website has lists of available packages. You may be able to download a zip file. Then you can install the package from within R using one of the menu commands on the toolbar (under the Packages menu). Alternatively, if you are connected to the Internet you can use the menu to install packages directly.\nThe simplest approach to install packages in R is through a console by simply parse a command\n\ninstall.packages(\"package.name\")\n\n\n\n\n\n\n\nImportant\n\n\n\nYou replace package.name with the name of the package you want.\n\n\n\n\n\nTo load a library of routines into R you use the require() command, e.g.\n\nrequire(\"package.name\")"
  },
  {
    "objectID": "posts/exploreR/index.html#beginning-to-use-r",
    "href": "posts/exploreR/index.html#beginning-to-use-r",
    "title": "Famliarize with R and Rstudio",
    "section": "",
    "text": "Once you have installed R, you can run it using the regular methods: you may have a shortcut on the desktop or use the Start button. Once you have run the program, you will see the main input window and a welcome text message. This will look something like Figure 1 if you are using Windows. There is a &gt; and cursor | to show that you can type at that point. In the examples, you’ll see the &gt; to indicate where you have typed a command, and lines beginning with anything else are the results of your typing.\n\n\n\n\n\n\n\n\nFigure 1: The R program interface is a bit sparse compared to most Windows programs.\n\n\n\n\n\nThe graphical user interface (GUI) of R program is somewhat sparse compared to most Windows programs. You are expected to type commands in the console. This sounds a bit daunting but is actually not that hard. Once you know a few basics, you can start to explore more and more powerful commands\nR has an extensive help system [@rbase]. There are many resources available on the R website and it is worth looking at some of the recommended documents (most are PDF) and working through those. Of course this book itself will provide a good starting point!\nAfter a while you can start to build up a library of commands in a basic text editor; it is easy to copy and paste commands into R. It is also easy to save a snapshot of the work you have been doing for someone else to look over.\n\n\nRstudio Figure 2 has made coding in R easier than ever before.\n\n\n\n\n\n\n\n\nFigure 2: The RStudio program interface.\n\n\n\n\n\n\n\n\nR has extensive help. If you know the name of a command and want to find out more (there are often additional options), then type one of the following:\n\nhelp(topic)\n?topic\n\nYou replace the word topic with the name of the command you want to find out about. The help system that is opened depends on your operating system:\n\nWindows – opens your default web browser;\nMacintosh – opens a browser-like help window;\nLinux – displays text help in the R console.\n\n\n\n\n\n\n\nNote\n\n\n\nYou can open the help system in your web browser in any operating system if you type help.start()\n\n\n\n\n\nThere are several people using R and many of them write about it on the Internet. The R website is a good start but just adding R to a web search may well get you what you need.\n\n\n\nR can function like a regular calculator. Open Rstudio and start by typing some maths in a console:\n\n14 +11 +(23 * 2)\n\n[1] 71\n\n\n\nsqrt(5)\n\n[1] 2.236068\n\n\n\npi * 4\n\n[1] 12.56637\n\n\nThe [1] indicates that the value displayed is the first in a series (and in this case the only value). If you have several lines of answers, then each line begins with an [n] label where n is a number relating to “how far along” the list the first in that line is. Instant display of the result is very useful but you really want to store some of the results so that you can use them later and use them in longer calculations. To do this you create variable names. For example, you simply assign the result of the computation with = operator and specify its name:\n\nans1 = 14 +11 +(23 * 2)\n\nThis time you will notice that you do not see the result of your calculations. R does not assume that just because you created these objects you necessarily want to see them. It is easy enough to view the results; you need to type in the name of the variable you created and execute the command:\n\nans1\n\n[1] 71\n\n\nIn most tutorials, you will notice that a &lt;- is used instead of = operator. This is because in older versions of R, the = sign was not used:\n\nans2 &lt;-  14 +11 +(23 * 2)\nans2\n\n[1] 71\n\n\n\n\n\n\n\n\nImportant\n\n\n\nAlthough a &lt;- is easy to read in code, but for most practical purposes = is quicker to type.\n\n\n\n\n\nAll objects created in R enviroment must be assigned as name. In a spreadsheet, each cell has a row and column reference, e.g. B12, which allows you to call up data by specifying the range of cells they occupy. R does not set out data like this so you must assign labels to everything so you can keep track of them. You need to give your data a name; R expects everything to have a name and this allows great flexibility. Think of these names as like the memory on a calculator; with R you can have loads of different things stored at the same time.\nNames can be more or less any combination of letters and numbers. Any name you create must start with a letter; other than that, you can use numbers and letters freely. The only other characters allowed are the full stop and the underscore character. R is case sensitive so the following are all different:\n\n\n\n\n\n\nImportant\n\n\n\nIt is a good idea to make your names meaningful but short!\n\n\n\n\n\nWithout data R has nothing to do and with must make some datasets. The simplest technique of making objects of elements in r is by concatenate using a c() command\n\nweight = c(28.1, 25.4, 63.24, 45.8, 68.5, 42.6, 45.3, 74.5)\nweight\n\n[1] 28.10 25.40 63.24 45.80 68.50 42.60 45.30 74.50\n\n\nHere you make an object called weight and combine the numbers in the brackets to make it. Each value has to be followed by a comma. The spaces are optional, R ignores them, but they can be useful to aid clarity and avoid mistakes when typing.\n\n\n\nThe base distribution of R can do a lot but often you will find the need to perform some analysis that it cannot do. Because of the nature of R, several people are working to develop new packages that extend the capability of R. These packages are dedicated to specific routines from management, manipulation, analysis, model, and plotting data to reporting and sharing of information.\nIt is fairly simple to find and install these extra packages. One method is to search online but the R website has lists of available packages. You may be able to download a zip file. Then you can install the package from within R using one of the menu commands on the toolbar (under the Packages menu). Alternatively, if you are connected to the Internet you can use the menu to install packages directly.\nThe simplest approach to install packages in R is through a console by simply parse a command\n\ninstall.packages(\"package.name\")\n\n\n\n\n\n\n\nImportant\n\n\n\nYou replace package.name with the name of the package you want.\n\n\n\n\n\nTo load a library of routines into R you use the require() command, e.g.\n\nrequire(\"package.name\")"
  },
  {
    "objectID": "posts/importingData/index.html",
    "href": "posts/importingData/index.html",
    "title": "Importing table files into R",
    "section": "",
    "text": "So far, we’ve looked at several dataset in previous chapter and we have also created ourselves some datasets. While you can do all your data entry work in R or Excel, it is much more common to load data from other sources. Local and international organization have been collecting fisheries dependent and fisheries independent data for years. These historical dataset with fisheries information like fish catch, effort, landing sites, fishing ground and critical habitats can be obtained from several databases—some are open and other closed. Much of the data we download or receive from is either comma-separated value files .csv or and Excel spreadsheets, .xlsx. .csv files are spreadsheets stored as text files - basically Excel files stripped down to the bare minimum - no formatting, no formulas, no macros. You can open and edit them in spreadsheet software like LibreOffice Calc, Google Sheets or Microsoft Excel. Many devices and databases can export data in .csv format, making it a commonly used file format that you are likely to encounter sooner rather than later.\nWhether that be a comma separated (csv) or a tab delimited file, there are multiple functions that can read these data into R. We will stick to loading these data from the tidyverse packages but be aware these are not the only methods for doing this. We will use the tidyverse functions just to maintain consistency with everything else we do. The first package in tidyverse we will use is called readr [@readr], which is a collection of functions to load the tabular data from working directory in our machine into R session. Some of its functions include:\n\nread_csv(): comma separated (CSV) files\nread_tsv(): tab separated files\nread_delim(): general delimited files\nread_fwf(): fixed width files\nread_table(): tabular files where columns are separated by white-space.\nread_log(): web log files\nreadxl reads in Excel files.\n\nBefore we import the data, we need to load the packages that we will use their functions in this chapter\n\nrequire(tidyverse)\nrequire(magrittr)\n\n\n\nA CSV file is a type of file where each line contains a single record, and all the columns are separated from each other via a comma. In order to load data from a file into R, you need its path - that is, you need to tell R where to find the file. Unless you specify otherwise, R will look for files in its current working directory. You can read .csv file using read_csv() function of the readr package [@readr] as shown in the chunk below;\n\nimported.lfq = read_csv(\"dataset/project/tidy_LFQ_sample_4.csv\")\n\nlf4\n\nWe imported tidy_LFQ_sample_4.csv from working directory into R using read_csv() and specify the path to the file in your working directory and store as imported.lfq. If you get an error message, it means thattidy_LFQ_sample_4.csvis not in your working directory. Either move the file to the right directory (remember, you can use rungetwd()` to see what your working directory is) or change your working directory.\n\nimported.lfq = read_csv(\"../data/tidy/tidy_LFQ_sample_4.csv\")\n\nIf you glimpse the dataframe with glimpse() function, you should see the internal structure of the imported.lfq object we just loaded;\n\nimported.lfq %&gt;% \n  glimpse()\n\nRows: 6,185\nColumns: 6\n$ site  &lt;chr&gt; \"Mombasa\", \"Mombasa\", \"Mombasa\", \"Mombasa\", \"Mombasa\", \"Mombasa\"…\n$ date  &lt;date&gt; 2019-04-05, 2019-04-05, 2019-04-05, 2019-04-05, 2019-04-05, 201…\n$ tl_mm &lt;dbl&gt; 184, 185, 145, 189, 175, 165, 181, 176, 164, 154, 188, 186, 179,…\n$ fl_mm &lt;dbl&gt; 169, 169, 134, 173, 161, 153, 165, 163, 148, 142, 173, 173, 164,…\n$ wt_gm &lt;dbl&gt; 59.50, 54.71, 24.15, 61.36, 49.31, 38.54, 49.68, 45.27, 36.26, 3…\n$ sex   &lt;chr&gt; \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\",…\n\n\nThe dataset contains six variables and 6,185 records. The variables site and sex both contain text, and have been imported as character vectors4. The date column has been imported as date format, the variable tl_mm and fl_mm are measured length and have been imported as numeric vector measured in millimeters. The variable wt_gm is the weight of fish measured in grams and also have been imported as numeric vector.\nSo, what can you do in case you need to import data from a file that is not in your working directory? This is a common problem, as many of us store script files and data files in separate folders (or even on separate drives). One option is to use file.choose, which opens a pop-up window that lets you choose which file to open using a graphical interface:\nimported.lfq2 = read_csv(file.choose())\nThis solution work just fine if you just want to open a single file once. But if you want to reuse your code or run it multiple times, you probably don’t want to have to click and select your file each time. Instead, you can specify the path to your file in the call to read_csv.\n\n\n\nCommonly our data is stored as a Excel file. There are several packages that can be used to import Excel files to R. I prefer the readxl package [@readxl], so let’s install that:\ninstall.packages(\"readxl\")\nThe package has read_exel() function that allows us to specify which sheet within the Excel file to read. The function automatically convert the worksheet into a .csv file and read it. Let’s us import the the data in first sheet of the tidy_LFQ_sample_4.xlsx. Is a similar dataset that just imported in the previous section, but is in Excel format. We will use this file to illustrate how to import the excel file into R workspace with readxl package [@readxl].\n\nimported.lfq = readxl::read_excel(\"../data/tidy/tidy_LFQ_sample_4.xlsx\", sheet = 1)\n\n\nimported.lfq\n\n# A tibble: 6,185 × 6\n   site    date                tl_mm fl_mm wt_gm sex  \n   &lt;chr&gt;   &lt;dttm&gt;              &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 Mombasa 2019-04-05 00:00:00   184   169  59.5 M    \n 2 Mombasa 2019-04-05 00:00:00   185   169  54.7 M    \n 3 Mombasa 2019-04-05 00:00:00   145   134  24.2 M    \n 4 Mombasa 2019-04-05 00:00:00   189   173  61.4 M    \n 5 Mombasa 2019-04-05 00:00:00   175   161  49.3 M    \n 6 Mombasa 2019-04-05 00:00:00   165   153  38.5 M    \n 7 Mombasa 2019-04-05 00:00:00   181   165  49.7 M    \n 8 Mombasa 2019-04-05 00:00:00   176   163  45.3 M    \n 9 Mombasa 2019-04-05 00:00:00   164   148  36.3 M    \n10 Mombasa 2019-04-05 00:00:00   154   142  31.9 M    \n# ℹ 6,175 more rows\n\n\n\nimported.lfq %&gt;% \n  skimr::skim()\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n6185\n\n\nNumber of columns\n6\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\nPOSIXct\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsite\n0\n1\n3\n7\n0\n2\n0\n\n\nsex\n0\n1\n1\n1\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ntl_mm\n0\n1\n170.77\n21.08\n97.0\n157.00\n171.00\n183.00\n269.00\n▁▅▇▁▁\n\n\nfl_mm\n0\n1\n156.00\n19.26\n18.1\n144.00\n156.00\n168.00\n241.00\n▁▁▅▇▁\n\n\nwt_gm\n0\n1\n46.03\n19.51\n7.0\n32.77\n43.59\n55.28\n194.18\n▇▆▁▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ndate\n0\n1\n2016-03-31\n2020-09-11\n2020-02-25\n42"
  },
  {
    "objectID": "posts/importingData/index.html#importing-data",
    "href": "posts/importingData/index.html#importing-data",
    "title": "Importing table files into R",
    "section": "",
    "text": "So far, we’ve looked at several dataset in previous chapter and we have also created ourselves some datasets. While you can do all your data entry work in R or Excel, it is much more common to load data from other sources. Local and international organization have been collecting fisheries dependent and fisheries independent data for years. These historical dataset with fisheries information like fish catch, effort, landing sites, fishing ground and critical habitats can be obtained from several databases—some are open and other closed. Much of the data we download or receive from is either comma-separated value files .csv or and Excel spreadsheets, .xlsx. .csv files are spreadsheets stored as text files - basically Excel files stripped down to the bare minimum - no formatting, no formulas, no macros. You can open and edit them in spreadsheet software like LibreOffice Calc, Google Sheets or Microsoft Excel. Many devices and databases can export data in .csv format, making it a commonly used file format that you are likely to encounter sooner rather than later.\nWhether that be a comma separated (csv) or a tab delimited file, there are multiple functions that can read these data into R. We will stick to loading these data from the tidyverse packages but be aware these are not the only methods for doing this. We will use the tidyverse functions just to maintain consistency with everything else we do. The first package in tidyverse we will use is called readr [@readr], which is a collection of functions to load the tabular data from working directory in our machine into R session. Some of its functions include:\n\nread_csv(): comma separated (CSV) files\nread_tsv(): tab separated files\nread_delim(): general delimited files\nread_fwf(): fixed width files\nread_table(): tabular files where columns are separated by white-space.\nread_log(): web log files\nreadxl reads in Excel files.\n\nBefore we import the data, we need to load the packages that we will use their functions in this chapter\n\nrequire(tidyverse)\nrequire(magrittr)\n\n\n\nA CSV file is a type of file where each line contains a single record, and all the columns are separated from each other via a comma. In order to load data from a file into R, you need its path - that is, you need to tell R where to find the file. Unless you specify otherwise, R will look for files in its current working directory. You can read .csv file using read_csv() function of the readr package [@readr] as shown in the chunk below;\n\nimported.lfq = read_csv(\"dataset/project/tidy_LFQ_sample_4.csv\")\n\nlf4\n\nWe imported tidy_LFQ_sample_4.csv from working directory into R using read_csv() and specify the path to the file in your working directory and store as imported.lfq. If you get an error message, it means thattidy_LFQ_sample_4.csvis not in your working directory. Either move the file to the right directory (remember, you can use rungetwd()` to see what your working directory is) or change your working directory.\n\nimported.lfq = read_csv(\"../data/tidy/tidy_LFQ_sample_4.csv\")\n\nIf you glimpse the dataframe with glimpse() function, you should see the internal structure of the imported.lfq object we just loaded;\n\nimported.lfq %&gt;% \n  glimpse()\n\nRows: 6,185\nColumns: 6\n$ site  &lt;chr&gt; \"Mombasa\", \"Mombasa\", \"Mombasa\", \"Mombasa\", \"Mombasa\", \"Mombasa\"…\n$ date  &lt;date&gt; 2019-04-05, 2019-04-05, 2019-04-05, 2019-04-05, 2019-04-05, 201…\n$ tl_mm &lt;dbl&gt; 184, 185, 145, 189, 175, 165, 181, 176, 164, 154, 188, 186, 179,…\n$ fl_mm &lt;dbl&gt; 169, 169, 134, 173, 161, 153, 165, 163, 148, 142, 173, 173, 164,…\n$ wt_gm &lt;dbl&gt; 59.50, 54.71, 24.15, 61.36, 49.31, 38.54, 49.68, 45.27, 36.26, 3…\n$ sex   &lt;chr&gt; \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\",…\n\n\nThe dataset contains six variables and 6,185 records. The variables site and sex both contain text, and have been imported as character vectors4. The date column has been imported as date format, the variable tl_mm and fl_mm are measured length and have been imported as numeric vector measured in millimeters. The variable wt_gm is the weight of fish measured in grams and also have been imported as numeric vector.\nSo, what can you do in case you need to import data from a file that is not in your working directory? This is a common problem, as many of us store script files and data files in separate folders (or even on separate drives). One option is to use file.choose, which opens a pop-up window that lets you choose which file to open using a graphical interface:\nimported.lfq2 = read_csv(file.choose())\nThis solution work just fine if you just want to open a single file once. But if you want to reuse your code or run it multiple times, you probably don’t want to have to click and select your file each time. Instead, you can specify the path to your file in the call to read_csv.\n\n\n\nCommonly our data is stored as a Excel file. There are several packages that can be used to import Excel files to R. I prefer the readxl package [@readxl], so let’s install that:\ninstall.packages(\"readxl\")\nThe package has read_exel() function that allows us to specify which sheet within the Excel file to read. The function automatically convert the worksheet into a .csv file and read it. Let’s us import the the data in first sheet of the tidy_LFQ_sample_4.xlsx. Is a similar dataset that just imported in the previous section, but is in Excel format. We will use this file to illustrate how to import the excel file into R workspace with readxl package [@readxl].\n\nimported.lfq = readxl::read_excel(\"../data/tidy/tidy_LFQ_sample_4.xlsx\", sheet = 1)\n\n\nimported.lfq\n\n# A tibble: 6,185 × 6\n   site    date                tl_mm fl_mm wt_gm sex  \n   &lt;chr&gt;   &lt;dttm&gt;              &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 Mombasa 2019-04-05 00:00:00   184   169  59.5 M    \n 2 Mombasa 2019-04-05 00:00:00   185   169  54.7 M    \n 3 Mombasa 2019-04-05 00:00:00   145   134  24.2 M    \n 4 Mombasa 2019-04-05 00:00:00   189   173  61.4 M    \n 5 Mombasa 2019-04-05 00:00:00   175   161  49.3 M    \n 6 Mombasa 2019-04-05 00:00:00   165   153  38.5 M    \n 7 Mombasa 2019-04-05 00:00:00   181   165  49.7 M    \n 8 Mombasa 2019-04-05 00:00:00   176   163  45.3 M    \n 9 Mombasa 2019-04-05 00:00:00   164   148  36.3 M    \n10 Mombasa 2019-04-05 00:00:00   154   142  31.9 M    \n# ℹ 6,175 more rows\n\n\n\nimported.lfq %&gt;% \n  skimr::skim()\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n6185\n\n\nNumber of columns\n6\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\nPOSIXct\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsite\n0\n1\n3\n7\n0\n2\n0\n\n\nsex\n0\n1\n1\n1\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ntl_mm\n0\n1\n170.77\n21.08\n97.0\n157.00\n171.00\n183.00\n269.00\n▁▅▇▁▁\n\n\nfl_mm\n0\n1\n156.00\n19.26\n18.1\n144.00\n156.00\n168.00\n241.00\n▁▁▅▇▁\n\n\nwt_gm\n0\n1\n46.03\n19.51\n7.0\n32.77\n43.59\n55.28\n194.18\n▇▆▁▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ndate\n0\n1\n2016-03-31\n2020-09-11\n2020-02-25\n42"
  },
  {
    "objectID": "posts/importingData/index.html#saving-and-exporting-your-data",
    "href": "posts/importingData/index.html#saving-and-exporting-your-data",
    "title": "Importing table files into R",
    "section": "Saving and exporting your data",
    "text": "Saving and exporting your data\nIn many a case, data manipulation is a huge part of statistical work, and of course you want to be able to save a data frame after manipulating it. There are two options for doing this in R - you can either export the data as e.g. a .csv or a .xlsx file, or save it in R format as an .RData file.\n\nExporting data\nJust as we used the functions read_csv and read_excel to import data, we can use write_csvto export it. The code below saves the bookstore data frame as a .csv file file, which will be created in the current working directory. If you wish to store\n\nimported.lfq %&gt;%  write_csv(\"assets/fao_paul_dataset/tidy/tidy_lfq.csv\")\n\n\nSaving and loading R data\nBeing able to export to different spreadsheet formats is very useful, but sometimes you want to save an object that can’t be saved in a spreadsheet format. For instance, you may wish to save a multiple processed data, functions and formula that you’ve created. .RData files can be used to store one or more R objects. To save the objects bookstore and age in a .Rdata file, we can use the save function:\n\nsave.image(\"assets/fao_paul_dataset/tidy/myData.RData\")"
  },
  {
    "objectID": "posts/thebasics/index.html",
    "href": "posts/thebasics/index.html",
    "title": "R and Rstudio",
    "section": "",
    "text": "What you will learn in this post\n\nThe R program\nWhy learn R programming\nInstallation of R, Rstudio and R packages\nIntroduction to Rmarkdown\nLoading packages in R\n\n\n\nR is a language and package-based software environment that provides a wide variety of functions for statistical computing and graphics. It is available free at the Comprehensive R Archive Network (CRAN) on the Internet. It is also open source and available for all major operating systems. Because R is a programming language it can seem a bit daunting; you have to type in commands to get it to work; however, it does have a Graphical User Interface (GUI) to make things easier and it is not so different from typing formula into Excel. R cope with a huge variety of analyses and someone have written a routine to perform nearly any type of calculation. R comes with a powerful set of routines built in at the start but there are some useful extra packages available on the CRAN website. These include routines for more specialized analyses covering many aspects of scientific research as well as other fields (e.g. economics). There are many advantages in using R:\n\nIt is free, always a consideration.\nIt is open source; this means that many bugs are ironed out. It is extremely powerful and will handle very complex analyses as easily as simple ones.\nIt handle a wide variety of analyses. This is one of the most important features: you only need to know how to use R and you can do more or less any type of analysis; there is no need to learn several different (and expensive) programs.\nIt uses simple text commands. At first this seems hard but it is actually quite easy. The upshot is that you can build up a library of commands and copy/paste them when you need them.\nDocumentation. There is a wealth of help for R. The CRAN site itself hosts a lot of material but there are also other websites that provide examples and documentation. Simply adding CRAN to a web search command will bring up plenty of options.\n\n\n\nR provides a wide variety of statistical (linear and nonlinear modelling, classical statistical tests, time-series analysis, classification, clustering, …) and graphical techniques, and is highly extensible. The R language serves as a vehicle of choice for research in statistical methodology, and an Open Source route to participation in that activity. One of R’s strengths is the ease with which well-designed publication-quality plots can be produced, including mathematical symbols and formulae where needed. R is also available as Free Software under the terms of the Free Software Foundation’s GNU General Public License in source code form. It compiles and runs on a wide variety of UNIX platforms and similar systems (including FreeBSD and Linux), Windows and MacOS.\n\n\n\n\n\n\nTip\n\n\n\nMany users think of R as a statistics system and forget that it as an environment within which statistical techniques are implemented.\n\n\n\n\n\nA new major version of R comes out once a year, and there are 2-3 minor releases each year. It’s a good idea to update regularly. Upgrading can be a bit of a hassle, especially for major versions, which require you to re-install all your packages, but putting it off only makes it worse. Getting R is easy via the Internet. The R Project website is a vast enterprise and has local mirror sites in many countries.\n\nThe first step is to go to https://cran.r-project.org/. The project’s website is the main official information source and can be reached from ?@fig-rproject.\n\n\n\n\n\n\nGetting R from the R Project website. Click the download link and select the nearest mirror site\n\n\n\n\n\nClick Download R for Mac/Windows. Once you have clicked the download link (@cran), you have the chance to select a mirror site. These mirrors sites are hosted in servers across the world and using a local one will generally result in a speedier download.\nClick the link appropriate for your system (Linux, Mac, Windows). Once you have selected a mirror site, you can click the link that relates to your operating system (@Rdownload). If you use a Mac then you will go to a page where you can select the best option for you (there are versions for various flavours of OSX). If you use Windows then you will go to a Windows-specific page. If you are a Linux user then read the documentation; you generally install R through the terminal rather than via the web page.\n\n\n\n\n\n\nGetting R from the R Project website. You can select the version that is specific to your operating system\n\n\n\n\n\nNow the final step is to click the link and download the installer file, which will download in the usual manner according to the setup of your computer.\n\nOnce you have downloaded the install file, you need to run it to get R onto your computer. If you use a Mac you need to double-click the disk image file to mount the virtual disk. Then double-click the package file to install. If you use Windows, then you need to find the EXE file and run it. The installer will copy the relevant files and you will soon be ready to run R.\n\n\n\nNow R is ready to work for you. Launch R using the regular methods specific to your operating system. If you added a desktop icon or a quick launch button then you can use these or run R from the Applications or Windows Start button.\nR is mainly used as an interactive program — you give R a command and it responds to that command. The result may influence the next command that you give R. Between the time you start R and it gives you the first prompt, any number of things might happen (depending on your installation). But the thing that always happens is that some number of packages are attached to the search list. You can see what those packages are in your case with the command:\n\nsearch()\n\n\n\n\n\n\n\nTip\n\n\n\nYou don’t type the “&gt;” — that is the R prompt, but you do hit the return key at the end of the line\n\n\nThe first item on the search list is the “global environment”. This is your work space where the objects that you create during the R session will be.\nYou quit R with the command:\n\nq()\n\nR will ask you if you want to save or delete the global environment when you quit. If you do save the global environment, then you can start another R session with those objects in the global environment at the start of the new session. You are saving the objects in the global environment, you are not saving the session. In particular, you are not saving the search list.\n\n\n\nRStudio is an integrated development environment (IDE) for R programming [@rstudio]. RStudio is a set of integrated tools that allows for a more user-friendly experience for using R. Although you will likely use RStudio as your main console and editor, you must first install R, as RStudio uses R behind the scenes. Similar to R, RStudio is freely-available, cross-platform, and open-source.\nDownload and install it from http://www.rstudio.com/download. RStudio is updated a couple of times a year. When a new version is available, RStudio will let you know. It’s a good idea to upgrade regularly so you can take advantage of the latest and greatest features.\n\nGo to https://www.rstudio.com/products/rstudio/download/\nClick Download under RStudio Desktop.\nClick the link appropriate for your system (Linux, Mac, Windows)\nFollow the instructions of the Installer.\n\n\n\n\nWhenever we want to work with R, we’ll open RStudio. RStudio interfaces directly with R, and is an Integrated Development Environment (IDE). This means that RStudio comes with built-in features that make using R a little easier. When you start RStudio, you’ll see four key panels in the interface shown in Figure 1. We’ll refer to these four “panes” as the editor, the Console, the Environment, and the Files panes. The large square on the left is the Console pane, the square in the top right is the Environment pane, and the square in the bottom right is the Files pane. As you work with R more, you’ll find yourself using the tabs within each of the panes.\nWhen we create a new file, such as an R script, an R Markdown file, or a Shiny app, RStudio will open a fourth pane, known as the source or editor pane. The source pane should show up as a square in the top left. We can open up an .R script in the source pane by going to File, selecting New File, and then selecting R Script:\n\n\n\n\n\n\n\n\nFigure 1: The interface of Rstudio IDE with four key panels\n\n\n\n\n\nWe are going to have our first experience with R through RMarkdown, so let’s do the following.\n\n\n\n\nLike Excel, the power of R comes not from doing small operations individually (like 8*22.3). But rather R’s power comes from being able to operate on whole suites of numbers and datasets. And also like Excel, some of the biggest power in R is that there are built-in functions that you can use in your analyses (and, as we’ll see, R users can easily create and share functions, and it is this open source developer and contributor community that makes R so awesome).\nR has a mind-blowing collection of built-in functions that are used with the same syntax: function name with parentheses around what the function needs to do what it is supposed to do. We’ve seen a few functions already: we’ve seen plot() and summary().\nFunctions always have the same structure: a name, parentheses, and arguments that you can specify. function_name(arguments). When we talk about function names, we use the convention function_name() (the name with empty parentheses), but in practice, we usually supply arguments to the function function_name(arguments) so that it works on some data. Let’s see a few more function examples.\nLike in Excel, there is a function called “sum” to calculate a total. In R, it is spelled lowercase: sum(). (As I type in the Console, R will provide suggestions). Let’s use the sum() function to calculate the sum of all the distances traveled in the cars dataset. We specify a single column of a dataset using the $ operator:\nsum(cars$dist)\nAnother function is simply called c(); which combines values together.\nSo let’s create a new R code chunk. And we’ll write:\n\nc(1, 7:9)\n\n[1] 1 7 8 9\n\n\n\n\n\n\n\n\nNote\n\n\n\nsome functions don’t require arguments: try typing date() into the Console.\n\n\n\nBe sure to type the parentheses (date()); otherwise R will return the code behind the date() function rather than the output that you want/expect.\n\nSo you can see that this combines these values all into the same place, which is called a vector here. We could also do this with a non-numeric examples, which are called “strings”:\n\nc(\"San Francisco\", \"Cal Academy\") \n\n[1] \"San Francisco\" \"Cal Academy\"  \n\n\nWe need to put quotes around non-numeric values so that R does not interpret them as an object. It would definitely get grumpy and give us an error that it did not have an object by these names. And you see that R also prints in quotes. We can also put functions inside of other functions.This is called nested functions. When we add another function inside a function, R will evaluate them from the inside-out.\n\nc(sum(cars$dist), \"San Francisco\", \"Cal Academy\") \n\n[1] \"2149\"          \"San Francisco\" \"Cal Academy\"  \n\n\nSo R first evaluated the sum(cars$dist), and then evaluates the c() statement. This example demonstrates another key idea in R: the idea of classes. The output R provides is called a vector, and everything within that vector has to be the same type of thing: we can’t have both numbers and words inside. So here R is able to first calculate sum(cars$dist) as a number, but then c() will turn that number into a text, called a “string” in R: you see that it is in quotes. It is no longer a numeric, it is a string.\nThis is a big difference between R and Excel, since Excel allows you to have a mix of text and numeric in the same column or row. R’s way can feel restrictive, but it is also more predictable. In Excel, you might have a single number in your whole sheet that Excel is silently interpreting as text so it is causing errors in the analyses. In R, the whole column will be the same type. This can still cause trouble, but that is where the good practices that we are learning together can help minimize that kind of trouble.\n\n\n\nSo far we’ve been using a couple functions that are included with R out-of-the-box such as plot() and c(). We say that these functions are from “Base R”. But, one of the amazing things about R is its users’ community that create new functions and packages. An R package is a collection of functions, data, and documentation that extends the capabilities of base R. Using packages is key to the successful use of R. The majority of the packages that you will learn in this manual are part of the so-called tidyverse, which is an ecosystem of packages that share a common philosophy of data and R programming, and are designed to work together naturally.\nThe tidyverse is a coherent system of packages for data manipulation, exploration and visualization that share a common design philosophy. The Tidyverse [@tidyverse] packages form a core set of functions that will allow us to perform most any type of data cleaning or analysis we will need to do. We will use the following packages from the tidyverse\n\nggplot2—for data visualisation.\ndplyr—for data manipulation.\ntidyr—for data tidying.\nreadr—for data import.\npurrr—for functional programming.\ntibble—for tibbles, a modern re-imagining of data frames.\n\n\n\nFor us to use tidyverse and any other package that is not included in Base R, we must install them first. The easiest way to install packages is to use the install.packages() command. For example, let’s go ahead and install the tidyverse package on your machine:\ninstall.packages(\"tidyverse\")\nOn your own computer, type that line of code in the console, and then press enter to run it. R will download the packages from CRAN and install it to your computer. If you have problems installing, make sure that you are connected to the internet, and that https://cloud.r-project.org/ isn’t blocked by your firewall or proxy.\n\n\n\nNow we’ve installed the package, but we need to tell R that we are going to use some functions within the tidyverse package. With exception to base R package, add on package that are installed must be called with either library or require functions to make their tools accessible in R session. Let’s us load the tidyverse package we just installed\nrequire(tidyverse)\nYou notice that when we load tidyverse, it popup a notification message showing the loaded packages and the conflicts they bring in. These conflicts happen when packages have functions with the same names as other functions. This is OK when you prefer the function in a package like tidyverse rather than some other function. Basically the last package loaded in will mask over other functions if they have common names.\n\n\n\nThere are many other excellent packages that are not part of the tidyverse, because they solve problems in a different domain, or are designed with a different set of underlying principles. This doesn’t make them better or worse, just different. In other words, the complement to the tidyverse is not the messyverse, but many other universes of interrelated packages [@r4ds]. As you tackle more data science projects with R, you’ll learn new packages and new ways of thinking about data. In this course we’ll use several data packages from outside the tidyverse:\nadditional.packages = c(\"metR\", \"cowplot\", \"ggspatial\", \"patchwork\", \"ggrepel\",\n                        \"oce\", \"tmap\", \"leaflet\", \"bookdown\", \"blogdown\", \n                        \"rmarkdown\", \"tinytex\", \"tidymodels\", \"terra\", \n                        \"tidyterra\")\n\ninstall.packages(additional.packages)\n\n\n\nShow version number of R and installed OS\nsessionInfo()\nshow R version\netRversion()\nshow current working directory\ngetwd()\nchange working directory to a user defined location\nsetwd(\"C:/...\")\nlist all packages in the R package library\nlibrary()\nopen download mirrors list for package installation\navailable.packages()\ndownload R packages from CRAN repository to a local folder\n`download.packages(\"package_name\", \"download_directory\")\nupdate all packages\nupdate.packages(checkBuilt=TRUE)\nshow version numbers of R packages, dependencies of packages, recommended packages, license info and builded R version number\ninstalled.packages()\nparses and returns the description file of a package\npackageDescription(\"package_name\")\nremove packages\n`remove.packages(\"package_name\", \"installed_directory\")\nshow license info\nlicense()\ndisplay citation\ncitation()\nload packagesinto the session\nrequire(package_name)\nrunning time of R\nproc.time()\ncurrent memory usage\nmemory.size()\ntotal available memory\nmemory.limit()\nterminate an R session\nq()\ndisplay warning messages\nwarnings()\n\n\n\nBoth online and offline help documentations and manuals for R are available. You can start help while using R with help.start() function from the console. For more help, you can use online documentations from the official R website by using these links: + Help page: https://www.r-project.org/help.html + Manuals page: https://cran.r-project.org/manuals.html + Frequently Asked Questions (FAQs) Page: https://cran.r-project.org/faqs.html\nEvery function available to you should have a help page, and you access it by typing a question mark preceding the function name in the Console. Let’s have a deeper look at the arguments for plot(), using the help pages.\n    ?plot\nThis opens up the correct page in the Help Tab in the bottom-right of the RStudio IDE. You can also click on the tab and type in the function name in the search bar.\nAll help pages will have the same format, here is how I look at it:\nThe help page tells the name of the package in the top left, and broken down into sections:\n\nHelp pages\n- Description: An extended description of what the function does. - Usage: The arguments of the function and their default values. - Arguments: An explanation of the data each argument is expecting. - Details: Any important details to be aware of. - Value: The data the function returns. - See Also: Any related functions you might find useful. - Examples: Some examples for how to use the function.\n\nWhen I look at a help page, I start with the Description to see if I am in the right place for what I need to do. Reading the description for plot lets me know that yup, this is the function I want.\nI next look at the usage and arguments, which give me a more concrete view into what the function does. plot requires arguments for x and y. But we passed only one argument to plot(): we passed the cars dataset (plot(cars)). R is able to understand that it should use the two columns in that dataset as x and y, and it does so based on order: the first column “speed” becomes x and the second column “dist” becomes y. The ... means that there are many other arguments we can pass to plot(), which we should expect: I think we can all agree that it would be nice to have the option of making this figure a little more beautiful and compelling. Glancing at some of the arguments, we can understand here to be about the style of the plots.\nNext, I usually scroll down to the bottom to the examples. This is where I can actually see how the function is used, and I can also paste those examples into the Console to see their output. Let’s try it:\n\n\n\n\n\n\n\n\nFigure 2: A cosine function of x\n\n\n\n\n\n\n\n\n\nR is a programming language, and just like any language, it has different dialects. When you read about R online, you’ll frequently see people mentioning the words “base” and “tidyverse.” These are the two most common dialects of R. Base R is just that, R in its purest form. The tidyverse is a collection of add-on packages for working with different types of data. The two are fully compatible, and you can mix and match as much as you like. Both ggplot2 and magrittr are part of the tidyverse.\nIn recent years, the tidyverse has been heavily promoted as being “modern” R which “makes data science faster, easier and more fun.” You should believe the hype. The tidyverse is marvellous. But if you only learn tidyverse R, you will miss out on much of what R has to offer. Base R is just as marvellous, and can definitely make data science as fast, easy and fun as the tidyverse. Besides, nobody uses just base R anyway - there are a ton of non-tidyverse packages that extend and enrich R in exciting new ways. Perhaps “extended R” would be better names for the non-tidyverse dialect.\nAnyone who tells you to just learn one of these dialects is wrong. Both are great, they work extremely well together, and they are similar enough that you shouldn’t limit yourself to just mastering one of them. This book will show you both base R and tidyverse solutions to problems, so that you can decide for yourself which is faster, easier, and more fun.\nA defining property of the tidyverse is that there are separate functions for everything, which is perfect for code that relies on pipes. In contrast, base R uses fewer functions, but with more parameters, to perform the same tasks. If you use tidyverse solutions there is a good chance that there exists a function which performs exactly the task you’re going to do with its default settings. This is great (once again, especially if you want to use pipes), but it means that there are many more functions to master for tidyverse users, whereas you can make do with much fewer in base R. You will spend more time looking up function arguments when working with base R (which fortunately is fairly straightforward using the ? documentation), but on the other hand, looking up arguments for a function that you know the name of is easier than finding a function that does something very specific that you don’t know the name of. There are advantages and disadvantages to both approaches."
  },
  {
    "objectID": "posts/thebasics/index.html#the-r-program",
    "href": "posts/thebasics/index.html#the-r-program",
    "title": "R and Rstudio",
    "section": "",
    "text": "R is a language and package-based software environment that provides a wide variety of functions for statistical computing and graphics. It is available free at the Comprehensive R Archive Network (CRAN) on the Internet. It is also open source and available for all major operating systems. Because R is a programming language it can seem a bit daunting; you have to type in commands to get it to work; however, it does have a Graphical User Interface (GUI) to make things easier and it is not so different from typing formula into Excel. R cope with a huge variety of analyses and someone have written a routine to perform nearly any type of calculation. R comes with a powerful set of routines built in at the start but there are some useful extra packages available on the CRAN website. These include routines for more specialized analyses covering many aspects of scientific research as well as other fields (e.g. economics). There are many advantages in using R:\n\nIt is free, always a consideration.\nIt is open source; this means that many bugs are ironed out. It is extremely powerful and will handle very complex analyses as easily as simple ones.\nIt handle a wide variety of analyses. This is one of the most important features: you only need to know how to use R and you can do more or less any type of analysis; there is no need to learn several different (and expensive) programs.\nIt uses simple text commands. At first this seems hard but it is actually quite easy. The upshot is that you can build up a library of commands and copy/paste them when you need them.\nDocumentation. There is a wealth of help for R. The CRAN site itself hosts a lot of material but there are also other websites that provide examples and documentation. Simply adding CRAN to a web search command will bring up plenty of options.\n\n\n\nR provides a wide variety of statistical (linear and nonlinear modelling, classical statistical tests, time-series analysis, classification, clustering, …) and graphical techniques, and is highly extensible. The R language serves as a vehicle of choice for research in statistical methodology, and an Open Source route to participation in that activity. One of R’s strengths is the ease with which well-designed publication-quality plots can be produced, including mathematical symbols and formulae where needed. R is also available as Free Software under the terms of the Free Software Foundation’s GNU General Public License in source code form. It compiles and runs on a wide variety of UNIX platforms and similar systems (including FreeBSD and Linux), Windows and MacOS.\n\n\n\n\n\n\nTip\n\n\n\nMany users think of R as a statistics system and forget that it as an environment within which statistical techniques are implemented.\n\n\n\n\n\nA new major version of R comes out once a year, and there are 2-3 minor releases each year. It’s a good idea to update regularly. Upgrading can be a bit of a hassle, especially for major versions, which require you to re-install all your packages, but putting it off only makes it worse. Getting R is easy via the Internet. The R Project website is a vast enterprise and has local mirror sites in many countries.\n\nThe first step is to go to https://cran.r-project.org/. The project’s website is the main official information source and can be reached from ?@fig-rproject.\n\n\n\n\n\n\nGetting R from the R Project website. Click the download link and select the nearest mirror site\n\n\n\n\n\nClick Download R for Mac/Windows. Once you have clicked the download link (@cran), you have the chance to select a mirror site. These mirrors sites are hosted in servers across the world and using a local one will generally result in a speedier download.\nClick the link appropriate for your system (Linux, Mac, Windows). Once you have selected a mirror site, you can click the link that relates to your operating system (@Rdownload). If you use a Mac then you will go to a page where you can select the best option for you (there are versions for various flavours of OSX). If you use Windows then you will go to a Windows-specific page. If you are a Linux user then read the documentation; you generally install R through the terminal rather than via the web page.\n\n\n\n\n\n\nGetting R from the R Project website. You can select the version that is specific to your operating system\n\n\n\n\n\nNow the final step is to click the link and download the installer file, which will download in the usual manner according to the setup of your computer.\n\nOnce you have downloaded the install file, you need to run it to get R onto your computer. If you use a Mac you need to double-click the disk image file to mount the virtual disk. Then double-click the package file to install. If you use Windows, then you need to find the EXE file and run it. The installer will copy the relevant files and you will soon be ready to run R.\n\n\n\nNow R is ready to work for you. Launch R using the regular methods specific to your operating system. If you added a desktop icon or a quick launch button then you can use these or run R from the Applications or Windows Start button.\nR is mainly used as an interactive program — you give R a command and it responds to that command. The result may influence the next command that you give R. Between the time you start R and it gives you the first prompt, any number of things might happen (depending on your installation). But the thing that always happens is that some number of packages are attached to the search list. You can see what those packages are in your case with the command:\n\nsearch()\n\n\n\n\n\n\n\nTip\n\n\n\nYou don’t type the “&gt;” — that is the R prompt, but you do hit the return key at the end of the line\n\n\nThe first item on the search list is the “global environment”. This is your work space where the objects that you create during the R session will be.\nYou quit R with the command:\n\nq()\n\nR will ask you if you want to save or delete the global environment when you quit. If you do save the global environment, then you can start another R session with those objects in the global environment at the start of the new session. You are saving the objects in the global environment, you are not saving the session. In particular, you are not saving the search list.\n\n\n\nRStudio is an integrated development environment (IDE) for R programming [@rstudio]. RStudio is a set of integrated tools that allows for a more user-friendly experience for using R. Although you will likely use RStudio as your main console and editor, you must first install R, as RStudio uses R behind the scenes. Similar to R, RStudio is freely-available, cross-platform, and open-source.\nDownload and install it from http://www.rstudio.com/download. RStudio is updated a couple of times a year. When a new version is available, RStudio will let you know. It’s a good idea to upgrade regularly so you can take advantage of the latest and greatest features.\n\nGo to https://www.rstudio.com/products/rstudio/download/\nClick Download under RStudio Desktop.\nClick the link appropriate for your system (Linux, Mac, Windows)\nFollow the instructions of the Installer.\n\n\n\n\nWhenever we want to work with R, we’ll open RStudio. RStudio interfaces directly with R, and is an Integrated Development Environment (IDE). This means that RStudio comes with built-in features that make using R a little easier. When you start RStudio, you’ll see four key panels in the interface shown in Figure 1. We’ll refer to these four “panes” as the editor, the Console, the Environment, and the Files panes. The large square on the left is the Console pane, the square in the top right is the Environment pane, and the square in the bottom right is the Files pane. As you work with R more, you’ll find yourself using the tabs within each of the panes.\nWhen we create a new file, such as an R script, an R Markdown file, or a Shiny app, RStudio will open a fourth pane, known as the source or editor pane. The source pane should show up as a square in the top left. We can open up an .R script in the source pane by going to File, selecting New File, and then selecting R Script:\n\n\n\n\n\n\n\n\nFigure 1: The interface of Rstudio IDE with four key panels\n\n\n\n\n\nWe are going to have our first experience with R through RMarkdown, so let’s do the following."
  },
  {
    "objectID": "posts/thebasics/index.html#r-functions",
    "href": "posts/thebasics/index.html#r-functions",
    "title": "R and Rstudio",
    "section": "",
    "text": "Like Excel, the power of R comes not from doing small operations individually (like 8*22.3). But rather R’s power comes from being able to operate on whole suites of numbers and datasets. And also like Excel, some of the biggest power in R is that there are built-in functions that you can use in your analyses (and, as we’ll see, R users can easily create and share functions, and it is this open source developer and contributor community that makes R so awesome).\nR has a mind-blowing collection of built-in functions that are used with the same syntax: function name with parentheses around what the function needs to do what it is supposed to do. We’ve seen a few functions already: we’ve seen plot() and summary().\nFunctions always have the same structure: a name, parentheses, and arguments that you can specify. function_name(arguments). When we talk about function names, we use the convention function_name() (the name with empty parentheses), but in practice, we usually supply arguments to the function function_name(arguments) so that it works on some data. Let’s see a few more function examples.\nLike in Excel, there is a function called “sum” to calculate a total. In R, it is spelled lowercase: sum(). (As I type in the Console, R will provide suggestions). Let’s use the sum() function to calculate the sum of all the distances traveled in the cars dataset. We specify a single column of a dataset using the $ operator:\nsum(cars$dist)\nAnother function is simply called c(); which combines values together.\nSo let’s create a new R code chunk. And we’ll write:\n\nc(1, 7:9)\n\n[1] 1 7 8 9\n\n\n\n\n\n\n\n\nNote\n\n\n\nsome functions don’t require arguments: try typing date() into the Console.\n\n\n\nBe sure to type the parentheses (date()); otherwise R will return the code behind the date() function rather than the output that you want/expect.\n\nSo you can see that this combines these values all into the same place, which is called a vector here. We could also do this with a non-numeric examples, which are called “strings”:\n\nc(\"San Francisco\", \"Cal Academy\") \n\n[1] \"San Francisco\" \"Cal Academy\"  \n\n\nWe need to put quotes around non-numeric values so that R does not interpret them as an object. It would definitely get grumpy and give us an error that it did not have an object by these names. And you see that R also prints in quotes. We can also put functions inside of other functions.This is called nested functions. When we add another function inside a function, R will evaluate them from the inside-out.\n\nc(sum(cars$dist), \"San Francisco\", \"Cal Academy\") \n\n[1] \"2149\"          \"San Francisco\" \"Cal Academy\"  \n\n\nSo R first evaluated the sum(cars$dist), and then evaluates the c() statement. This example demonstrates another key idea in R: the idea of classes. The output R provides is called a vector, and everything within that vector has to be the same type of thing: we can’t have both numbers and words inside. So here R is able to first calculate sum(cars$dist) as a number, but then c() will turn that number into a text, called a “string” in R: you see that it is in quotes. It is no longer a numeric, it is a string.\nThis is a big difference between R and Excel, since Excel allows you to have a mix of text and numeric in the same column or row. R’s way can feel restrictive, but it is also more predictable. In Excel, you might have a single number in your whole sheet that Excel is silently interpreting as text so it is causing errors in the analyses. In R, the whole column will be the same type. This can still cause trouble, but that is where the good practices that we are learning together can help minimize that kind of trouble."
  },
  {
    "objectID": "posts/thebasics/index.html#packages",
    "href": "posts/thebasics/index.html#packages",
    "title": "R and Rstudio",
    "section": "",
    "text": "So far we’ve been using a couple functions that are included with R out-of-the-box such as plot() and c(). We say that these functions are from “Base R”. But, one of the amazing things about R is its users’ community that create new functions and packages. An R package is a collection of functions, data, and documentation that extends the capabilities of base R. Using packages is key to the successful use of R. The majority of the packages that you will learn in this manual are part of the so-called tidyverse, which is an ecosystem of packages that share a common philosophy of data and R programming, and are designed to work together naturally.\nThe tidyverse is a coherent system of packages for data manipulation, exploration and visualization that share a common design philosophy. The Tidyverse [@tidyverse] packages form a core set of functions that will allow us to perform most any type of data cleaning or analysis we will need to do. We will use the following packages from the tidyverse\n\nggplot2—for data visualisation.\ndplyr—for data manipulation.\ntidyr—for data tidying.\nreadr—for data import.\npurrr—for functional programming.\ntibble—for tibbles, a modern re-imagining of data frames.\n\n\n\nFor us to use tidyverse and any other package that is not included in Base R, we must install them first. The easiest way to install packages is to use the install.packages() command. For example, let’s go ahead and install the tidyverse package on your machine:\ninstall.packages(\"tidyverse\")\nOn your own computer, type that line of code in the console, and then press enter to run it. R will download the packages from CRAN and install it to your computer. If you have problems installing, make sure that you are connected to the internet, and that https://cloud.r-project.org/ isn’t blocked by your firewall or proxy.\n\n\n\nNow we’ve installed the package, but we need to tell R that we are going to use some functions within the tidyverse package. With exception to base R package, add on package that are installed must be called with either library or require functions to make their tools accessible in R session. Let’s us load the tidyverse package we just installed\nrequire(tidyverse)\nYou notice that when we load tidyverse, it popup a notification message showing the loaded packages and the conflicts they bring in. These conflicts happen when packages have functions with the same names as other functions. This is OK when you prefer the function in a package like tidyverse rather than some other function. Basically the last package loaded in will mask over other functions if they have common names.\n\n\n\nThere are many other excellent packages that are not part of the tidyverse, because they solve problems in a different domain, or are designed with a different set of underlying principles. This doesn’t make them better or worse, just different. In other words, the complement to the tidyverse is not the messyverse, but many other universes of interrelated packages [@r4ds]. As you tackle more data science projects with R, you’ll learn new packages and new ways of thinking about data. In this course we’ll use several data packages from outside the tidyverse:\nadditional.packages = c(\"metR\", \"cowplot\", \"ggspatial\", \"patchwork\", \"ggrepel\",\n                        \"oce\", \"tmap\", \"leaflet\", \"bookdown\", \"blogdown\", \n                        \"rmarkdown\", \"tinytex\", \"tidymodels\", \"terra\", \n                        \"tidyterra\")\n\ninstall.packages(additional.packages)\n\n\n\nShow version number of R and installed OS\nsessionInfo()\nshow R version\netRversion()\nshow current working directory\ngetwd()\nchange working directory to a user defined location\nsetwd(\"C:/...\")\nlist all packages in the R package library\nlibrary()\nopen download mirrors list for package installation\navailable.packages()\ndownload R packages from CRAN repository to a local folder\n`download.packages(\"package_name\", \"download_directory\")\nupdate all packages\nupdate.packages(checkBuilt=TRUE)\nshow version numbers of R packages, dependencies of packages, recommended packages, license info and builded R version number\ninstalled.packages()\nparses and returns the description file of a package\npackageDescription(\"package_name\")\nremove packages\n`remove.packages(\"package_name\", \"installed_directory\")\nshow license info\nlicense()\ndisplay citation\ncitation()\nload packagesinto the session\nrequire(package_name)\nrunning time of R\nproc.time()\ncurrent memory usage\nmemory.size()\ntotal available memory\nmemory.limit()\nterminate an R session\nq()\ndisplay warning messages\nwarnings()\n\n\n\nBoth online and offline help documentations and manuals for R are available. You can start help while using R with help.start() function from the console. For more help, you can use online documentations from the official R website by using these links: + Help page: https://www.r-project.org/help.html + Manuals page: https://cran.r-project.org/manuals.html + Frequently Asked Questions (FAQs) Page: https://cran.r-project.org/faqs.html\nEvery function available to you should have a help page, and you access it by typing a question mark preceding the function name in the Console. Let’s have a deeper look at the arguments for plot(), using the help pages.\n    ?plot\nThis opens up the correct page in the Help Tab in the bottom-right of the RStudio IDE. You can also click on the tab and type in the function name in the search bar.\nAll help pages will have the same format, here is how I look at it:\nThe help page tells the name of the package in the top left, and broken down into sections:\n\nHelp pages\n- Description: An extended description of what the function does. - Usage: The arguments of the function and their default values. - Arguments: An explanation of the data each argument is expecting. - Details: Any important details to be aware of. - Value: The data the function returns. - See Also: Any related functions you might find useful. - Examples: Some examples for how to use the function.\n\nWhen I look at a help page, I start with the Description to see if I am in the right place for what I need to do. Reading the description for plot lets me know that yup, this is the function I want.\nI next look at the usage and arguments, which give me a more concrete view into what the function does. plot requires arguments for x and y. But we passed only one argument to plot(): we passed the cars dataset (plot(cars)). R is able to understand that it should use the two columns in that dataset as x and y, and it does so based on order: the first column “speed” becomes x and the second column “dist” becomes y. The ... means that there are many other arguments we can pass to plot(), which we should expect: I think we can all agree that it would be nice to have the option of making this figure a little more beautiful and compelling. Glancing at some of the arguments, we can understand here to be about the style of the plots.\nNext, I usually scroll down to the bottom to the examples. This is where I can actually see how the function is used, and I can also paste those examples into the Console to see their output. Let’s try it:\n\n\n\n\n\n\n\n\nFigure 2: A cosine function of x"
  },
  {
    "objectID": "posts/thebasics/index.html#flavours-of-r-base-and-tidyverse",
    "href": "posts/thebasics/index.html#flavours-of-r-base-and-tidyverse",
    "title": "R and Rstudio",
    "section": "",
    "text": "R is a programming language, and just like any language, it has different dialects. When you read about R online, you’ll frequently see people mentioning the words “base” and “tidyverse.” These are the two most common dialects of R. Base R is just that, R in its purest form. The tidyverse is a collection of add-on packages for working with different types of data. The two are fully compatible, and you can mix and match as much as you like. Both ggplot2 and magrittr are part of the tidyverse.\nIn recent years, the tidyverse has been heavily promoted as being “modern” R which “makes data science faster, easier and more fun.” You should believe the hype. The tidyverse is marvellous. But if you only learn tidyverse R, you will miss out on much of what R has to offer. Base R is just as marvellous, and can definitely make data science as fast, easy and fun as the tidyverse. Besides, nobody uses just base R anyway - there are a ton of non-tidyverse packages that extend and enrich R in exciting new ways. Perhaps “extended R” would be better names for the non-tidyverse dialect.\nAnyone who tells you to just learn one of these dialects is wrong. Both are great, they work extremely well together, and they are similar enough that you shouldn’t limit yourself to just mastering one of them. This book will show you both base R and tidyverse solutions to problems, so that you can decide for yourself which is faster, easier, and more fun.\nA defining property of the tidyverse is that there are separate functions for everything, which is perfect for code that relies on pipes. In contrast, base R uses fewer functions, but with more parameters, to perform the same tasks. If you use tidyverse solutions there is a good chance that there exists a function which performs exactly the task you’re going to do with its default settings. This is great (once again, especially if you want to use pipes), but it means that there are many more functions to master for tidyverse users, whereas you can make do with much fewer in base R. You will spend more time looking up function arguments when working with base R (which fortunately is fairly straightforward using the ? documentation), but on the other hand, looking up arguments for a function that you know the name of is easier than finding a function that does something very specific that you don’t know the name of. There are advantages and disadvantages to both approaches."
  },
  {
    "objectID": "posts/vectorDataframe/index.html",
    "href": "posts/vectorDataframe/index.html",
    "title": "Understanding vector and dataframe",
    "section": "",
    "text": "R language is a flexible language that allows to work with different kind of data format [@R-base]. This include integer, numeric, character, complex, dates and logical. The default data type or class in R is double precision—numeric. In a nutshell, R treats all kind of data into five categories but we deal with only four in this book. Datasets in R are often a combination of seven different data types are highlighted in ?@fig-datatypes;\n{# fig-datatypes}"
  },
  {
    "objectID": "posts/vectorDataframe/index.html#numeric",
    "href": "posts/vectorDataframe/index.html#numeric",
    "title": "Understanding vector and dataframe",
    "section": "Numeric",
    "text": "Numeric\nThe most common data type in R is numeric. The numeric class holds the set of real numbers — decimal place numbers. We create a numeric vector using a c() function but you can use any function that creates a sequence of numbers. For example, we can create a numeric vector of SST as follows;\n\nsst = c(25.4, 26, 28, 27.8, 29, 24.8, 22.3)\n\nWe can check whether the variable sst is numeric with is.numeric function\n\nis.numeric(sst)\n\n[1] TRUE"
  },
  {
    "objectID": "posts/vectorDataframe/index.html#integer",
    "href": "posts/vectorDataframe/index.html#integer",
    "title": "Understanding vector and dataframe",
    "section": "Integer",
    "text": "Integer\nInteger vector data type is actually a special case of numeric data. Unlike numeric, integer values do not have decimal places.They are commonly used for counting or indexing. Creating an integer vector is similar to numeric vector except that we need to instruct R to treat the data as integer and not numeric or double. To command R creating integer, we specify a suffix L to an element\n\ndepth = c(5L, 10L, 15L, 20L, 25L,30L)\nis.vector(depth);class(depth)\n\n[1] TRUE\n\n\n[1] \"integer\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nif your variable does not have decimals, R will automatically set the type as integers instead of numeric.\n\n\n\naa = c(20,68,78,50)\n\nYou can check if the data is integer with is.integer() and can convert numeric value to an integer with as.integer()\n\nis.integer(aa)\n\n[1] FALSE\n\n\nYou can query the class of the object with the class() to know the class of the object\n\nclass(aa)\n\n[1] \"numeric\"\n\n\nAlthough the object bb is integer as confirmed with as.integer() function, the class() ouput the answer as numeric. This is because the defaul type of number in r is numeric. However, you can use the function as.integer() to convert numeric value to integer\n\nclass(as.integer(aa))\n\n[1] \"integer\""
  },
  {
    "objectID": "posts/vectorDataframe/index.html#character",
    "href": "posts/vectorDataframe/index.html#character",
    "title": "Understanding vector and dataframe",
    "section": "Character",
    "text": "Character\nIn programming terms, we usually call text as string. This often are text data like names. A character vector may contain a single character , a word or a group of words. The elements must be enclosed with a single or double quotations mark.\n\nsites = c(\"Pemba Channel\", \"Zanzibar Channnel\", \"Pemba Channel\")\nis.vector(sites); class(sites)\n\n[1] TRUE\n\n\n[1] \"character\"\n\n\nWe can be sure whether the object is a string with is.character() or check the class of the object with class().\n\ncountries = c(\"Kenya\", \"Uganda\", \"Rwanda\", \"Tanzania\")\nclass(countries)\n\n[1] \"character\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nEverything inside \"\" will be considered as character, no matter if it looks like character or not"
  },
  {
    "objectID": "posts/vectorDataframe/index.html#factor",
    "href": "posts/vectorDataframe/index.html#factor",
    "title": "Understanding vector and dataframe",
    "section": "Factor",
    "text": "Factor\nFactor variables are a special case of character variables in the sense that it also contains text. However, factor variables are used when there are a limited number of unique character strings. It often represents a categorical variable. For instance, the gender will usually take on only two values, \"female\" or \"male\" (and will be considered as a factor variable) whereas the name will generally have lots of possibilities (and thus will be considered as a character variable). To create a factor variable use the factor() function:\n\n    maturity.stage &lt;- factor(c(\"I\", \"II\", \"III\", \"IV\", \"V\"))\n    maturity.stage\n\n[1] I   II  III IV  V  \nLevels: I II III IV V\n\n\nTo know the different levels of a factor variable, use levels():\n\n levels(maturity.stage)\n\n[1] \"I\"   \"II\"  \"III\" \"IV\"  \"V\"  \n\n\nBy default, the levels are sorted alphabetically. You can reorder the levels with the argument levels in the factor() function:\n\nmature &lt;- factor(maturity.stage, levels = c(\"V\", \"III\"))\n    levels(mature)\n\n[1] \"V\"   \"III\"\n\n\nCharacter strings can be converted to factors with as.factor():\n\n text &lt;- c(\"test1\", \"test2\", \"test1\", \"test1\") # create a character vector\n    class(text) # to know the class\n\n[1] \"character\"\n\n\n\n text_factor &lt;- as.factor(text) # transform to factor\n    class(text_factor) # recheck the class\n\n[1] \"factor\"\n\n\nThe character strings have been transformed to factors, as shown by its class of the type factor.\nOften we wish to take a continuous numerical vector and transform it into a factor. The function cut() takes a vector of numerical data and creates a factor based on your give cut-points. Let us make a fictional total length of 508 bigeye tuna with rnorm() function.\n\ntl.cm = rnorm(n = 508, mean = 40, sd = 18)\n\n# mosaic::plotDist(dist = \"norm\", mean = 40, sd = 18, under = F, kind = \"cdf\", add = TRUE)\n\ntl.cm |&gt;\n  tibble::as.tibble() |&gt;\n  ggstatsplot::gghistostats(x = value, binwidth = 10, test.value = 40.2, type = \"n\", normal.curve = T, centrality.type = \"p\", xlab = \"Total length (cm)\")\n\n\n\n\n\n\n\nFigure 1: Normal distribution of bigeye tuna’s tota length\n\n\n\n\n\nWe can now breaks the distribution into groups and make a simple plot as shown in ?@fig-lfq, where frequency of bigeye tuna color coded with the group size\n\ngroup = cut(tl.cm, breaks = c(0,30,60,110),\n            labels = c(\"Below 20\", \"30-60\", \"Above 60\"))\nis.factor(group)\n\n[1] TRUE\n\nlevels(group)\n\n[1] \"Below 20\" \"30-60\"    \"Above 60\"\n\n\n\nbarplot(table(group), las = 1, horiz = FALSE, col = c(\"blue\", \"green\", \"red\"), ylab = \"Frequency\", xlab = \"\")\n\n\n\n\n\n\n\nFigure 2: Length frequency of bigeye tuna"
  },
  {
    "objectID": "posts/vectorDataframe/index.html#logical",
    "href": "posts/vectorDataframe/index.html#logical",
    "title": "Understanding vector and dataframe",
    "section": "Logical",
    "text": "Logical\nLogical data (or simply logical ) represent the logical TRUE state and the logical FALSE state. Logical variables are the variables in which logical data are stored. Logical variables can assume only two states:\n\nFALSE, always represent by 0;\nTRUE, always represented by a nonzero object. Usually, the digit 1 is used for TRUE.\n\nWe can create logical variables indirectly, through logical operations, such as the result of a comparison between two numbers. These operations return logical values. For example, type the following statement at the R console:\n\n5 &gt; 3;\n\n[1] TRUE\n\n5 &lt; 3\n\n[1] FALSE\n\n\nSince 5 is indeed greater than 3, the result of the comparison is true, however, 5 is not less than 3, and hence the comparison is false. The sign &gt; and &lt; are relational operators, returning logical data types as a result.\n\n value1 &lt;- 7\n    value2 &lt;- 9\n\n\n    greater &lt;- value1 &gt; value2\n    greater\n\n[1] FALSE\n\n    class(greater)\n\n[1] \"logical\"\n\n\n\n    # is value1 less than or equal to value2?\n    less &lt;- value1 &lt;= value2\n    less\n\n[1] TRUE\n\n    class(less)\n\n[1] \"logical\"\n\n\nIt is also possible to transform logical data into numeric data. After the transformation from logical to numeric with the as.numeric() command, FALSE values equal to 0 and TRUE values equal to 1:\n\n greater_num &lt;- as.numeric(greater)\n    sum(greater)\n\n[1] 0\n\n\n\n   less_num &lt;- as.numeric(less)\n    sum(less)\n\n[1] 1\n\n\nConversely, numeric data can be converted to logical data, with FALSE for all values equal to 0 and TRUE for all other values.\n\n  x &lt;- 0\n  as.logical(x)\n\n[1] FALSE\n\n\n\n y &lt;- 5\nas.logical(y)\n\n[1] TRUE"
  },
  {
    "objectID": "posts/vectorDataframe/index.html#date-and-time",
    "href": "posts/vectorDataframe/index.html#date-and-time",
    "title": "Understanding vector and dataframe",
    "section": "Date and Time",
    "text": "Date and Time\nDate and time are also treated as vector in R\n\ndate.time = seq(lubridate::dmy(010121), \n                lubridate::dmy(250121), \n                length.out = 5)\ndate.time\n\n[1] \"2021-01-01\" \"2021-01-07\" \"2021-01-13\" \"2021-01-19\" \"2021-01-25\""
  },
  {
    "objectID": "posts/vectorDataframe/index.html#sequence-numbers",
    "href": "posts/vectorDataframe/index.html#sequence-numbers",
    "title": "Understanding vector and dataframe",
    "section": "Sequence Numbers",
    "text": "Sequence Numbers\nThere are few R operators that are designed for creating vecor of non-random numbers. These functions provide multiple ways for generating sequences of numbers\nThe colon : operator, explicitly generate regular sequence of numbers between the lower and upper boundary numbers specified. For example, generating number beween 0 and 10, we simply write;\n\nvector.seq = 0:10\nvector.seq\n\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\n\nHowever, if you want to generate a vector of sequence number with specified interval, let say we want to generate number between 0 and 10 with interval of 2, then the seq() function is used\n\nregular.vector = seq(from = 0,to = 10, by = 2)\nregular.vector\n\n[1]  0  2  4  6  8 10\n\n\nunlike the seq() function and : operator that works with numbers, the rep() function generate sequence of repeated numbers or strings to create a vector\n\nid = rep(x = 3, each = 4)\nstation = rep(x = \"Station1\", each = 4)\nid;station\n\n[1] 3 3 3 3\n\n\n[1] \"Station1\" \"Station1\" \"Station1\" \"Station1\""
  },
  {
    "objectID": "posts/vectorDataframe/index.html#sequence-characters",
    "href": "posts/vectorDataframe/index.html#sequence-characters",
    "title": "Understanding vector and dataframe",
    "section": "Sequence characters",
    "text": "Sequence characters\nThe rep() function allows to parse each and times arguments. The each argument allows creation of vector that that repeat each element in a vector according to specified number.\n\nsampled.months = c(\"January\", \"March\", \"May\")\nrep(x = sampled.months, each = 3)\n\n[1] \"January\" \"January\" \"January\" \"March\"   \"March\"   \"March\"   \"May\"    \n[8] \"May\"     \"May\"    \n\n\nBut the times argument repeat the whole vector to specfied times\n\nrep(x = sampled.months, times = 3)\n\n[1] \"January\" \"March\"   \"May\"     \"January\" \"March\"   \"May\"     \"January\"\n[8] \"March\"   \"May\""
  },
  {
    "objectID": "posts/vectorDataframe/index.html#generating-normal-distribution",
    "href": "posts/vectorDataframe/index.html#generating-normal-distribution",
    "title": "Understanding vector and dataframe",
    "section": "Generating normal distribution",
    "text": "Generating normal distribution\nThe central limit theorem that ensure the data is normal distributed is well known to statistician. R has a rnorm() function which makes vector of normal distributed values. For example to generate a vector of 40 sea surface temperature values from a normal distribution with a mean of 25, and standard deviation of 1.58, we simply type this expression in console;\n\nsst = rnorm(n = 40, mean = 25,sd = 1.58)\nsst\n\n [1] 22.51905 25.80313 24.22628 21.86037 28.99526 24.67710 24.16502 25.47170\n [9] 26.88654 25.60199 24.37076 27.22248 24.18528 24.85536 23.85104 25.53450\n[17] 25.36971 23.47394 25.31547 23.21039 25.51640 24.39540 25.97264 26.37607\n[25] 25.47267 21.68194 24.61381 21.08819 22.96802 26.02830 25.37427 24.85639\n[33] 26.26802 26.43708 25.48479 26.23754 24.07334 24.25398 27.26465 25.60898"
  },
  {
    "objectID": "posts/vectorDataframe/index.html#rounding-off-numbers",
    "href": "posts/vectorDataframe/index.html#rounding-off-numbers",
    "title": "Understanding vector and dataframe",
    "section": "Rounding off numbers",
    "text": "Rounding off numbers\nThere are many ways of rounding off numerical number to the nearest integers or specify the number of decimal places. the code block below illustrate the common way to round off:\n\nchl = rnorm(n = 20, mean = .55, sd = .2)\nchl |&gt; round(digits = 2)\n\n [1] 0.61 0.59 0.71 0.41 0.26 0.56 0.57 0.26 0.83 0.69 0.64 0.51 0.69 0.86 0.48\n[16] 0.49 0.44 0.53 0.17 0.28"
  },
  {
    "objectID": "posts/vectorDataframe/index.html#number-of-elements-in-a-vector",
    "href": "posts/vectorDataframe/index.html#number-of-elements-in-a-vector",
    "title": "Understanding vector and dataframe",
    "section": "Number of elements in a vector",
    "text": "Number of elements in a vector\nSometimes you may have a long vector and want to know the numbers of elements in the object. R has length() function that allows you to query the vector and print the answer\n\nlength(chl)\n\n[1] 20"
  }
]