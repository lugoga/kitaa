[
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Penya",
    "section": "",
    "text": "Learning Agenda\n\nAn introduction\nGet familiar with R and Rstudio\nData types\nData structures\nReading and writing data in Rstudio\nTidying Data with tidyverse\nPlotting\n\nPlotting and Visualization_A\nPlotting and Visualization_B\nPlotting and Visualization_C\n\nData Manipulation\nDescriptive Statistics\nInferential Statistics\nModelling and simulation\nSpatial Handling and Analysis\nFurther topics\n\nGIt and Github\nReproducibility with Quarto\nWebsites and blog\nUsing python from Rstudio\nGenerating HTML, PDF and Word Reports\n\n\n\n\nDatasets\n\nChinook – contains the lengths and weights for Chinook Salmon from three locations in Argentina. you can simply download the file from the internet using the code chunk below;\n\n\nchinook = readr::read_csv(\n  file = \"https://raw.githubusercontent.com/lugoga/kitaa/main/datasets/chinook_lw.csv\")\n\n\nchinook |&gt; \n  FSA::headtail() |&gt; \n  flextable::flextable()\n\ntlwloc120.117.9Argentina115.017.2Argentina111.216.8Argentina29.20.3Puyehue25.20.3Puyehue18.00.1Puyehue\n\n\n\nMauna Loa Atmospheric CO2 Concentration– store Atmospheric concentrations of CO2 are expressed in parts per million (ppm) and reported in the preliminary 1997 SIO manometric mole fraction scale. The link to download is found in the chunk\n\n\nco = readr::read_csv(\"https://raw.githubusercontent.com/lugoga/kitaa/main/datasets/long_form_co2.csv\")\n\n`\n\nco |&gt; \n  FSA::headtail() |&gt; \n  flextable::flextable()\n\ndaymonthsyearco21511,959315.421521,959316.311531,959316.5015101,997360.8315111,997362.4915121,997364.34\n\n\n\nNote that you can import the dataset from online API to Rstudio with easy as the chunk above highlight"
  },
  {
    "objectID": "posts/get started/index.html",
    "href": "posts/get started/index.html",
    "title": "Getting Started with R and RStudio",
    "section": "",
    "text": "In this tutorial we'll learn how to begin programming with R using RStudio. We'll install R, and RStudio RStudio, an extremely popular development environment for R. We'll learn the key RStudio features in order to start programming in R on our own."
  },
  {
    "objectID": "posts/get started/index.html#getting-started-with-rstudio",
    "href": "posts/get started/index.html#getting-started-with-rstudio",
    "title": "Getting Started with R and RStudio",
    "section": "Getting Started with RStudio",
    "text": "Getting Started with RStudio\nRStudio is an open-source tool for programming in R. RStudio is a flexible tool that helps you create readable analyses, and keeps your code, images, comments, and plots together in one place. It's worth knowing about the capabilities of RStudio for data analysis and programming in R.\nUsing RStudio for data analysis and programming in R provides many advantages. Here are a few examples of what RStudio provides:\n\nAn intuitive interface that lets us keep track of saved objects, scripts, and figures\nA text editor with features like color-coded syntax that helps us write clean scripts\nAuto complete features save time\nTools for creating documents containing a project's code, notes, and visuals\nDedicated Project folders to keep everything in one place\n\nRStudio can also be used to program in other languages including SQL, Python, and Bash, to name a few.\nBut before we can install RStudio, we'll need to have a recent version of R installed on our computer."
  },
  {
    "objectID": "posts/get started/index.html#install-r",
    "href": "posts/get started/index.html#install-r",
    "title": "Getting Started with R and RStudio",
    "section": "1. Install R",
    "text": "1. Install R\nR is available to download from the official R website. Look for this section of the web page:\nThe version of R to download depends on our operating system. Below, we include installation instructions for Mac OS X, Windows, and Linux (Ubuntu).\nMAC OS X\n\nSelect the Download R for (Mac) OSX option.\nLook for the most up-to-date version of R (new versions are released frequently and appear toward the top of the page) and click the .pkg file to download.\nOpen the .pkg file and follow the standard instructions for installing applications on MAC OS X.\nDrag and drop the R application into the Applications folder.\n\nWindows\n\nSelect the Download R for Windows option.\nSelect base, since this is our first installation of R on our computer.\nFollow the standard instructions for installing programs for Windows. If we are asked to select Customize Startup or Accept Default Startup Options, choose the default options.\n\nLinux/Ubuntu\n\nSelect the Download R for Linux option.\nSelect the Ubuntu option.\nAlternatively, select the Linux package management system relevant to you if you are not using Ubuntu.\n\nRStudio is compatible with many versions of R (R version 3.0.1 or newer as of July, 2020). Installing R separately from RStudio enables the user to select the version of R that fits their needs."
  },
  {
    "objectID": "posts/get started/index.html#install-rstudio",
    "href": "posts/get started/index.html#install-rstudio",
    "title": "Getting Started with R and RStudio",
    "section": "2. Install RStudio",
    "text": "2. Install RStudio\nNow that R is installed, we can install RStudio. Navigate to the RStudio downloads page.\nWhen we reach the RStudio downloads page, let's click the \"Download\" button of the RStudio Desktop Open Source License Free option:\nOur operating system is usually detected automatically and so we can directly download the correct version for our computer by clicking the \"Download RStudio\" button. If we want to download RStudio for another operating system (other than the one we are running), navigate down to the \"All installers\" section of the page."
  },
  {
    "objectID": "posts/get started/index.html#first-look-at-rstudio",
    "href": "posts/get started/index.html#first-look-at-rstudio",
    "title": "Getting Started with R and RStudio",
    "section": "3. First Look at RStudio",
    "text": "3. First Look at RStudio\nWhen we open RStudio for the first time, we'll probably see a layout like this:\n But the background color will be white, so don't expect to see this blue-colored background the first time RStudio is launched. Check out this Dataquest blog to learn how to customize the appearance of RStudio.\nWhen we open RStudio, R is launched as well. A common mistake by new users is to open R instead of RStudio. To open RStudio, search for RStudio on the desktop, and pin the RStudio icon to the preferred location (e.g. Desktop or toolbar).\n\n\n\n\n\n\nFigure 1: Watch the video that guide you through the key step of using Rstudio in R."
  },
  {
    "objectID": "posts/get started/index.html#the-console",
    "href": "posts/get started/index.html#the-console",
    "title": "Getting Started with R and RStudio",
    "section": "4. The Console",
    "text": "4. The Console\nLet's start off by introducing some features of the Console. The Console is a tab in RStudio where we can run R code.\nNotice that the window pane where the console is located contains three tabs: Console, Terminal and Jobs (this may vary depending on the version of RStudio in use). We'll focus on the Console for now.\nWhen we open RStudio, the console contains information about the version of R we're working with. Scroll down, and try typing a few expressions like this one. Press the enter key to see the result.\n1 + 2\nAs we can see, we can use the console to test code immediately. When we type an expression like 1 + 2, we'll see the output below after hitting the enter key.\nWe can store the output of this command as a variable. Here, we've named our variable result:\nresult &lt;- 1 + 2\nThe &lt;- is called the assignment operator. This operator assigns values to variables. The command above is translated into a sentence as:\n\n&gt; The result variable gets the value of one plus two.\n\nOne nice feature from RStudio is the keyboard shortcut for typing the assignment operator &lt;-:\n\nMac OS X: Option + -\nWindows/Linux: Alt + -\n\nWe highly recommend that you memorize this keyboard shortcut because it saves a lot of time in the long run!\nWhen we type result into the console and hit enter, we see the stored value of 3:\n&gt; result &lt;- 1 + 2 &gt; result [1] 3\nWhen we create a variable in RStudio, it saves it as an object in the R global environment. We'll discuss the environment and how to view objects stored in the environment in the next section."
  },
  {
    "objectID": "posts/get started/index.html#the-global-environment",
    "href": "posts/get started/index.html#the-global-environment",
    "title": "Getting Started with R and RStudio",
    "section": "5. The Global Environment",
    "text": "5. The Global Environment\nWe can think of the global environment as our workspace. During a programming session in R, any variables we define, or data we import and save in a dataframe, are stored in our global environment. In RStudio, we can see the objects in our global environment in the Environment tab at the top right of the interface:\nWe'll see any objects we created, such as result, under values in the Environment tab. Notice that the value, 3, stored in the variable is displayed.\nSometimes, having too many named objects in the global environment creates confusion. Maybe we'd like to remove all or some of the objects. To remove all objects, click the broom icon at the top of the window:\nTo remove selected objects from the workspace, select the Grid view from the dropdown menu:\nHere we can check the boxes of the objects we'd like to remove and use the broom icon to clear them from our Global Environment."
  },
  {
    "objectID": "posts/get started/index.html#install-the-tidyverse-packages",
    "href": "posts/get started/index.html#install-the-tidyverse-packages",
    "title": "Getting Started with R and RStudio",
    "section": "6. Install the tidyverse Packages",
    "text": "6. Install the tidyverse Packages\nMuch of the functionality in R comes from using packages. Packages are shareable collections of code, data, and documentation. Packages are essentially extensions, or add-ons, to the R program that we installed above.\nOne of the most popular collection of packages in R is known as the \"tidyverse\". The tidyverse is a collection of R packages designed for working with data. The tidyverse packages share a common design philosophy, grammar, and data structures. Tidyverse packages \"play well together\". The tidyverse enables you to spend less time cleaning data so that you can focus more on analyzing, visualizing, and modeling data.\nLet's learn how to install the tidyverse packages. The most common \"core\" tidyverse packages are:\n\nreadr, for data import.\nggplot2, for data visualization.\ndplyr, for data manipulation.\ntidyr, for data tidying.\npurrr, for functional programming.\ntibble, for tibbles, a modern re-imagining of dataframes.\nstringr, for string manipulation.\nforcats, for working with factors (categorical data).\n\nTo install packages in R we use the built-in install.packages() function. We could install the packages listed above one-by-one, but fortunately the creators of the tidyverse provide a way to install all these packages from a single command. Type the following command in the Console and hit the enter key.\ninstall.packages(\"tidyverse\")\nThe install.packages() command only needs to be used to download and install packages for the first time."
  },
  {
    "objectID": "posts/get started/index.html#load-the-tidyverse-packages-into-memory",
    "href": "posts/get started/index.html#load-the-tidyverse-packages-into-memory",
    "title": "Getting Started with R and RStudio",
    "section": "7. Load the tidyverse Packages into Memory",
    "text": "7. Load the tidyverse Packages into Memory\nAfter a package is installed on a computer's hard drive, the library() command is used to load a package into memory:\nlibrary(readr) library(ggplot2)\nLoading the package into memory with library() makes the functionality of a given package available for use in the current R session. It is common for R users to have hundreds of R packages installed on their hard drive, so it would be inefficient to load all packages at once. Instead, we specify the R packages needed for a particular project or task.\nFortunately, the core tidyverse packages can be loaded into memory with a single command. This is how the command and the output looks in the console:\nlibrary(tidyverse)## ── Attaching packages ───────────────────────────────────────────────── tidyverse 1.3.0 ──## ✓ ggplot2 3.3.2 ✓ purrr 0.3.4 ## ✓ tibble 3.0.3 ✓ dplyr 1.0.0 ## ✓ tidyr 1.1.0 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.5.0## ── Conflicts ──────────────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag()\nThe Attaching packages section of the output specifies the packages and their versions loaded into memory. The Conflicts section specifies any function names included in the packages that we just loaded to memory that share the same name as a function already loaded into memory. Using the example above, now if we call the filter() function, R will use the code specified for this function from the dplyr package. These conflicts are generally not a problem, but it's worth reading the output message to be sure."
  },
  {
    "objectID": "posts/get started/index.html#identify-loaded-packages",
    "href": "posts/get started/index.html#identify-loaded-packages",
    "title": "Getting Started with R and RStudio",
    "section": "8. Identify Loaded Packages",
    "text": "8. Identify Loaded Packages\nIf we need to check which packages we loaded, we can refer to the Packages tab in the window at the bottom right of the console.\nWe can search for packages, and checking the box next to a package loads it (the code appears in the console).\nAlternatively, entering this code into the console will display all packages currently loaded into memory:\n(.packages())\nWhich returns:\n[1] \"forcats\" \"stringr\" \"dplyr\" \"purrr\" \"tidyr\" \"tibble\" \"tidyverse\" [8] \"ggplot2\" \"readr\" \"stats\" \"graphics\" \"grDevices\" \"utils\" \"datasets\" [15] \"methods\" \"base\"\nAnother useful function for returning the names of packages currently loaded into memory is search():\n&gt; search()  [1] \".GlobalEnv\" \"package:forcats\" \"package:stringr\" \"package:dplyr\"  [5] \"package:purrr\" \"package:readr\" \"package:tidyr\" \"package:tibble\"  [9] \"package:ggplot2\" \"package:tidyverse\" \"tools:rstudio\" \"package:stats\" [13] \"package:graphics\" \"package:grDevices\" \"package:utils\" \"package:datasets\" [17] \"package:methods\" \"Autoloads\" \"package:base\""
  },
  {
    "objectID": "posts/get started/index.html#get-help-on-a-package",
    "href": "posts/get started/index.html#get-help-on-a-package",
    "title": "Getting Started with R and RStudio",
    "section": "9. Get Help on a Package",
    "text": "9. Get Help on a Package\nWe've learned how to install and load packages. But what if we'd like to learn more about a package that we've installed? That's easy! Clicking the package name in the Packages tab takes us to the Help tab for the selected package. Here's what we see if we click the tidyr package:\nAlternatively, we can type this command into the console and achieve the same result:\nhelp(package = \"tidyr\")\nThe help page for a package provides quick access to documentation for each function included in a package. From the main help page for a package you can also access \"vignettes\" when they are available. Vignettes provide brief introductions, tutorials, or other reference information about a package, or how to use specific functions in a package.\nvignette(package = \"tidyr\")\nWhich results in this list of available options:\nVignettes in package ‘tidyr’:nest nest (source, html) pivot Pivoting (source, html) programming Programming with tidyr (source, html) rectangle rectangling (source, html) tidy-data Tidy data (source, html) in-packages Usage and migration (source, html)\nFrom there, we can select a particular vignette to view:\nvignette(\"pivot\")\nNow we see the Pivot vignette is displayed in the Help tab. This is one example of why RStudio is a powerful tool for programming in R. We can access function and package documentation and tutorials without leaving RStudio!"
  },
  {
    "objectID": "posts/get started/index.html#get-help-on-a-function",
    "href": "posts/get started/index.html#get-help-on-a-function",
    "title": "Getting Started with R and RStudio",
    "section": "10. Get Help on a Function",
    "text": "10. Get Help on a Function\nAs we learned in the last section, we can get help on a function by clicking the package name in Packages and then click on a function name to see the help file. Here we see the pivot_longer() function from the tidyr package is at the top of this list:\nAnd if we click on \"pivot_longer\" we get this:\nWe can achieve the same results in the Console with any of these function calls:\nhelp(\"pivot_longer\") help(pivot_longer) ?pivot_longer\nNote that the specific Help tab for the pivot_longer() function (or any function we're interested in) may not be the default result if the package that contains the function is not loaded into memory yet. In general it's best to ensure a specific package is loaded before seeking help on a function."
  },
  {
    "objectID": "posts/get started/index.html#rstudio-projects",
    "href": "posts/get started/index.html#rstudio-projects",
    "title": "Getting Started with R and RStudio",
    "section": "11. RStudio Projects",
    "text": "11. RStudio Projects\nRStudio offers a powerful feature to keep you organized; Projects. It is important to stay organized when you work on multiple analyses. Projects from RStudio allow you to keep all of your important work in one place, including code scripts, plots, figures, results, and datasets.\nCreate a new project by navigating to the File tab in RStudio and select New Project.... Then specify if you would like to create the project in a new directory, or in an existing directory. Here we select \"New Directory\":\nRStudio offers dedicated project types if you are working on an R package, or a Shiny Web Application. Here we select \"New Project\", which creates an R project:\nNext, we give our project a name. \"Create project as a subdirectory of:\" is showing where the folder will live on the computer. If we approve of the location select \"Create Project\", if we do not, select \"Browse\" and choose the location on the computer where this project folder should live.\nNow in RStudio we see the name of the project is indicated in the upper-right corner of the screen. We also see the .Rproj file in the Files tab. Any files we add to, or generate-within, this project will appear in the Files tab.\nRStudio Projects are useful when you need to share your work with colleagues. You can send your project file (ending in .Rproj) along with all supporting files, which will make it easier for your colleagues to recreate the working environment and reproduce the results."
  },
  {
    "objectID": "posts/get started/index.html#save-your-real-work.-delete-the-rest.",
    "href": "posts/get started/index.html#save-your-real-work.-delete-the-rest.",
    "title": "Getting Started with R and RStudio",
    "section": "12. Save Your \"Real\" Work. Delete the Rest.",
    "text": "12. Save Your \"Real\" Work. Delete the Rest.\nThis tip comes from our 23 RStudio Tips, Tricks, and Shortcuts blog post, but it's so important that we are sharing it here as well!\nPractice good housekeeping to avoid unforeseen challenges down the road. If you create an R object worth saving, capture the R code that generated the object in an R script file. Save the R script, but don't save the environment, or workspace, where the object was created.\nTo prevent RStudio from saving your workspace, open Preferences &gt; General and un-select the option to restore .RData into workspace at startup. Be sure to specify that you never want to save your workspace, like this:\nNow, each time you open RStudio, you will begin with an empty session. None of the code generated from your previous sessions will be remembered. The R script and datasets can be used to recreate the environment from scratch.\nOther experts agree that not saving your workspace is best practice when using RStudio."
  },
  {
    "objectID": "posts/get started/index.html#r-scripts",
    "href": "posts/get started/index.html#r-scripts",
    "title": "Getting Started with R and RStudio",
    "section": "13. R Scripts",
    "text": "13. R Scripts\nAs we worked through this tutorial, we wrote code in the Console. As our projects become more complex, we write longer blocks of code. If we want to save our work, it is necessary to organize our code into a script. This allows us to keep track of our work on a project, write clean code with plenty of notes, reproduce our work, and share it with others.\nIn RStudio, we can write scripts in the text editor window at the top left of the interface:\n To create a new script, we can use the commands in the file menu:\nWe can also use the keyboard shortcut Ctrl + Shift + N. When we save a script, it has the file extension .R. As an example, we'll create a new script that includes this code to generate a scatterplot:\nlibrary(ggplot2) ggplot(data = mpg,        aes(x = displ, y = hwy)) +   geom_point()\nTo save our script we navigate to the File menu tab and select Save. Or we enter the following command:\n\nMac OS X: Cmd + S\nWindows/Linux: Ctrl + S"
  },
  {
    "objectID": "posts/get started/index.html#run-code",
    "href": "posts/get started/index.html#run-code",
    "title": "Getting Started with R and RStudio",
    "section": "14. Run Code",
    "text": "14. Run Code\nTo run a single line of code we typed into our script, we can either click Run at the top right of the script, or use the following keyboard commands when our cursor is on the line we want to run:\n\nMac OS X: Cmd + Enter\nWindows/Linux: Ctrl + Enter\n\nIn this case, we'll need to highlight multiple lines of code to generate the scatterplot. To highlight and run all lines of code in a script enter:\n\nMac OS X: Cmd + A + Enter\nWindows/Linux: Ctrl + A + Enter\n\nLet's check out the result when we run the lines of code specified above:\nSide note: this scatterplot is generated using data from the mpg dataset that is included in the ggplot2 package. The dataset contains fuel economy data from 1999 to 2008, for 38 popular models of cars.\nIn this plot, the engine displacement (i.e. size) is depicted on the x-axis (horizontal axis). The y-axis (vertical axis) depicts the fuel efficiency in miles-per-gallon. In general, fuel economy decreases with the increase in engine size. This plot was generated with the tidyverse package ggplot2. This package is very popular for data visualization in R."
  },
  {
    "objectID": "posts/get started/index.html#access-built-in-datasets",
    "href": "posts/get started/index.html#access-built-in-datasets",
    "title": "Getting Started with R and RStudio",
    "section": "15. Access Built-in Datasets",
    "text": "15. Access Built-in Datasets\nWant to learn more about the mpg dataset from the ggplot2 package that we mentioned in the last example? Do this with the following command:\ndata(mpg, package = \"ggplot2\")\nFrom there you can take a look at the first six rows of data with the head() function:\nhead(mpg)\n## # A tibble: 6 x 11 ##   manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class ## ## 1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa… ## 2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa… ## 3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa… ## 4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa… ## 5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa… ## 6 audi         a4      2.8  1999     6 manual(m5) f        18    26 p     compa…\nObtain summary statistics with the summary() function:\nsummary(mpg)\n##  manufacturer          model               displ            year ##  Length:234         Length:234         Min.   :1.600   Min.   :1999 ##  Class :character   Class :character   1st Qu.:2.400   1st Qu.:1999 ##  Mode  :character   Mode  :character   Median :3.300   Median :2004 ##                                        Mean   :3.472   Mean   :2004 ##                                        3rd Qu.:4.600   3rd Qu.:2008 ##                                        Max.   :7.000   Max.   :2008 ##       cyl           trans               drv                 cty ##  Min.   :4.000   Length:234         Length:234         Min.   : 9.00 ##  1st Qu.:4.000   Class :character   Class :character   1st Qu.:14.00 ##  Median :6.000   Mode  :character   Mode  :character   Median :17.00 ##  Mean   :5.889                                         Mean   :16.86 ##  3rd Qu.:8.000                                         3rd Qu.:19.00 ##  Max.   :8.000                                         Max.   :35.00 ##       hwy             fl               class ##  Min.   :12.00   Length:234         Length:234 ##  1st Qu.:18.00   Class :character   Class :character ##  Median :24.00   Mode  :character   Mode  :character ##  Mean   :23.44 ##  3rd Qu.:27.00 ##  Max.   :44.00\nOr open the help page in the Help tab, like this:\nhelp(mpg)\nFinally, there are many datasets built-in to R that are ready to work with. Built-in datasets are handy for practicing new R skills without searching for data. View available datasets with this command:\ndata()"
  },
  {
    "objectID": "posts/get started/index.html#additional-resources",
    "href": "posts/get started/index.html#additional-resources",
    "title": "Getting Started with R and RStudio",
    "section": "Additional Resources",
    "text": "Additional Resources\nIf you enjoyed this tutorial, come learn with us at Dataquest! If you are new to R and RStudio, we recommend starting with the Dataquest Introduction to Data Analysis in R course. This is the first course in the Dataquest Data Analyst in R path.\nFor more advanced RStudio tips check out the Dataquest blog post 23 RStudio Tips, Tricks, and Shortcuts.\nLearn how to load and clean data with tidyverse tools in this Dataquest blog post.\nRStudio has published numerous in-depth how to articles about using RStudio. Find them here.\nThere is an official RStudio Blog.\nIf you would like to learn R Markdown, check out these Dataquest blog posts:\n\nGetting Started with R Markdown — Guide and Cheatsheet\nR Markdown Tips, Tricks, and Shortcuts\n\nLearn R and the tidyverse with R for Data Science by Hadley Wickham. Solidify your knowledge by working through the exercises in RStudio and saving your work for future reference."
  },
  {
    "objectID": "posts/datastructures/index.html",
    "href": "posts/datastructures/index.html",
    "title": "Mastering Data Structures in R",
    "section": "",
    "text": "In data analysis and statistical computing, mastering data structures is essential for efficient data manipulation and analysis. In R, a powerful language for statistical computing and graphics, two fundamental data structures are vectors and data frames. Additionally, the newer tibble data structure offers enhanced features for data manipulation and visualization. In this comprehensive guide, we will explore these data structures in detail, providing illustrative examples along the way.Before we dive in, let pause for a moment and watch video in Figure 1\n\n\n\n\n\n\nFigure 1: Primary data structure in R\n\n\n\n\nVectors:\nVectors are one-dimensional arrays that can hold numeric, character, logical, or other atomic data types. They are the simplest and most basic data structure in R.\n\nCreating Vectors:\nCreating vectors in R is straightforward using the c() function, which concatenates elements into a vector.\n# Creating a numeric vector\nnumeric_vector &lt;- c(1, 2, 3, 4, 5)\n\n# Creating a character vector\ncharacter_vector &lt;- c(\"apple\", \"banana\", \"orange\", \"grape\", \"pineapple\")\n\n# Creating a logical vector\nlogical_vector &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE)\n\n\nUsing Vectors to Create Data Frames:\nData frames are two-dimensional data structures that resemble tables, where each column can be a different data type. They are commonly used for storing and analyzing structured data.\n# Using vectors to create a data frame\ndata &lt;- data.frame(\n  numeric_col = numeric_vector,\n  character_col = character_vector,\n  logical_col = logical_vector\n)\n\n# View the created data frame\nprint(data)\n\n\n\nData Frames:\nData frames are the workhorse of R for storing tabular data. They are similar to matrices but offer more flexibility, as each column can be of a different data type.\n\nCreating Data Frames:\nData frames can be created directly using the data.frame() function, where each column is specified as a vector.\n# Creating a data frame directly\nstudent_data &lt;- data.frame(\n  name = c(\"John\", \"Alice\", \"Bob\", \"Emma\", \"Michael\"),\n  age = c(25, 23, 27, 22, 24),\n  grade = c(\"A\", \"B\", \"B\", \"C\", \"A\")\n)\n\n# View the created data frame\nprint(student_data)\n\n\nUsing Tibbles:\nTibbles are a modern alternative to data frames, introduced by the tidyverse ecosystem. They are more user-friendly, provide enhanced printing, and have better support for data analysis pipelines.\n# Creating a tibble from vectors\nlibrary(tibble)\n\n# Creating a tibble directly\nstudent_tibble &lt;- tibble(\n  name = c(\"John\", \"Alice\", \"Bob\", \"Emma\", \"Michael\"),\n  age = c(25, 23, 27, 22, 24),\n  grade = c(\"A\", \"B\", \"B\", \"C\", \"A\")\n)\n\n# View the created tibble\nprint(student_tibble)\n\n\n\nConclusion:\nUnderstanding data structures such as vectors, data frames, and tibbles is crucial for effective data manipulation and analysis in R. Whether you’re working with numeric data, text data, or logical data, these data structures provide the foundation for organizing and analyzing your data efficiently. By mastering these data structures, you’ll be well-equipped to tackle a wide range of data analysis tasks in R.\nIn this guide, we’ve covered how to create vectors, use them to construct data frames, and introduced the newer tibble data structure. Armed with this knowledge, you’re ready to dive deeper into the world of data analysis and unlock the full potential of R for your projects. Whether you’re a beginner or an experienced R user, mastering these fundamental data structures will pave the way for more advanced data analysis and modeling techniques."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Penya",
    "section": "",
    "text": "Mastering Data Structures in R\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\n\nLearn the primary data structures (vector and data frame) in R, which are the foundation of data manipulation and analysis in R \n\n\n\n\n\nFeb 3, 2024\n\n\nMasumbuko Semba\n\n\n\n\n\n\n\n\n\n\n\n\nUnderstanding and using Data types in R\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\n\nLearn the primary data types in R, which are the foundation of data programming in R \n\n\n\n\n\nJan 26, 2024\n\n\nMasumbuko Semba\n\n\n\n\n\n\n\n\n\n\n\n\nGetting Started with R and RStudio\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\n\nLearn the basic of programming with R using RStudio. We’ll install R, and RStudio RStudio, an extremely popular development environment for R \n\n\n\n\n\nJan 24, 2024\n\n\nMasumbuko Semba\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a Timeline graphic using R and ggplot2\n\n\n\n\n\n\nvisualization\n\n\ncode\n\n\nanalysis\n\n\n\nCreating a timeline graphic using ggplot2, which is a powerful data visualization library in R\n\n\n\n\n\nNov 24, 2023\n\n\nMasumbuko Semba\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "archive.html",
    "href": "archive.html",
    "title": "Archive",
    "section": "",
    "text": "Mastering Data Structures in R\n\n\n\n\n\n\n\n\nFeb 3, 2024\n\n\n\n\n\n\n\nUnderstanding and using Data types in R\n\n\n\n\n\n\n\n\nJan 26, 2024\n\n\n\n\n\n\n\nGetting Started with R and RStudio\n\n\n\n\n\n\n\n\nJan 24, 2024\n\n\n\n\n\n\n\nCreating a Timeline graphic using R and ggplot2\n\n\n\n\n\n\n\n\nNov 24, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Penya",
    "section": "",
    "text": "Are you interested in diving into the world of coding and programming using R and Python? If so, you’ve come to the right place. This website will guide you through the essentials of data science, focusing on how to turn raw data into valuable information to support decision making in both business and science.\n\n\n\nThe Five Key Processes of the learning workflow in R and Python languages\n\n\nAs often taught, we begin with the basics - an introduction to programming. Whether you’re new to coding or have some experience, understanding the fundamentals of programming is crucial. We’ll cover key concepts and terminology to help you get started on the right foot.\nNext, we’ll walk you through the process of installing R and RStudio. These are essential tools for anyone working with R, as they provide a user-friendly interface and a wide range of features to enhance your coding experience.\nOnce you have R and RStudio up and running, it’s time to get familiar with the environment. We’ll explore the layout and functionality of R and RStudio, helping you feel comfortable navigating and using these tools effectively.\nData types in R are an important aspect of programming in R. Understanding different data types such as numeric, character, and logical is essential for data manipulation and analysis. We’ll break down each data type and provide examples to ensure you have a solid grasp of this concept.\nData structure in R is another crucial topic to master. From vectors to matrices to lists, we’ll cover the various data structures in R and explain how each one is used in data science applications.\nTidying data frames is a key step in data analysis. We’ll delve into the principles of tidy data and demonstrate how to clean and organize your data frames for optimal analysis and visualization.\nData visualization with ggplot2 is an exciting aspect of data science. This powerful package in R allows you to create stunning visualizations to gain insights from your data. We’ll guide you through the process of using ggplot2 to create compelling graphs and charts.\nData manipulation is a vital skill for any data scientist. We’ll explore techniques for filtering, sorting, and transforming data to extract the information you need for your analysis.\nStatistics play a significant role in data science, enabling you to draw meaningful conclusions from your data. We’ll cover essential statistical concepts and techniques to help you make sense of your findings.\nModeling is the process of building and evaluating models to make predictions or gain a deeper understanding of your data. We’ll introduce key modeling techniques and demonstrate how to apply them in R for various scenarios.\nQuarto for report writing is a valuable tool for creating dynamic and reproducible reports. We’ll show you how to use Quarto to generate professional reports that capture your data analysis process and findings.\nGit and GitHub are essential for version control and collaboration in coding projects. We’ll provide an overview of these tools and explain how they can streamline your coding workflow and facilitate teamwork.\nFinally, we’ll discuss the importance of blogs and websites in showcasing your work as a data scientist. Building an online presence through blogging and creating a personal website can help you share your insights and connect with others in the field.\nBy covering these nine major topics, we aim to equip you with the foundational knowledge and practical skills needed to excel in data science using R and Python. Whether you’re just starting or looking to expand your expertise, this blog post will serve as a valuable resource on your journey in the world of programming and data science."
  },
  {
    "objectID": "books.html",
    "href": "books.html",
    "title": "Penya",
    "section": "",
    "text": "Learning to code with the R language opens up a vast world of possibilities in data analysis, visualization, and spatial data handling. While the journey may seem daunting at first, having the right resources can significantly ease the learning curve. Here’s a curated list of relevant books to help you navigate through the intricacies of R programming:\n\nR for Data Science R for Data Science is a practical guide that serves as an excellent starting point for beginners. Authored by Hadley Wickham and Garrett Grolemund, this book introduces R programming for data analysis and visualization, with a strong emphasis on the tidyverse approach. Through hands-on examples and clear explanations, readers learn how to manipulate, explore, and visualize data effectively.\nModern R with the tidyverse takes a contemporary approach to R programming, focusing on modern packages, particularly those from the tidyverse ecosystem. Written by authors Thomas Mock and Rick Scavetta, this book goes beyond traditional R concepts, introducing readers to efficient data manipulation techniques and best practices for writing clean, readable code.\nPractical Spatial Data is an invaluable resource for those interested in working with spatial data, particularly in coastal and marine environments. Authored by Masumbuko Semba, this book provides a comprehensive introduction to R programming with a specific focus on handling spatial data. From importing geographic information to performing spatial analysis, readers gain practical insights and hands-on experience in utilizing R for geospatial applications.\nGeospatial Technology and Spatial Analysis in R delves deeper into the realm of geospatial data analysis using R. Written by Masumbuko Semba, this book explores the latest tools and packages available for modern spatial data handling and manipulation. Through step-by-step tutorials and real-world examples, readers learn how to harness the power of R for tasks such as geographic visualization, spatial statistics, and remote sensing analysis."
  },
  {
    "objectID": "people.html",
    "href": "people.html",
    "title": "Penya",
    "section": "",
    "text": "Mr. Masumbuko Semba\n\nRole: Mentor\nSemba works at the Nelson Mandela African Institution of Science and Technology. He is an expert in data science and spatial analytics, web app development, typset and layout of printing material and graphic designer\n\n\n\nMs. Nyamisi Peter\n\nRole: Mentor\nNyamisi works at University of Dar es Salaam. She is phytoplankton exeprt using earth observation data and automate data acquisation, process, analyse, and report in R\n\n\n\n\n\n\nMr. Barakael Matulu\n\nRole: Mentee\nBarakael works on the USAID Heshimu Bahari Project. He is an aquatic ecologist with interests in marine resources management and climate change issues. Recently, he has also developed an interest in automating data acquisition, processing, analysis, and reporting in R, as well as graphic design.\n\n\n\nMr. Emmanuel Mpina\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Ailars MIMP\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Alex Peter\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMs. Amina Kibola\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Juma Charles\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Benjamini Mpinga\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Bernaid MPRU\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nDr. Deo Shirima\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMs. Elika Kileo\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nDr. Elikana\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMs. Glady K.\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Hilary Mkai\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Humphrey Mahundi\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Ikumbi\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMs. Kaijage\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Kassim\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Kessy Revocatus\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMs. Kulwa Mtaki\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMs. Maria Pentzel\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Paschal Mkongola\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Sam Job\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr.Stephano Semba\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Edward Senkondo\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr.Shadrack Nyanda\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. January Wegoro\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Zac Maritine\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMs. Edina G\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. James\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMs. Kally\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Namate\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. Samwel\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\nMr. Julius Olumeh\n\nRole: Mentee\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\nMr. xxxxx\n\nRole: Facilitator\nAgnatquo digento tatqui officae rehentor reped quibero officae consenda que nobis ini tet libus, sanda debis sitatem pelignima doluptas eos sust parchitem dolor arume cumquia si coribus voluptio ent rem qui beatateseque nonsento modicia eprat.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: The video “CERN: The Journey of Discovery”"
  },
  {
    "objectID": "posts/dataTypes/index.html",
    "href": "posts/dataTypes/index.html",
    "title": "Understanding and using Data types in R",
    "section": "",
    "text": "In the realm of data science and statistical analysis, mastering data types is akin to understanding the building blocks of a language. In R, a powerful statistical computing language, data types form the foundation upon which all analyses are conducted. From integers to dates, each data type serves a unique purpose and understanding their nuances is critical for efficient and accurate data manipulation.\nUnderstanding and effectively utilizing these core data types in R is essential for performing data analysis, visualization, and modeling tasks. Mastery of data types empowers data scientists to manipulate data efficiently and extract valuable insights from complex datasets. Whether performing arithmetic operations, manipulating text, or handling temporal information, the versatility of R’s data types makes it a powerful tool for data analysis and statistical computing.\nIn this guide, we will delve into the core data types in R, exploring their characteristics and providing illustrative examples. Before we dive in, let pause for a moment and watch video in Figure 1\n\n\n\n\n\n\nFigure 1: Primary data types in R\n\n\n\n\nInteger:\nIntegers are whole numbers without any decimal or fractional component. In R, integers are represented by the integer class. They are commonly used for indexing and counting operations.\n\nExample 1  \n# Creating an integer variable\nx &lt;- 5L\nclass(x) # Output: \"integer\"\n\n# Arithmetic operations with integers\ny &lt;- x + 3\n\n\n\nNumeric:\nNumeric data type, also known as double in other programming languages, represents numbers with decimal points. Numeric data types are used for most mathematical calculations and statistical operations in R.\n\nExample 2  \n# Creating a numeric variable\nheight &lt;- 175.5\nclass(height) # Output: \"numeric\"\n\n# Arithmetic operations with numeric variables\nbmi &lt;- weight / (height^2)\n\n\n\nCharacter:\nCharacter data type represents textual data such as strings of letters, words, or sentences. In R, character values are enclosed in either single or double quotes.\n\nExample 3  \n# Creating a character variable\nname &lt;- \"John Doe\"\nclass(name) # Output: \"character\"\n\n# Concatenating character strings\ngreeting &lt;- paste(\"Hello\", name)\n\n\n\nLogical:\nLogical data type, often referred to as Boolean, represents binary values: TRUE or FALSE. Logical values are fundamental in controlling program flow and making decisions based on conditions.\n\nExample 4  \n# Creating logical variables\nis_adult &lt;- TRUE\nclass(is_adult) # Output: \"logical\"\n\n# Conditional statements with logical variables\nif (is_adult) {\n  print(\"You are an adult.\")\n} else {\n  print(\"You are not an adult.\")\n}\n\n\n\nFactor:\nFactor data type is used to represent categorical data in R. Factors are stored as integers with associated labels, making them efficient for statistical modeling and analysis.\n\nExample 5  \n# Creating a factor variable\ngender &lt;- factor(c(\"Male\", \"Female\", \"Female\", \"Male\"))\nclass(gender) # Output: \"factor\"\n\n# Summary statistics with factors\ntable(gender)\n\n\n\nDate and Time:\nDate and time data types are crucial for handling temporal information in R. R provides specialized classes for dates (Date) and date-time values (POSIXct, POSIXlt).\n\nExample 6  \n# Creating a date variable\ntoday &lt;- as.Date(\"2024-04-25\")\nclass(today) # Output: \"Date\"\n\n# Date arithmetic\nnext_week &lt;- today + 7\n\n# Creating a POSIXct variable (date-time)\ncurrent_time &lt;- Sys.time()\nclass(current_time) # Output: \"POSIXct\"\n\nIn this post we learned about different R data types and what kind of data do they hold. Data type is very important concept in programming and can not be ignored. We have explained about each data type with example in this article."
  },
  {
    "objectID": "posts/timeline/index.html",
    "href": "posts/timeline/index.html",
    "title": "Creating a Timeline graphic using R and ggplot2",
    "section": "",
    "text": "In this post we’re going to be using R and ggplot2 to create a project timeline with milestones and milestone statuses.\nThe finished product will look like as illustrated in Figure 1\n\n\n\n\n\n\nFigure 1: A timeline of the Milestone for learning Modern"
  }
]